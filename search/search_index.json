{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NDR \u00b6 NDR (Neuroscience Data Readers): A Matlab conglomerative package for reading neuroscience data files About \u00b6 NDR-matlab is a package for reading neuroscience data files in a standard way. It includes some original code and some bundled code from other open source projects. It will eventually provide the file reading functionality for NDI (Neuroscience Data Interface) as NDI scales up but is available for use widely in many projects. The package is focused around a central object called ndr.reader . This object can be used to read file metadata (such as the channels that were turned on during the acquisition, the sampling rate, and other quantities) as well as file data. The package is supported by a number of ndr.reader.* class objects that actually perform the reading of different file types in neuroscience. It is intended that this package will be self-sufficient and not require other open source Matlab packages, although it does require some Matlab toolboxes from The MathWorks. Supported formats \u00b6 Vendor/Format Extension(s) NDR Names Support Notes Intan RHD .rhd 'Intan', 'IntanRHD', 'RHD' Native Matlab CED Spike2/SMR .smr 'SMR', 'Spike2', 'CEDSpike2' Native Matlab via sigTOOL (included) SpikeGadgets .rec 'SpikeGadgets', 'SpikeGadgetsREC' Native Matlab Blackrock Microsystems '.NEV', 'NS#' 'BlackrockNEV', 'BlackrockNS4', 'BlackrockNS5' Native Matlab via NPMK (from Blackrock Microsystems) (included) Dozens of other formats are supported via the integration with Neo-Python (see the list here - https://neo.readthedocs.io/en/stable/rawio.html#module-neo.rawio, note that NDR only suppports the Neo formats that implement RawIO ). Licenses from other software \u00b6 This package has files from a variety of distributions. It is our intention to only distribute code that is in the public domain or is licensed for re-distribution. If you find your code here that is not properly distributed please notify the maintainer. Availability \u00b6 A mature prototype of NDR is available in Matlab . Installation \u00b6 Check out the Installation Guide . Help and Support \u00b6 Use the issue tracker to submit questions, bugs, and issues. Financial Support \u00b6 Supported by the NIH BRAIN Initiative informatics group , grant MH114678, and by the MathWorks / INCF Community Toolbox Training Project program. Contributors \u00b6 Many thanks to our contributors .","title":"Home"},{"location":"#ndr","text":"NDR (Neuroscience Data Readers): A Matlab conglomerative package for reading neuroscience data files","title":"NDR"},{"location":"#about","text":"NDR-matlab is a package for reading neuroscience data files in a standard way. It includes some original code and some bundled code from other open source projects. It will eventually provide the file reading functionality for NDI (Neuroscience Data Interface) as NDI scales up but is available for use widely in many projects. The package is focused around a central object called ndr.reader . This object can be used to read file metadata (such as the channels that were turned on during the acquisition, the sampling rate, and other quantities) as well as file data. The package is supported by a number of ndr.reader.* class objects that actually perform the reading of different file types in neuroscience. It is intended that this package will be self-sufficient and not require other open source Matlab packages, although it does require some Matlab toolboxes from The MathWorks.","title":"About"},{"location":"#supported-formats","text":"Vendor/Format Extension(s) NDR Names Support Notes Intan RHD .rhd 'Intan', 'IntanRHD', 'RHD' Native Matlab CED Spike2/SMR .smr 'SMR', 'Spike2', 'CEDSpike2' Native Matlab via sigTOOL (included) SpikeGadgets .rec 'SpikeGadgets', 'SpikeGadgetsREC' Native Matlab Blackrock Microsystems '.NEV', 'NS#' 'BlackrockNEV', 'BlackrockNS4', 'BlackrockNS5' Native Matlab via NPMK (from Blackrock Microsystems) (included) Dozens of other formats are supported via the integration with Neo-Python (see the list here - https://neo.readthedocs.io/en/stable/rawio.html#module-neo.rawio, note that NDR only suppports the Neo formats that implement RawIO ).","title":"Supported formats"},{"location":"#licenses-from-other-software","text":"This package has files from a variety of distributions. It is our intention to only distribute code that is in the public domain or is licensed for re-distribution. If you find your code here that is not properly distributed please notify the maintainer.","title":"Licenses from other software"},{"location":"#availability","text":"A mature prototype of NDR is available in Matlab .","title":"Availability"},{"location":"#installation","text":"Check out the Installation Guide .","title":"Installation"},{"location":"#help-and-support","text":"Use the issue tracker to submit questions, bugs, and issues.","title":"Help and Support"},{"location":"#financial-support","text":"Supported by the NIH BRAIN Initiative informatics group , grant MH114678, and by the MathWorks / INCF Community Toolbox Training Project program.","title":"Financial Support"},{"location":"#contributors","text":"Many thanks to our contributors .","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Anyone with a GitHub account can contribute. Press the Fork button in the upper-right corner of the NDR-matlab GitHub repository to make a copy of NDR in your own GitHub space. Add your own ndr.reader.base base object, as described in the tutorial. Be sure to write a test function. If any helper functions are needed, be sure you have permission to add them, and add them to the ndr.format package or to the lib folder. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDR development team for integration.","title":"Contributing"},{"location":"contributing/#contributing","text":"Anyone with a GitHub account can contribute. Press the Fork button in the upper-right corner of the NDR-matlab GitHub repository to make a copy of NDR in your own GitHub space. Add your own ndr.reader.base base object, as described in the tutorial. Be sure to write a test function. If any helper functions are needed, be sure you have permission to add them, and add them to the ndr.format package or to the lib folder. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDR development team for integration.","title":"Contributing"},{"location":"installation/","text":"Installation: \u00b6 Recommended method: \u00b6 NDR is installed as a part of the Neuroscience Data Interface ( NDI ). The easiest way is to install it with the NDI installer as described here. Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Run the following in Matlab: cd ~/Desktop ndi_install Python code \u00b6 NDR can now call Python code, including the neo Python package for reading neurophysiology files. See here for instructions to install the particular version of Python and the dependencies necessary to use neo. Manual method: \u00b6 Run the following on your terminal command line: git clone http://github.com/VH-Lab/NDR-matlab You'll need a Matlab startup.m file. Add the command ndi_Init to that file, after ensuring that the directory for NDR-matlab is on your Matlab path. (All of these steps are taken care of via the automatic installation above.)","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation:"},{"location":"installation/#recommended-method","text":"NDR is installed as a part of the Neuroscience Data Interface ( NDI ). The easiest way is to install it with the NDI installer as described here. Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Run the following in Matlab: cd ~/Desktop ndi_install","title":"Recommended method:"},{"location":"installation/#python-code","text":"NDR can now call Python code, including the neo Python package for reading neurophysiology files. See here for instructions to install the particular version of Python and the dependencies necessary to use neo.","title":"Python code"},{"location":"installation/#manual-method","text":"Run the following on your terminal command line: git clone http://github.com/VH-Lab/NDR-matlab You'll need a Matlab startup.m file. Add the command ndi_Init to that file, after ensuring that the directory for NDR-matlab is on your Matlab path. (All of these steps are taken care of via the automatic installation above.)","title":"Manual method:"},{"location":"notes/ced_smr_channels/","text":"Channel names in CED Spike2 files: \u00b6 How channels are named natively according to the CED Spike2 systems: \u00b6 CED Type What it is How specified Example native channel name Example meaning Waveforms Analog waveforms that are regularly sampled Specified according to type and number ai21 Reads waveform data on channel 21 Event- Digital events that are defined by a negative-going signal 'e' and channel number e24 All events on channel 24 (no check is made to ensure they are negative going, any event on channel 24 is returned) Event+ Digital events that are defined by a negative-going signal 'e' and channel number e25 All events on channel 25 (no check is made to ensure they are positive going, any event on channel 25 is returned) Level Digital events that are defined by a positive or negative-going signal 'e' and channel number e26 All events on channel 26 (no check is made to see how the event is defined) Marker Specify a numeric marker with the channel number mk20 numeric marker on channel 20 TextMark Specify a text marker with the channel number text30 Text marker on channel 30 Example input to ndr.read Meaning 'ai1-3' Waveforms on channels 1 through 3 (total of 3 channels) 'e10' Digital events on channel 10 'text30' Text marker events on channel 30","title":"Channel names in CED Spike2 files:"},{"location":"notes/ced_smr_channels/#channel-names-in-ced-spike2-files","text":"","title":"Channel names in CED Spike2 files:"},{"location":"notes/ced_smr_channels/#how-channels-are-named-natively-according-to-the-ced-spike2-systems","text":"CED Type What it is How specified Example native channel name Example meaning Waveforms Analog waveforms that are regularly sampled Specified according to type and number ai21 Reads waveform data on channel 21 Event- Digital events that are defined by a negative-going signal 'e' and channel number e24 All events on channel 24 (no check is made to ensure they are negative going, any event on channel 24 is returned) Event+ Digital events that are defined by a negative-going signal 'e' and channel number e25 All events on channel 25 (no check is made to ensure they are positive going, any event on channel 25 is returned) Level Digital events that are defined by a positive or negative-going signal 'e' and channel number e26 All events on channel 26 (no check is made to see how the event is defined) Marker Specify a numeric marker with the channel number mk20 numeric marker on channel 20 TextMark Specify a text marker with the channel number text30 Text marker on channel 30 Example input to ndr.read Meaning 'ai1-3' Waveforms on channels 1 through 3 (total of 3 channels) 'e10' Digital events on channel 10 'text30' Text marker events on channel 30","title":"How channels are named natively according to the CED Spike2 systems:"},{"location":"notes/intan_channels/","text":"Channel names in Intan RHD files: \u00b6 How channels are named natively according to the Intan system: \u00b6 Type How specified Example native channel name Example meaning Traditional analog inputs Specified according to the input bank ('A', 'B', 'C', D', etc) and a number. A-000 Analog input bank A, channel 000 Auxillary analog inputs Specified according to input bank ('A', 'B', 'C', 'D', etc) followed by '-AUX' and a number. A-AUX2 Auxillary input bank A channel 2 Traditional digital inputs Specified with 'DIN-' followed by the channel number DIN-00 Digital input channel 00 Traditional digital outputs log Specified with 'DOUT-' followed by the channel number DOUT-00 Digital output channel 00 Supply voltage channels Specified with bank followed by '-VDD1' A-VDD1 Supply voltage on port A NDR doesn't allow dashes in read strings so one specfies channels from different banks according to the following examples: Example input to ndr.read Meaning 'A000-015' Traditional analog input channels A-000 through A-015 (total of 16 channels) 'A000-010;B023-035' Traditional analog input channels A-000 through A-010 and channels B-023 through 035 (total of 24 channels) 'DIN00-15' Digital input channels 00 - 15 'AAUX1-3' Auxillary inputs 1-3 from bank A Relative channel specification for Intan: \u00b6 NDR also allows one to specify Intan channels in a relative fashion. The mapping between relative channels and the native channel names varies depending upon which channels were turned on during a particular recording. Type How specified Example channel name Example meaning Traditional analog inputs 'ai' followed by channel number 'ai1' The first analog input channel that was turned on in the acquisition; for example, if A-023 was the lowest channel that was turned on during the recording, then 'ai1' would correspond to channel A-023. If A-030 was the lowest channel turned on during the recording, then 'ai1' would correspond to A-030. Traditional digital inputs 'di' followed by channel number 'di1' The first digital input channel. If DIN-000 was active, then 'di1' would correspond to DIN-000. Examples: Example input to ndr.read Meaning 'ai1-5' The first (lowest name/numbered) 5 channels that were turned on during the recording. 'ai5-7' The fifth through 7th channels (starting from the lowest name/number) that were turned on during the recording. 'di1-16' The first through 16th digital channels that were turned on during the recording.","title":"Channel names in Intan RHD files:"},{"location":"notes/intan_channels/#channel-names-in-intan-rhd-files","text":"","title":"Channel names in Intan RHD files:"},{"location":"notes/intan_channels/#how-channels-are-named-natively-according-to-the-intan-system","text":"Type How specified Example native channel name Example meaning Traditional analog inputs Specified according to the input bank ('A', 'B', 'C', D', etc) and a number. A-000 Analog input bank A, channel 000 Auxillary analog inputs Specified according to input bank ('A', 'B', 'C', 'D', etc) followed by '-AUX' and a number. A-AUX2 Auxillary input bank A channel 2 Traditional digital inputs Specified with 'DIN-' followed by the channel number DIN-00 Digital input channel 00 Traditional digital outputs log Specified with 'DOUT-' followed by the channel number DOUT-00 Digital output channel 00 Supply voltage channels Specified with bank followed by '-VDD1' A-VDD1 Supply voltage on port A NDR doesn't allow dashes in read strings so one specfies channels from different banks according to the following examples: Example input to ndr.read Meaning 'A000-015' Traditional analog input channels A-000 through A-015 (total of 16 channels) 'A000-010;B023-035' Traditional analog input channels A-000 through A-010 and channels B-023 through 035 (total of 24 channels) 'DIN00-15' Digital input channels 00 - 15 'AAUX1-3' Auxillary inputs 1-3 from bank A","title":"How channels are named natively according to the Intan system:"},{"location":"notes/intan_channels/#relative-channel-specification-for-intan","text":"NDR also allows one to specify Intan channels in a relative fashion. The mapping between relative channels and the native channel names varies depending upon which channels were turned on during a particular recording. Type How specified Example channel name Example meaning Traditional analog inputs 'ai' followed by channel number 'ai1' The first analog input channel that was turned on in the acquisition; for example, if A-023 was the lowest channel that was turned on during the recording, then 'ai1' would correspond to channel A-023. If A-030 was the lowest channel turned on during the recording, then 'ai1' would correspond to A-030. Traditional digital inputs 'di' followed by channel number 'di1' The first digital input channel. If DIN-000 was active, then 'di1' would correspond to DIN-000. Examples: Example input to ndr.read Meaning 'ai1-5' The first (lowest name/numbered) 5 channels that were turned on during the recording. 'ai5-7' The fifth through 7th channels (starting from the lowest name/number) that were turned on during the recording. 'di1-16' The first through 16th digital channels that were turned on during the recording.","title":"Relative channel specification for Intan:"},{"location":"reference/ndr_Init.m/","text":"ndr_Init \u00b6 NDR_INIT - initalize a global variable ndr_globals with default file paths","title":"ndr_Init"},{"location":"reference/ndr_Init.m/#ndr_init","text":"NDR_INIT - initalize a global variable ndr_globals with default file paths","title":"ndr_Init"},{"location":"reference/%2Bndr/globals.m/","text":"ndr.globals \u00b6 GLOBALS - define global variables for NDR NDR . GLOBALS Script that defines some global variables for the NDR package The following variables are defined : Name : | Description ------------------------------------------------------------------------- ndr_globals . path . path | The path of the NDR distribution on this machine . | ( Initialized by ndr_Init . m ) ndr_globals . path . preferences | A path to a directory of preferences files ndr_globals . path . filecachepath | A path where files may be cached ( not deleted every time ) ndr_globals . path . temppath | The path to a directory that may be used for | temporary files ( Initialized by ndr_Init . m ) ndi_globals . path . testpath | A path to a safe place to run test code ndi . debug | A structure with preferences for debugging","title":"ndr.globals"},{"location":"reference/%2Bndr/globals.m/#ndrglobals","text":"GLOBALS - define global variables for NDR NDR . GLOBALS Script that defines some global variables for the NDR package The following variables are defined : Name : | Description ------------------------------------------------------------------------- ndr_globals . path . path | The path of the NDR distribution on this machine . | ( Initialized by ndr_Init . m ) ndr_globals . path . preferences | A path to a directory of preferences files ndr_globals . path . filecachepath | A path where files may be cached ( not deleted every time ) ndr_globals . path . temppath | The path to a directory that may be used for | temporary files ( Initialized by ndr_Init . m ) ndi_globals . path . testpath | A path to a safe place to run test code ndi . debug | A structure with preferences for debugging","title":"ndr.globals"},{"location":"reference/%2Bndr/known_readers.m/","text":"ndr.known_readers \u00b6 KNOWN_READERS - return known reader types for NDR - MATLAB STR = KNOWN_READERS Return all known reader file types for NDR readers Example : str = ndr . known_readers ()","title":"ndr.known_readers"},{"location":"reference/%2Bndr/known_readers.m/#ndrknown_readers","text":"KNOWN_READERS - return known reader types for NDR - MATLAB STR = KNOWN_READERS Return all known reader file types for NDR readers Example : str = ndr . known_readers ()","title":"ndr.known_readers"},{"location":"reference/%2Bndr/reader.m/","text":"CLASS ndr.reader \u00b6 READER - Create a new Neuroscience Data Reader ( NDR ) object . NDR_READER_OBJ = ndr . reader ( NDR_READER_TYPE ) Creates a Neuroscience Data Reader object capable of reading a specific data format identified by NDR_READER_TYPE . This object acts as a high - level interface , utilizing an underlying specific reader object ( subclass of ndr . reader . base ) to handle the details of the file format . Inputs : NDR_READER_TYPE - A string specifying the data format to read . Valid types are defined in 'ndr_reader_types.json' and can include short names ( e . g ., 'rhd' , 'smr' , 'rec' , 'abf' , 'sev' , 'neo' , 'whitematter' ) or longer aliases . Outputs : NDR_READER_OBJ - The created ndr . reader object handle . Example : % Create a reader for Intan RHD files intan_reader = ndr . reader ( 'intan' ); % Create a reader for SpikeGadgets REC files rec_reader = ndr . reader ( 'rec' ); See also: ndr.reader.base, ndr.fun.ndrresource, ndr.known_readers Superclasses \u00b6 none Properties \u00b6 Property Description ndr_reader_base The specific ndr.reader.base object that actually reads the files Methods \u00b6 Method Description epochclock Return the ndr.time.clocktype objects for an epoch. getchannelsepoch List the channels available for a given epoch. read Read data or time information from specified channels and epoch. readchannels_epochsamples Read regularly sampled data channels. reader Create a new Neuroscience Data Reader (NDR) object. readevents_epochsamples Read event/marker data or derive events from digital channels. readevents_epochsamples_native Read native event/marker channels. samplerate Get the sample rate for specific regularly-sampled channels. t0_t1 Return the beginning and end times for an epoch. underlying_datatype Get the native data type for specified channels. Methods help \u00b6 epochclock - Return the ndr.time.clocktype objects for an epoch. EC = EPOCHCLOCK ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the clock types available for the specified epoch as a cell array of ndr . time . clocktype objects ( or subclasses ). This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index ( default : 1 ). Outputs : EC - Cell array of ndr . time . clocktype objects . See also : ndr . time . clocktype , ndr . reader . base / epochclock getchannelsepoch - List the channels available for a given epoch. CHANNELS = GETCHANNELSEPOCH ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns a structure list of all channels available in the specified epoch . This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index ( default : 1 ). Outputs : CHANNELS - Structure array with fields : 'name' : Channel name ( e . g ., 'ai1' , 't1' ). 'type' : Channel type ( e . g ., 'analog_in' , 'time' ). 'time_channel' : ( Optional ) Index of the associated time channel . See also : ndr . reader . base / getchannelsepoch read - Read data or time information from specified channels and epoch. [ DATA , TIME ] = READ ( NDR_READER_OBJ , EPOCHSTREAMS , CHANNELSTRING , Name , Value , ... ) Reads data and corresponding time information from the specified channels within a given epoch . This function determines the appropriate underlying read method ( e . g ., readchannels_epochsamples or readevents_epochsamples ) based on the channel type derived from CHANNELSTRING . Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - A cell array of full path file names or remote access streams that comprise the epoch of data . CHANNELSTRING - Specifies the channels to read . Format depends on the underlying reader : - Standard NDR format : A string combining prefixes and numbers ( e . g ., 'ai1-3,5' , 'ai1+di1' ). See ndr . string . channelstring2channels . - Intan Reader : Accepts standard NDR format OR Intan native names ( e . g ., 'A000+A001' ). - Neo Reader : Expects a cell array of native channel names ( e . g ., { 'A-000' , 'A-001' }). Name - Value Pair Arguments : 't0' ( - Inf ) : Start time for reading ( seconds ). - Inf reads from the earliest available sample . 't1' ( Inf ) : Stop time for reading ( seconds ). Inf reads to the last available sample . 'epoch_select' ( 1 ) : The epoch index within EPOCHSTREAMS to read . Usually 1 , as most formats have one epoch per file . 'useSamples' ( 0 ) : If 1 , interpret 's0' and 's1' as sample numbers instead of times . ( logical ). 's0' ( NaN ) : Start sample number ( 1 - based ) if useSamples is 1. 's1' ( NaN ) : Stop sample number ( 1 - based ) if useSamples is 1. Outputs : DATA - Data read from the specified channels . Format depends on channel type : - Regularly sampled ( e . g ., 'ai' ): N x C matrix ( double ), where N is samples , C is channels . - Events / Markers : N x C matrix or cell array , format depends on event type ( see readevents_epochsamples ). TIME - N x 1 vector ( double ) of time points ( seconds ) corresponding to the samples / events in DATA . For events / markers , format matches DATA ( N x C matrix or cell array ). Example : r = ndr . reader ( 'intan' ); filenames = { '/path/to/mydata.rhd' }; % Read analog input channels 1 and 2 from time 10s to 15s [ analogData , timeVec ] = r . read ( filenames , 'ai1-2' , 't0' , 10 , 't1' , 15 ); % Read samples 1000 to 2000 for channel 'A000' (Intan specific) [ sampleData , sampleTime ] = r . read ( filenames , 'A000' , 'useSamples' , 1 , 's0' , 1000 , 's1' , 2000 ); See also: ndr.reader/readchannels_epochsamples, ndr.reader/readevents_epochsamples, ndr . string . channelstring2channels , ndr . reader . base / daqchannels2internalchannels readchannels_epochsamples - Read regularly sampled data channels. DATA = READCHANNELS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , ... CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , S0 , S1 ) Reads data for regularly sampled channels ( e . g ., analog , digital ) between sample S0 and sample S1 ( inclusive , 1 - based ). This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). Inputs : NDR_READER_OBJ - The ndr . reader object . CHANNELTYPE - String specifying the type ( e . g ., 'ai' , 'di' , 'time' ). CHANNEL - Vector of channel numbers . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . S0 - Start sample number ( 1 - based ). S1 - End sample number ( 1 - based ). Outputs : DATA - N x C matrix of data ( double or native type ), or N x 1 vector for 'time' . See also : ndr . reader . base / readchannels_epochsamples reader - Create a new Neuroscience Data Reader (NDR) object. NDR_READER_OBJ = ndr . reader ( NDR_READER_TYPE ) Creates a Neuroscience Data Reader object capable of reading a specific data format identified by NDR_READER_TYPE . This object acts as a high - level interface , utilizing an underlying specific reader object ( subclass of ndr . reader . base ) to handle the details of the file format . Inputs : NDR_READER_TYPE - A string specifying the data format to read . Valid types are defined in 'ndr_reader_types.json' and can include short names ( e . g ., 'rhd' , 'smr' , 'rec' , 'abf' , 'sev' , 'neo' , 'whitematter' ) or longer aliases . Outputs : NDR_READER_OBJ - The created ndr . reader object handle . Example : % Create a reader for Intan RHD files intan_reader = ndr . reader ( 'intan' ); % Create a reader for SpikeGadgets REC files rec_reader = ndr . reader ( 'rec' ); See also: ndr.reader.base, ndr.fun.ndrresource, ndr.known_readers Documentation for ndr . reader / reader doc ndr . reader readevents_epochsamples - Read event/marker data or derive events from digital channels. [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , ... CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Reads event or marker data occurring between time T0 and T1 ( seconds ). This function handles both reading native event / marker channel types ( like 'event' , 'marker' , 'text' ) by calling `readevents_epochsamples_native` , and deriving events from digital channels ( types 'dep' , 'den' , 'dimp' , 'dimn' ) by reading the digital data and detecting transitions . Inputs : NDR_READER_OBJ - The ndr . reader object . CHANNELTYPE - Cell array of strings specifying the type for each channel in CHANNEL . Valid types include : 'event' : Timestamps of occurrences ( data is 1 ). 'marker' : Timestamps and associated marker codes ( double ). 'text' : Timestamps and associated text ( cellstr ). 'dep' : Events at positive digital transitions ( 0 -> 1 ). 'den' : Events at negative digital transitions ( 1 -> 0 ). 'dimp' : Events at positive impulses ( 0 -> 1 -> 0 ). 'dimn' : Events at negative impulses ( 1 -> 0 -> 1 ). CHANNEL - Vector of channel numbers corresponding to CHANNELTYPE . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . T0 - Start time ( seconds ). T1 - End time ( seconds ). Outputs : TIMESTAMPS - Timestamps of events / markers ( seconds ). Format matches DATA . If 1 channel , N x 1 double vector . If > 1 channel , 1 x C cell array of N x 1 double vectors . DATA - Data associated with events / markers . Format depends on type . If 1 channel , N x D matrix or N x 1 cellstr . If > 1 channel , 1 x C cell array . See also : ndr . reader / readevents_epochsamples_native , ndr . reader . base / readevents_epochsamples_native Step 1 : check to see if the user is requesting a \"native\" type of event ( event , marker , text ) or a \"derived\" type of event ( like dep , den , dimp , dimn , which are derived from the data of sampled digital channels ) If the user does request a derived event type , then compute it readevents_epochsamples_native - Read native event/marker channels. [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_OBJ , ... CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Reads event or marker data directly as stored in the file format , occurring between time T0 and T1 ( seconds ). This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). It cannot handle derived event types ( 'dep' , 'den' , 'dimp' , 'dimn' ); use `readevents_epochsamples` for those . Inputs : NDR_READER_OBJ - The ndr . reader object . CHANNELTYPE - Cell array of strings specifying the native type for each channel ( 'event' , 'marker' , 'text' ). CHANNEL - Vector of channel numbers . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . T0 - Start time ( seconds ). T1 - End time ( seconds ). Outputs : TIMESTAMPS - Timestamps of events / markers ( seconds ). Format matches DATA . DATA - Data associated with events / markers . Format depends on type . See also : ndr . reader / readevents_epochsamples , ndr . reader . base / readevents_epochsamples_native samplerate - Get the sample rate for specific regularly-sampled channels. SR = SAMPLERATE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Returns the sampling rate ( s ) in Hz for the specified regularly - sampled channels . This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). Inputs : NDR_READER_OBJ - The ndr . reader object . CHANNELTYPE - Cell array of strings specifying the channel type ( e . g ., { 'ai' , 'ai' } , { 'di' } ). Must be a regularly - sampled type . CHANNEL - Vector of channel numbers . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . Outputs : SR - Vector of sampling rates ( Hz ) corresponding to each channel requested . Returns NaN for channels that are not regularly sampled ( e . g ., events ). See also : ndr . reader . base / samplerate t0_t1 - Return the beginning and end times for an epoch. T0T1 = T0_T1 ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the beginning ( t0 ) and end ( t1 ) times ( in seconds ) of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT , relative to the clock type specified by EPOCHCLOCK . This function calls the corresponding method of the underlying specific reader object ( ` ndr_reader_base ` ). Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index ( default : 1 ). Outputs : T0T1 - Cell array containing a 1 x2 vector [ t0 t1 ] for each clock type returned by EPOCHCLOCK . See also : ndr . reader / epochclock , ndr . reader . base / t0_t1 underlying_datatype - Get the native data type for specified channels. [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , ... EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Returns information about the underlying data type as stored in the file for the specified channels . This function calls the corresponding method of the underlying specific reader object ( ` ndr_reader_base ` ). Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . CHANNELTYPE - String specifying the type of channels ( e . g ., ' ai ' ). CHANNEL - Vector of channel numbers . Outputs : DATATYPE - String representing the native data type ( e . g ., ' int16 ' , ' float32 ' ). Suitable for FREAD / FWRITE . P - Polynomial coefficients [ offset scale ] for converting raw data to the units returned by readchannels . Typically [ 0 1 ] if raw data is returned . DATASIZE - Size of the data type in bits ( e . g ., 16 , 32 , 64 ). See also : ndr . reader . base / underlying_datatype , fread , fwrite","title":"ndr.reader"},{"location":"reference/%2Bndr/reader.m/#class-ndrreader","text":"READER - Create a new Neuroscience Data Reader ( NDR ) object . NDR_READER_OBJ = ndr . reader ( NDR_READER_TYPE ) Creates a Neuroscience Data Reader object capable of reading a specific data format identified by NDR_READER_TYPE . This object acts as a high - level interface , utilizing an underlying specific reader object ( subclass of ndr . reader . base ) to handle the details of the file format . Inputs : NDR_READER_TYPE - A string specifying the data format to read . Valid types are defined in 'ndr_reader_types.json' and can include short names ( e . g ., 'rhd' , 'smr' , 'rec' , 'abf' , 'sev' , 'neo' , 'whitematter' ) or longer aliases . Outputs : NDR_READER_OBJ - The created ndr . reader object handle . Example : % Create a reader for Intan RHD files intan_reader = ndr . reader ( 'intan' ); % Create a reader for SpikeGadgets REC files rec_reader = ndr . reader ( 'rec' ); See also: ndr.reader.base, ndr.fun.ndrresource, ndr.known_readers","title":"CLASS ndr.reader"},{"location":"reference/%2Bndr/reader.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndr/reader.m/#properties","text":"Property Description ndr_reader_base The specific ndr.reader.base object that actually reads the files","title":"Properties"},{"location":"reference/%2Bndr/reader.m/#methods","text":"Method Description epochclock Return the ndr.time.clocktype objects for an epoch. getchannelsepoch List the channels available for a given epoch. read Read data or time information from specified channels and epoch. readchannels_epochsamples Read regularly sampled data channels. reader Create a new Neuroscience Data Reader (NDR) object. readevents_epochsamples Read event/marker data or derive events from digital channels. readevents_epochsamples_native Read native event/marker channels. samplerate Get the sample rate for specific regularly-sampled channels. t0_t1 Return the beginning and end times for an epoch. underlying_datatype Get the native data type for specified channels.","title":"Methods"},{"location":"reference/%2Bndr/reader.m/#methods-help","text":"epochclock - Return the ndr.time.clocktype objects for an epoch. EC = EPOCHCLOCK ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the clock types available for the specified epoch as a cell array of ndr . time . clocktype objects ( or subclasses ). This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index ( default : 1 ). Outputs : EC - Cell array of ndr . time . clocktype objects . See also : ndr . time . clocktype , ndr . reader . base / epochclock getchannelsepoch - List the channels available for a given epoch. CHANNELS = GETCHANNELSEPOCH ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns a structure list of all channels available in the specified epoch . This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index ( default : 1 ). Outputs : CHANNELS - Structure array with fields : 'name' : Channel name ( e . g ., 'ai1' , 't1' ). 'type' : Channel type ( e . g ., 'analog_in' , 'time' ). 'time_channel' : ( Optional ) Index of the associated time channel . See also : ndr . reader . base / getchannelsepoch read - Read data or time information from specified channels and epoch. [ DATA , TIME ] = READ ( NDR_READER_OBJ , EPOCHSTREAMS , CHANNELSTRING , Name , Value , ... ) Reads data and corresponding time information from the specified channels within a given epoch . This function determines the appropriate underlying read method ( e . g ., readchannels_epochsamples or readevents_epochsamples ) based on the channel type derived from CHANNELSTRING . Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - A cell array of full path file names or remote access streams that comprise the epoch of data . CHANNELSTRING - Specifies the channels to read . Format depends on the underlying reader : - Standard NDR format : A string combining prefixes and numbers ( e . g ., 'ai1-3,5' , 'ai1+di1' ). See ndr . string . channelstring2channels . - Intan Reader : Accepts standard NDR format OR Intan native names ( e . g ., 'A000+A001' ). - Neo Reader : Expects a cell array of native channel names ( e . g ., { 'A-000' , 'A-001' }). Name - Value Pair Arguments : 't0' ( - Inf ) : Start time for reading ( seconds ). - Inf reads from the earliest available sample . 't1' ( Inf ) : Stop time for reading ( seconds ). Inf reads to the last available sample . 'epoch_select' ( 1 ) : The epoch index within EPOCHSTREAMS to read . Usually 1 , as most formats have one epoch per file . 'useSamples' ( 0 ) : If 1 , interpret 's0' and 's1' as sample numbers instead of times . ( logical ). 's0' ( NaN ) : Start sample number ( 1 - based ) if useSamples is 1. 's1' ( NaN ) : Stop sample number ( 1 - based ) if useSamples is 1. Outputs : DATA - Data read from the specified channels . Format depends on channel type : - Regularly sampled ( e . g ., 'ai' ): N x C matrix ( double ), where N is samples , C is channels . - Events / Markers : N x C matrix or cell array , format depends on event type ( see readevents_epochsamples ). TIME - N x 1 vector ( double ) of time points ( seconds ) corresponding to the samples / events in DATA . For events / markers , format matches DATA ( N x C matrix or cell array ). Example : r = ndr . reader ( 'intan' ); filenames = { '/path/to/mydata.rhd' }; % Read analog input channels 1 and 2 from time 10s to 15s [ analogData , timeVec ] = r . read ( filenames , 'ai1-2' , 't0' , 10 , 't1' , 15 ); % Read samples 1000 to 2000 for channel 'A000' (Intan specific) [ sampleData , sampleTime ] = r . read ( filenames , 'A000' , 'useSamples' , 1 , 's0' , 1000 , 's1' , 2000 ); See also: ndr.reader/readchannels_epochsamples, ndr.reader/readevents_epochsamples, ndr . string . channelstring2channels , ndr . reader . base / daqchannels2internalchannels readchannels_epochsamples - Read regularly sampled data channels. DATA = READCHANNELS_EPOCHSAMPLES ( NDR_READER_OBJ , CHANNELTYPE , ... CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , S0 , S1 ) Reads data for regularly sampled channels ( e . g ., analog , digital ) between sample S0 and sample S1 ( inclusive , 1 - based ). This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). Inputs : NDR_READER_OBJ - The ndr . reader object . CHANNELTYPE - String specifying the type ( e . g ., 'ai' , 'di' , 'time' ). CHANNEL - Vector of channel numbers . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . S0 - Start sample number ( 1 - based ). S1 - End sample number ( 1 - based ). Outputs : DATA - N x C matrix of data ( double or native type ), or N x 1 vector for 'time' . See also : ndr . reader . base / readchannels_epochsamples reader - Create a new Neuroscience Data Reader (NDR) object. NDR_READER_OBJ = ndr . reader ( NDR_READER_TYPE ) Creates a Neuroscience Data Reader object capable of reading a specific data format identified by NDR_READER_TYPE . This object acts as a high - level interface , utilizing an underlying specific reader object ( subclass of ndr . reader . base ) to handle the details of the file format . Inputs : NDR_READER_TYPE - A string specifying the data format to read . Valid types are defined in 'ndr_reader_types.json' and can include short names ( e . g ., 'rhd' , 'smr' , 'rec' , 'abf' , 'sev' , 'neo' , 'whitematter' ) or longer aliases . Outputs : NDR_READER_OBJ - The created ndr . reader object handle . Example : % Create a reader for Intan RHD files intan_reader = ndr . reader ( 'intan' ); % Create a reader for SpikeGadgets REC files rec_reader = ndr . reader ( 'rec' ); See also: ndr.reader.base, ndr.fun.ndrresource, ndr.known_readers Documentation for ndr . reader / reader doc ndr . reader readevents_epochsamples - Read event/marker data or derive events from digital channels. [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES ( NDR_READER_OBJ , ... CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Reads event or marker data occurring between time T0 and T1 ( seconds ). This function handles both reading native event / marker channel types ( like 'event' , 'marker' , 'text' ) by calling `readevents_epochsamples_native` , and deriving events from digital channels ( types 'dep' , 'den' , 'dimp' , 'dimn' ) by reading the digital data and detecting transitions . Inputs : NDR_READER_OBJ - The ndr . reader object . CHANNELTYPE - Cell array of strings specifying the type for each channel in CHANNEL . Valid types include : 'event' : Timestamps of occurrences ( data is 1 ). 'marker' : Timestamps and associated marker codes ( double ). 'text' : Timestamps and associated text ( cellstr ). 'dep' : Events at positive digital transitions ( 0 -> 1 ). 'den' : Events at negative digital transitions ( 1 -> 0 ). 'dimp' : Events at positive impulses ( 0 -> 1 -> 0 ). 'dimn' : Events at negative impulses ( 1 -> 0 -> 1 ). CHANNEL - Vector of channel numbers corresponding to CHANNELTYPE . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . T0 - Start time ( seconds ). T1 - End time ( seconds ). Outputs : TIMESTAMPS - Timestamps of events / markers ( seconds ). Format matches DATA . If 1 channel , N x 1 double vector . If > 1 channel , 1 x C cell array of N x 1 double vectors . DATA - Data associated with events / markers . Format depends on type . If 1 channel , N x D matrix or N x 1 cellstr . If > 1 channel , 1 x C cell array . See also : ndr . reader / readevents_epochsamples_native , ndr . reader . base / readevents_epochsamples_native Step 1 : check to see if the user is requesting a \"native\" type of event ( event , marker , text ) or a \"derived\" type of event ( like dep , den , dimp , dimn , which are derived from the data of sampled digital channels ) If the user does request a derived event type , then compute it readevents_epochsamples_native - Read native event/marker channels. [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_OBJ , ... CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , T0 , T1 ) Reads event or marker data directly as stored in the file format , occurring between time T0 and T1 ( seconds ). This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). It cannot handle derived event types ( 'dep' , 'den' , 'dimp' , 'dimn' ); use `readevents_epochsamples` for those . Inputs : NDR_READER_OBJ - The ndr . reader object . CHANNELTYPE - Cell array of strings specifying the native type for each channel ( 'event' , 'marker' , 'text' ). CHANNEL - Vector of channel numbers . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . T0 - Start time ( seconds ). T1 - End time ( seconds ). Outputs : TIMESTAMPS - Timestamps of events / markers ( seconds ). Format matches DATA . DATA - Data associated with events / markers . Format depends on type . See also : ndr . reader / readevents_epochsamples , ndr . reader . base / readevents_epochsamples_native samplerate - Get the sample rate for specific regularly-sampled channels. SR = SAMPLERATE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Returns the sampling rate ( s ) in Hz for the specified regularly - sampled channels . This function calls the corresponding method of the underlying specific reader object ( `ndr_reader_base` ). Inputs : NDR_READER_OBJ - The ndr . reader object . CHANNELTYPE - Cell array of strings specifying the channel type ( e . g ., { 'ai' , 'ai' } , { 'di' } ). Must be a regularly - sampled type . CHANNEL - Vector of channel numbers . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . Outputs : SR - Vector of sampling rates ( Hz ) corresponding to each channel requested . Returns NaN for channels that are not regularly sampled ( e . g ., events ). See also : ndr . reader . base / samplerate t0_t1 - Return the beginning and end times for an epoch. T0T1 = T0_T1 ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the beginning ( t0 ) and end ( t1 ) times ( in seconds ) of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT , relative to the clock type specified by EPOCHCLOCK . This function calls the corresponding method of the underlying specific reader object ( ` ndr_reader_base ` ). Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index ( default : 1 ). Outputs : T0T1 - Cell array containing a 1 x2 vector [ t0 t1 ] for each clock type returned by EPOCHCLOCK . See also : ndr . reader / epochclock , ndr . reader . base / t0_t1 underlying_datatype - Get the native data type for specified channels. [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , ... EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Returns information about the underlying data type as stored in the file for the specified channels . This function calls the corresponding method of the underlying specific reader object ( ` ndr_reader_base ` ). Inputs : NDR_READER_OBJ - The ndr . reader object . EPOCHSTREAMS - Cell array of filenames for the epoch . EPOCH_SELECT - The epoch index . CHANNELTYPE - String specifying the type of channels ( e . g ., ' ai ' ). CHANNEL - Vector of channel numbers . Outputs : DATATYPE - String representing the native data type ( e . g ., ' int16 ' , ' float32 ' ). Suitable for FREAD / FWRITE . P - Polynomial coefficients [ offset scale ] for converting raw data to the units returned by readchannels . Typically [ 0 1 ] if raw data is returned . DATASIZE - Size of the data type in bits ( e . g ., 16 , 32 , 64 ). See also : ndr . reader . base / underlying_datatype , fread , fwrite","title":"Methods help"},{"location":"reference/%2Bndr/%2Bdata/assign.m/","text":"ndr.data.assign \u00b6 assign - make a list of assignments ( matlab 5 or higher ) ndr . data . assign ( 'VAR1' , VAL1 , 'VAR2' , VAL2 , ... ) makes the assignments VAR1 = VAL1 ; VAR2 = VAL2 ; ... in the caller 's workspace. This is most useful when passing in an option list to a function . Thus in the function which starts : function foo ( x , y , varargin ) z = 0 ; ndr . data . assign ( varargin {:}); the variable z can be given a non - default value by calling the function like so : foo ( x , y , 'z' , 4 ); If the input is a single structure , then the structure is converted to a set of NAME / VALUE pairs and interpreted as 'VAR1' , VAL1 , etc , where VAR1 is the first field name of the input , VAL1 is the value of the field name , etc .","title":"ndr.data.assign"},{"location":"reference/%2Bndr/%2Bdata/assign.m/#ndrdataassign","text":"assign - make a list of assignments ( matlab 5 or higher ) ndr . data . assign ( 'VAR1' , VAL1 , 'VAR2' , VAL2 , ... ) makes the assignments VAR1 = VAL1 ; VAR2 = VAL2 ; ... in the caller 's workspace. This is most useful when passing in an option list to a function . Thus in the function which starts : function foo ( x , y , varargin ) z = 0 ; ndr . data . assign ( varargin {:}); the variable z can be given a non - default value by calling the function like so : foo ( x , y , 'z' , 4 ); If the input is a single structure , then the structure is converted to a set of NAME / VALUE pairs and interpreted as 'VAR1' , VAL1 , etc , where VAR1 is the first field name of the input , VAL1 is the value of the field name , etc .","title":"ndr.data.assign"},{"location":"reference/%2Bndr/%2Bdata/colvec.m/","text":"ndr.data.colvec \u00b6 COLVEC - return a matrix reshaped as a column vector Y = ndr . data . colvec ( X ) Returns the contents of the matrix X as a column vector Y that is 1 xM , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . ndr . data . colvec is equivalent to Y = X ( : ) ; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix . See also : ndr . data . rowvec Example : A = rand ( 5 , 5 ) Y = ndr . data . colvec ( A ( 1 : 3 , 1 : 2 )) % returns points in rows 1 : 3 , columns 1 : 2","title":"ndr.data.colvec"},{"location":"reference/%2Bndr/%2Bdata/colvec.m/#ndrdatacolvec","text":"COLVEC - return a matrix reshaped as a column vector Y = ndr . data . colvec ( X ) Returns the contents of the matrix X as a column vector Y that is 1 xM , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . ndr . data . colvec is equivalent to Y = X ( : ) ; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix . See also : ndr . data . rowvec Example : A = rand ( 5 , 5 ) Y = ndr . data . colvec ( A ( 1 : 3 , 1 : 2 )) % returns points in rows 1 : 3 , columns 1 : 2","title":"ndr.data.colvec"},{"location":"reference/%2Bndr/%2Bdata/rowvec.m/","text":"ndr.data.rowvec \u00b6 ROWVEC - return a matrix reshaped as a row vector Y = ndr . data . rowvec ( X ) Returns the contents of the matrix X as a row vector Y that is Mx1 , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . ndr . data . rowvec is equivalent to Y = X ( : ) '; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: ndr.data.colvec Example: A = rand(5,5) Y = ndr.data.rowvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"ndr.data.rowvec"},{"location":"reference/%2Bndr/%2Bdata/rowvec.m/#ndrdatarowvec","text":"ROWVEC - return a matrix reshaped as a row vector Y = ndr . data . rowvec ( X ) Returns the contents of the matrix X as a row vector Y that is Mx1 , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . ndr . data . rowvec is equivalent to Y = X ( : ) '; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: ndr.data.colvec Example: A = rand(5,5) Y = ndr.data.rowvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"ndr.data.rowvec"},{"location":"reference/%2Bndr/%2Bdata/struct2namevaluepair.m/","text":"ndr.data.struct2namevaluepair \u00b6 STRUCT2NAMEVALUEPAIR - Convert a structure to a cell array of name / value pairs NV = ndr . data . struct2namevaluepair ( THESTRUCT ) Convert a structure to a cell array of name / value pairs . This is useful for passing name / value pairs to functions that accept them as extra arguments . Each field name of the structure is used as the 'name' , and the value is used as the 'value' . Example : myStruct . param1 = 1 ; myStruct . param2 = 2 ; nv = ndr . data . struct2namevaluepair ( myStruct ) % nv = {'param1', 1, 'param2', 2} See also : VARARGIN , ndr . data . assign , STRUCT","title":"ndr.data.struct2namevaluepair"},{"location":"reference/%2Bndr/%2Bdata/struct2namevaluepair.m/#ndrdatastruct2namevaluepair","text":"STRUCT2NAMEVALUEPAIR - Convert a structure to a cell array of name / value pairs NV = ndr . data . struct2namevaluepair ( THESTRUCT ) Convert a structure to a cell array of name / value pairs . This is useful for passing name / value pairs to functions that accept them as extra arguments . Each field name of the structure is used as the 'name' , and the value is used as the 'value' . Example : myStruct . param1 = 1 ; myStruct . param2 = 2 ; nv = ndr . data . struct2namevaluepair ( myStruct ) % nv = {'param1', 1, 'param2', 2} See also : VARARGIN , ndr . data . assign , STRUCT","title":"ndr.data.struct2namevaluepair"},{"location":"reference/%2Bndr/%2Bdocs/build.m/","text":"ndr.docs.build \u00b6 ndr.docs.build - build the NDR markdown documentation from Matlab source Builds the ND$ documentation locally in $NDR-matlab/docs and updates the mkdocs-yml file in the $NDR-matlab directory. **Example**: ndr.docs.build();","title":"ndr.docs.build"},{"location":"reference/%2Bndr/%2Bdocs/build.m/#ndrdocsbuild","text":"ndr.docs.build - build the NDR markdown documentation from Matlab source Builds the ND$ documentation locally in $NDR-matlab/docs and updates the mkdocs-yml file in the $NDR-matlab directory. **Example**: ndr.docs.build();","title":"ndr.docs.build"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/","text":"CLASS ndr.file.fileobj \u00b6 FILEOBJ - a Matlab binary file object ; an interface to fopen, fread, fwrite, fseek, fclose, ftell This is an object interface to fopen , fread , fwrite , fseek , fclose , and ftell . Why do this ? One could imagine one day separating the process of reading and writing a data stream from the file system . For example , one could write to GRIDFS by overriding these functions , and the user 's code would never have to know. Superclasses \u00b6 handle Properties \u00b6 Property Description fullpathfilename fid permission machineformat 'big-endian' or 'little-endian' Methods \u00b6 Method Description addlistener addlistener Add listener for event. delete delete a FILEOBJ_OBJ, closing file first if need be eq == (EQ) Test handle equality. fclose close a FILEOBJ feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileobj create a new binary file object fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ Methods help \u00b6 addlistener - addlistener Add listener for event. el = addlistener ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = addlistener ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more matlab . metadata . Property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . addlistener binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also listener , event . listener , ndr . file . fileobj , matlab . metadata . Property , events Help for ndr . file . fileobj / addlistener is inherited from superclass handle delete - delete a FILEOBJ_OBJ, closing file first if need be DELETE ( FILEOBJ_OBJ ) Deletes the handle FILEOBJ_OBJ . If the file ( FILEOBJ_OBJ . fid ) is open , it is closed first . See also : HANDLE / DELETE , FILEOBJ / FCLOSE eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / eq is inherited from superclass handle fclose - close a FILEOBJ FILEOBJ_OBJ = FCLOSE ( FILEOBJ_OBJ ) Close a file associated with a FILEOBJ . Attempt to close the file and then set FILEOBJ_OBJ . fid to - 1 . feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF ( FILEOBJ_OBJ ) Returns 1 if FILEOBJ_OBJ is at its end of file , 0 otherwise . See also : FSEEK , FILEOBJ / FSEEK , FTELL ferror - return the last file error message for FILEOBJ [ MESSAGE , ERRORNUM ] = FERROR ( FILEOBJ_OBJ , COMMAND ) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR . fgetl - get a line from a FILEOBJ TLINE = FGETL ( FILEOBJ_OBJ ) Returns the next line ( not including NEWLINE character ) just like FGETL . See also : FGETL fgets - get a line from a FILEOBJ TLINE = FGETS ( FILEOBJ_OBJ , [ NCHAR ] ) Returns the next line ( including NEWLINE character ) just like FGETS . See also : FGETS fileobj - create a new binary file object FILEOBJ_OBJ = FILEOBJ ( ... ) Creates an empty FILEOBJ object . If FILENAME is provided , then the filename is stored . Documentation for ndr . file . fileobj / fileobj doc ndr . file . fileobj fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDR . FILE . FILEOBJ Help for ndr . file . fileobj / findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop ( H , PropName ) finds and returns the matlab . metadata . Property object associated with property name PropName of scalar handle object H . PropName can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PropName exists for object H , an empty matlab . metadata . Property array is returned . See also ndr . file . fileobj , ndr . file . fileobj / findobj , dynamicprops , matlab . metadata . Property Help for ndr . file . fileobj / findprop is inherited from superclass handle fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN ( FILEOBJ_OBJ , [ , PERMISSION ] , [ MACHINEFORMAT ] , [ FILENAME ] ) Opens the file associated with a FILEOBJ_OBJ object . If FILENAME , PERMISSION , and MACHINEFORMAT are given , then those variables of FILEOBJ_OBJ are updated . If they are not given , then the existing values in the FILEOBJ_OBJ are used . Note that the order of the input arguments differs from FOPEN , so that the object can be called in place of an FID ( e . g ., fid = fopen ( myvariable ), where myvariable is either a file name or a FILEOBJ object ). If the operation is successful , then FILEOBJ_OBJ . fid is greater than 3. Otherwise , FILEOBJ_OBJ . fid is - 1. See also : FOPEN , FILEOBJ / FCLOSE , FCLOSE fprintf - print data to a FILEOBJ_OBJ [ COUNT ] = FPRINTF ( FID , FORMAT , A , ...) Call FPRINTF ( see FPRINTF for inputs ) for the file associated with FILEOBJ_OBJ . fread - read data from a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , COUNT , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to read COUNT elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FREAD for a full description of these input arguments . See also : FREAD frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL fscanf - scan data from a FILEOBJ_OBJ [ A,COUNT ] = FSCANF ( FID , FORMAT , [ SIZEA ] ) Call FSCANF ( see FSCANF for inputs ) for the file associated with FILEOBJ_OBJ . fseek - seek to a location within a FILEOBJ B = FSEEK ( FILEOBJ_OBJ , OFFSET , REFERENCE ) Seeks the file to the location OFFSET ( in bytes ) relative to REFERENCE . REFERENCE can be 'bof' or - 1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and - 1 on failure . See also : FSEEK , FILEOBJ / FTELL ftell - find current location within a FILEOBJ LOCATION = FTELL ( FILEOBJ_OBJ ) Returns the current location ( in bytes ) relative to the beginning of the file . If the query fails , - 1 is returned . See also : FSEEK , FILEOBJ / FSEEK , FTELL fwrite - write data to a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , DATA , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to write DATA elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FWRITE for a full description of these input arguments . See also : FWRITE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / DELETE Help for ndr . file . fileobj / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = listener ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more matlab . metadata . Property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . listener does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with listener must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also addlistener , event . listener , ndr . file . fileobj , matlab . metadata . Property , events Help for ndr . file . fileobj / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT Help for ndr . file . fileobj / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / ADDLISTENER , NDR . FILE . FILEOBJ / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndr . file . fileobj / notify is inherited from superclass handle setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES ( FILEOBJ_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the properties of a FILEOBJ with name / value pairs . Properties are : fullpathfilename ; % the full path file name of the file fid ; % The Matlab file identifier permission ; % The file permission machineformat % big-endian ( 'b' ), little-endian ( 'l' ), or native ( 'n' )","title":"ndr.file.fileobj"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#class-ndrfilefileobj","text":"FILEOBJ - a Matlab binary file object ; an interface to fopen, fread, fwrite, fseek, fclose, ftell This is an object interface to fopen , fread , fwrite , fseek , fclose , and ftell . Why do this ? One could imagine one day separating the process of reading and writing a data stream from the file system . For example , one could write to GRIDFS by overriding these functions , and the user 's code would never have to know.","title":"CLASS ndr.file.fileobj"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#properties","text":"Property Description fullpathfilename fid permission machineformat 'big-endian' or 'little-endian'","title":"Properties"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#methods","text":"Method Description addlistener addlistener Add listener for event. delete delete a FILEOBJ_OBJ, closing file first if need be eq == (EQ) Test handle equality. fclose close a FILEOBJ feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileobj create a new binary file object fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop findprop Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener listener Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ","title":"Methods"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#methods-help","text":"addlistener - addlistener Add listener for event. el = addlistener ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = addlistener ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more matlab . metadata . Property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . addlistener binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also listener , event . listener , ndr . file . fileobj , matlab . metadata . Property , events Help for ndr . file . fileobj / addlistener is inherited from superclass handle delete - delete a FILEOBJ_OBJ, closing file first if need be DELETE ( FILEOBJ_OBJ ) Deletes the handle FILEOBJ_OBJ . If the file ( FILEOBJ_OBJ . fid ) is open , it is closed first . See also : HANDLE / DELETE , FILEOBJ / FCLOSE eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / eq is inherited from superclass handle fclose - close a FILEOBJ FILEOBJ_OBJ = FCLOSE ( FILEOBJ_OBJ ) Close a file associated with a FILEOBJ . Attempt to close the file and then set FILEOBJ_OBJ . fid to - 1 . feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF ( FILEOBJ_OBJ ) Returns 1 if FILEOBJ_OBJ is at its end of file , 0 otherwise . See also : FSEEK , FILEOBJ / FSEEK , FTELL ferror - return the last file error message for FILEOBJ [ MESSAGE , ERRORNUM ] = FERROR ( FILEOBJ_OBJ , COMMAND ) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR . fgetl - get a line from a FILEOBJ TLINE = FGETL ( FILEOBJ_OBJ ) Returns the next line ( not including NEWLINE character ) just like FGETL . See also : FGETL fgets - get a line from a FILEOBJ TLINE = FGETS ( FILEOBJ_OBJ , [ NCHAR ] ) Returns the next line ( including NEWLINE character ) just like FGETS . See also : FGETS fileobj - create a new binary file object FILEOBJ_OBJ = FILEOBJ ( ... ) Creates an empty FILEOBJ object . If FILENAME is provided , then the filename is stored . Documentation for ndr . file . fileobj / fileobj doc ndr . file . fileobj fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , NDR . FILE . FILEOBJ Help for ndr . file . fileobj / findobj is inherited from superclass handle findprop - findprop Find property of MATLAB handle object. p = findprop ( H , PropName ) finds and returns the matlab . metadata . Property object associated with property name PropName of scalar handle object H . PropName can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PropName exists for object H , an empty matlab . metadata . Property array is returned . See also ndr . file . fileobj , ndr . file . fileobj / findobj , dynamicprops , matlab . metadata . Property Help for ndr . file . fileobj / findprop is inherited from superclass handle fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN ( FILEOBJ_OBJ , [ , PERMISSION ] , [ MACHINEFORMAT ] , [ FILENAME ] ) Opens the file associated with a FILEOBJ_OBJ object . If FILENAME , PERMISSION , and MACHINEFORMAT are given , then those variables of FILEOBJ_OBJ are updated . If they are not given , then the existing values in the FILEOBJ_OBJ are used . Note that the order of the input arguments differs from FOPEN , so that the object can be called in place of an FID ( e . g ., fid = fopen ( myvariable ), where myvariable is either a file name or a FILEOBJ object ). If the operation is successful , then FILEOBJ_OBJ . fid is greater than 3. Otherwise , FILEOBJ_OBJ . fid is - 1. See also : FOPEN , FILEOBJ / FCLOSE , FCLOSE fprintf - print data to a FILEOBJ_OBJ [ COUNT ] = FPRINTF ( FID , FORMAT , A , ...) Call FPRINTF ( see FPRINTF for inputs ) for the file associated with FILEOBJ_OBJ . fread - read data from a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , COUNT , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to read COUNT elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FREAD for a full description of these input arguments . See also : FREAD frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL fscanf - scan data from a FILEOBJ_OBJ [ A,COUNT ] = FSCANF ( FID , FORMAT , [ SIZEA ] ) Call FSCANF ( see FSCANF for inputs ) for the file associated with FILEOBJ_OBJ . fseek - seek to a location within a FILEOBJ B = FSEEK ( FILEOBJ_OBJ , OFFSET , REFERENCE ) Seeks the file to the location OFFSET ( in bytes ) relative to REFERENCE . REFERENCE can be 'bof' or - 1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and - 1 on failure . See also : FSEEK , FILEOBJ / FTELL ftell - find current location within a FILEOBJ LOCATION = FTELL ( FILEOBJ_OBJ ) Returns the current location ( in bytes ) relative to the beginning of the file . If the query fails , - 1 is returned . See also : FSEEK , FILEOBJ / FSEEK , FTELL fwrite - write data to a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , DATA , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to write DATA elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FWRITE for a full description of these input arguments . See also : FWRITE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / DELETE Help for ndr . file . fileobj / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / le is inherited from superclass handle listener - listener Add listener for event without binding the listener to the source object. el = listener ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = listener ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more matlab . metadata . Property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . listener does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with listener must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also addlistener , event . listener , ndr . file . fileobj , matlab . metadata . Property , events Help for ndr . file . fileobj / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / NE Help for ndr . file . fileobj / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT Help for ndr . file . fileobj / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / ADDLISTENER , NDR . FILE . FILEOBJ / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndr . file . fileobj / notify is inherited from superclass handle setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES ( FILEOBJ_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the properties of a FILEOBJ with name / value pairs . Properties are : fullpathfilename ; % the full path file name of the file fid ; % The Matlab file identifier permission ; % The file permission machineformat % big-endian ( 'b' ), little-endian ( 'l' ), or native ( 'n' )","title":"Methods help"},{"location":"reference/%2Bndr/%2Bfile/textfile2char.m/","text":"ndr.file.textfile2char \u00b6 TEXTFILE2CHAR - Read a text file into a character string STR = TEXTFILE2CHAR(FILENAME) This function reads the entire contents of the file FILENAME into the character string STR.","title":"ndr.file.textfile2char"},{"location":"reference/%2Bndr/%2Bfile/textfile2char.m/#ndrfiletextfile2char","text":"TEXTFILE2CHAR - Read a text file into a character string STR = TEXTFILE2CHAR(FILENAME) This function reads the entire contents of the file FILENAME into the character string STR.","title":"ndr.file.textfile2char"},{"location":"reference/%2Bndr/%2Bformat/%2Baxon/abfTimeToDatetime.m/","text":"ndr.format.axon.abfTimeToDatetime \u00b6 ABFTIMETODATETIME Convert ABF file time fields to Matlab datetime dt = abfTimeToDatetime ( uFileStartDate , uFileStartTimeMS ) converts Axon Binary Format ( ABF ) file time fields to a Matlab datetime . Inputs : uFileStartDate - ABF file start date in YYYYMMDD format as a double uFileStartTimeMS - ABF file start time in milliseconds since midnight Output : dt - Matlab datetime representing the date and time Example : dt = abfTimeToDatetime ( 20240218 , 43200000 ) % Feb 18 , 2024 at 12 : 00 : 00 Notes : - uFileStartDate is expected to be a double in YYYYMMDD format where the 8 th digit is the first digit of the year - uFileStartTimeMS represents milliseconds since midnight ( 0 - 86 , 399 , 999 ) Error Conditions : - Throws error if inputs are not numeric - Throws error if uFileStartTimeMS is not in valid range - Throws error if uFileStartDate is not in valid format","title":"ndr.format.axon.abfTimeToDatetime"},{"location":"reference/%2Bndr/%2Bformat/%2Baxon/abfTimeToDatetime.m/#ndrformataxonabftimetodatetime","text":"ABFTIMETODATETIME Convert ABF file time fields to Matlab datetime dt = abfTimeToDatetime ( uFileStartDate , uFileStartTimeMS ) converts Axon Binary Format ( ABF ) file time fields to a Matlab datetime . Inputs : uFileStartDate - ABF file start date in YYYYMMDD format as a double uFileStartTimeMS - ABF file start time in milliseconds since midnight Output : dt - Matlab datetime representing the date and time Example : dt = abfTimeToDatetime ( 20240218 , 43200000 ) % Feb 18 , 2024 at 12 : 00 : 00 Notes : - uFileStartDate is expected to be a double in YYYYMMDD format where the 8 th digit is the first digit of the year - uFileStartTimeMS represents milliseconds since midnight ( 0 - 86 , 399 , 999 ) Error Conditions : - Throws error if inputs are not numeric - Throws error if uFileStartTimeMS is not in valid range - Throws error if uFileStartDate is not in valid format","title":"ndr.format.axon.abfTimeToDatetime"},{"location":"reference/%2Bndr/%2Bformat/%2Baxon/read_abf.m/","text":"ndr.format.axon.read_abf \u00b6 READ_ABF - read from an Axon Instruments ABF file [ DATA ] = READ_ABF ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ) Reads data from an Axon Instruments ABF file Inputs : FILENAME - the filename to read HEADER - the header data for the file ; if empty , it will be read CHANNEL_TYPE - the type of channel to read . It can be 'ai' - analog input 'time' - time CHANNEL_NUMBERS - an array of channel numbers to read ( e . g ., [ 1 2 3 ] ) T0 - time to begin reading ; can be - Inf to indicate the beginning of the record T1 - time to end reading ; can be Inf to indicate the end of the record","title":"ndr.format.axon.read_abf"},{"location":"reference/%2Bndr/%2Bformat/%2Baxon/read_abf.m/#ndrformataxonread_abf","text":"READ_ABF - read from an Axon Instruments ABF file [ DATA ] = READ_ABF ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ) Reads data from an Axon Instruments ABF file Inputs : FILENAME - the filename to read HEADER - the header data for the file ; if empty , it will be read CHANNEL_TYPE - the type of channel to read . It can be 'ai' - analog input 'time' - time CHANNEL_NUMBERS - an array of channel numbers to read ( e . g ., [ 1 2 3 ] ) T0 - time to begin reading ; can be - Inf to indicate the beginning of the record T1 - time to end reading ; can be Inf to indicate the end of the record","title":"ndr.format.axon.read_abf"},{"location":"reference/%2Bndr/%2Bformat/%2Baxon/read_abf_header.m/","text":"ndr.format.axon.read_abf_header \u00b6 READ_ABF_READER - read header infromation from an Axon Instruments ABF file H = READ_ABF_HEADER ( FILENAME ) Reads header information from the ABF file FILENAME . Relies on abfload from https : // github . com / fcollman / abfload","title":"ndr.format.axon.read_abf_header"},{"location":"reference/%2Bndr/%2Bformat/%2Baxon/read_abf_header.m/#ndrformataxonread_abf_header","text":"READ_ABF_READER - read header infromation from an Axon Instruments ABF file H = READ_ABF_HEADER ( FILENAME ) Reads header information from the ABF file FILENAME . Relies on abfload from https : // github . com / fcollman / abfload","title":"ndr.format.axon.read_abf_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bbinarymatrix/read.m/","text":"ndr.format.binarymatrix.read \u00b6 READ - read a binary matrix file [ DATA , TOTAL_SAMPLES , S0 , S1 ] = READ ( FILENAME_OR_FILEOBJ , NUM_CHANNELS , CHANNEL_INDEXES , S0 , S1 ) Attempts to read binary data from a binary stream ( can be a FILENAME or a FILEOBJ ) from a binary matrix file . A binary matrix file is comprised of a vector of channels . Each sample consists of one value for each channel in the vector , followed by the next sample , etc . Inputs: ------ NUM_CHANNELS - the number of channels that comprise the sample vector . CHANNEL_INDEXES - the index number of the channels to return . For example , CHANNEL_INDEXES = [ 1 2 3 ] indicates that the data should only be returned from the first , second , and third channels in the matrix . Note that these channels may correspond to different physical channels , depending upon how the data was recorded . CHANNEL_INDEXES refer to indexes of the channels within the file . S0 - the sample number at which to start reading ( number starting from 1 ). Can be - inf to indicate the start . S1 - the sample number at which to stop reading ( number starting from 1 ). Can be inf to indicate the end . Outputs: ------- DATA is an SxC matrix with samples in each row . For example , DATA ( : , c ) are all the samples requested from channel CHANNEL_INDEXES ( c ). TOTAL_SAMPLES - the number of total vector samples in the file . S0 - the sample number ( from 1 ) where the reading started . S1 - the sample number ( from 1 ) where the reading stopped . One may add optional arguments in the form of name / value pairs or inupt argument assignments . -------------------------------------------------------------------------------------------- | Parameter ( default ) | Description | |--------------------------------- |-------------------------------------------------------| | dataType (' double ') | The data type of each value in the matrix . | | byteOrder (' ieee - le ') | The byte order of the data ( can be ' ieee - be ' also ) | | force_single_channel_read ( false ) | Force the program to read channels 1 by 1 ( may be | | | slower but sometimes helpful for debugging ) | | headerSkip ( 0 ) | Number of header bytes to skip . | |----------------------------------|-------------------------------------------------------|","title":"ndr.format.binarymatrix.read"},{"location":"reference/%2Bndr/%2Bformat/%2Bbinarymatrix/read.m/#ndrformatbinarymatrixread","text":"READ - read a binary matrix file [ DATA , TOTAL_SAMPLES , S0 , S1 ] = READ ( FILENAME_OR_FILEOBJ , NUM_CHANNELS , CHANNEL_INDEXES , S0 , S1 ) Attempts to read binary data from a binary stream ( can be a FILENAME or a FILEOBJ ) from a binary matrix file . A binary matrix file is comprised of a vector of channels . Each sample consists of one value for each channel in the vector , followed by the next sample , etc . Inputs: ------ NUM_CHANNELS - the number of channels that comprise the sample vector . CHANNEL_INDEXES - the index number of the channels to return . For example , CHANNEL_INDEXES = [ 1 2 3 ] indicates that the data should only be returned from the first , second , and third channels in the matrix . Note that these channels may correspond to different physical channels , depending upon how the data was recorded . CHANNEL_INDEXES refer to indexes of the channels within the file . S0 - the sample number at which to start reading ( number starting from 1 ). Can be - inf to indicate the start . S1 - the sample number at which to stop reading ( number starting from 1 ). Can be inf to indicate the end . Outputs: ------- DATA is an SxC matrix with samples in each row . For example , DATA ( : , c ) are all the samples requested from channel CHANNEL_INDEXES ( c ). TOTAL_SAMPLES - the number of total vector samples in the file . S0 - the sample number ( from 1 ) where the reading started . S1 - the sample number ( from 1 ) where the reading stopped . One may add optional arguments in the form of name / value pairs or inupt argument assignments . -------------------------------------------------------------------------------------------- | Parameter ( default ) | Description | |--------------------------------- |-------------------------------------------------------| | dataType (' double ') | The data type of each value in the matrix . | | byteOrder (' ieee - le ') | The byte order of the data ( can be ' ieee - be ' also ) | | force_single_channel_read ( false ) | Force the program to read channels 1 by 1 ( may be | | | slower but sometimes helpful for debugging ) | | headerSkip ( 0 ) | Number of header bytes to skip . | |----------------------------------|-------------------------------------------------------|","title":"ndr.format.binarymatrix.read"},{"location":"reference/%2Bndr/%2Bformat/%2Bbjg/read.m/","text":"ndr.format.bjg.read \u00b6 READ - read from a BJG file [ DATA ] = READ ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ) Reads data from an BJG file , which are all float32 / single data channels Inputs : FILENAME - the filename to read HEADER - the header data for the file ; if empty , it will be read CHANNEL_TYPE - the channel type to read , can be 'time' or 'ai' ( analog input ) CHANNEL_NUMBERS - an array of channel numbers to read ( e . g ., [ 1 2 3 ] ) T0 - time to begin reading ; can be - Inf to indicate the beginning of the record T1 - time to end reading ; can be Inf to indicate the end of the record","title":"ndr.format.bjg.read"},{"location":"reference/%2Bndr/%2Bformat/%2Bbjg/read.m/#ndrformatbjgread","text":"READ - read from a BJG file [ DATA ] = READ ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ) Reads data from an BJG file , which are all float32 / single data channels Inputs : FILENAME - the filename to read HEADER - the header data for the file ; if empty , it will be read CHANNEL_TYPE - the channel type to read , can be 'time' or 'ai' ( analog input ) CHANNEL_NUMBERS - an array of channel numbers to read ( e . g ., [ 1 2 3 ] ) T0 - time to begin reading ; can be - Inf to indicate the beginning of the record T1 - time to end reading ; can be Inf to indicate the end of the record","title":"ndr.format.bjg.read"},{"location":"reference/%2Bndr/%2Bformat/%2Bbjg/read_bjg_header.m/","text":"ndr.format.bjg.read_bjg_header \u00b6 READ_BJG_READER - read header infromation from a BJG .bin file H = READ_BJG_HEADER(FILENAME) Reads header information from the BJG file FILENAME.","title":"ndr.format.bjg.read_bjg_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bbjg/read_bjg_header.m/#ndrformatbjgread_bjg_header","text":"READ_BJG_READER - read header infromation from a BJG .bin file H = READ_BJG_HEADER(FILENAME) Reads header information from the BJG file FILENAME.","title":"ndr.format.bjg.read_bjg_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_datafile.m/","text":"ndr.format.ced.read_SOMSMR_datafile \u00b6 ndr . format . ced . read_SOMSMR_datafile Reads samples from a CED SOM / SMR file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO , TIME ] = ndr . format . ced . read_SOMSMR_datafile ( FILENAME , HEADER , CHANNEL_NUMBER , T0 , T1 ); Inputs : Reads data from the Cambridge Electronic Design . SOM or . SMR file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_NUMBER is the the channel number for which to return data ( ranging from 1 to the number to return data ; it corresponds to the channel number in the Spike2 . SMR file ( that is , in the Sampling Configuration that was used on Spike2 ). T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0 . If T1 is INF , we will use the end time of the whole file . Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . BLOCKINFO - the output of SONGETBLOCKHEADERS that describes the file blocks TIME - a vector corresponding to the time of each sample read Note : at this time , we can only read single channels at a time . If CHANNEL_NUMBER is an array , there will be an error . If the user need this functionality , please submit an ISSUE on GitHub ( http :// github . com / VH-Lab / NDR-matlab ). See also : ndr . format . ced . read_SOMSMR_header , ndr . format . ced . read_SOMSMR_sampleinterval","title":"ndr.format.ced.read_SOMSMR_datafile"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_datafile.m/#ndrformatcedread_somsmr_datafile","text":"ndr . format . ced . read_SOMSMR_datafile Reads samples from a CED SOM / SMR file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO , TIME ] = ndr . format . ced . read_SOMSMR_datafile ( FILENAME , HEADER , CHANNEL_NUMBER , T0 , T1 ); Inputs : Reads data from the Cambridge Electronic Design . SOM or . SMR file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_NUMBER is the the channel number for which to return data ( ranging from 1 to the number to return data ; it corresponds to the channel number in the Spike2 . SMR file ( that is , in the Sampling Configuration that was used on Spike2 ). T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0 . If T1 is INF , we will use the end time of the whole file . Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . BLOCKINFO - the output of SONGETBLOCKHEADERS that describes the file blocks TIME - a vector corresponding to the time of each sample read Note : at this time , we can only read single channels at a time . If CHANNEL_NUMBER is an array , there will be an error . If the user need this functionality , please submit an ISSUE on GitHub ( http :// github . com / VH-Lab / NDR-matlab ). See also : ndr . format . ced . read_SOMSMR_header , ndr . format . ced . read_SOMSMR_sampleinterval","title":"ndr.format.ced.read_SOMSMR_datafile"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_header.m/","text":"ndr.format.ced.read_SOMSMR_header \u00b6 ndr . format . intan . read_SOMSMR_header - Read header information from a CED SOM or SMR file HEADER = ndr . format . ced . read_SOMSMR_header ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the CED SOM / SMR file FILENAME . CED stands for Cambridge Electronic Design , which makes the Spike2 data acquisition system . This function reads header files for the SOM / SMR file formats . This function depends on sigTOOL by Malcolm Lidierth ( http : // sigtool . sourceforge . net ) . sigTOOL is also included in the https : // github . com / VH - Lab / thirdparty bundle and can be installed with instructions at http : // code . vhlab . org . HEADER contains two substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version channelinfo | Information about the channels acquired in the file See also : ndr . format . ced . read_SOMSMR_datafile , ndr . format . ced . read_SOMSMR_sampleinterval , SONFILEHEADER ( documents HEADER . fileinfo ),","title":"ndr.format.ced.read_SOMSMR_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_header.m/#ndrformatcedread_somsmr_header","text":"ndr . format . intan . read_SOMSMR_header - Read header information from a CED SOM or SMR file HEADER = ndr . format . ced . read_SOMSMR_header ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the CED SOM / SMR file FILENAME . CED stands for Cambridge Electronic Design , which makes the Spike2 data acquisition system . This function reads header files for the SOM / SMR file formats . This function depends on sigTOOL by Malcolm Lidierth ( http : // sigtool . sourceforge . net ) . sigTOOL is also included in the https : // github . com / VH - Lab / thirdparty bundle and can be installed with instructions at http : // code . vhlab . org . HEADER contains two substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version channelinfo | Information about the channels acquired in the file See also : ndr . format . ced . read_SOMSMR_datafile , ndr . format . ced . read_SOMSMR_sampleinterval , SONFILEHEADER ( documents HEADER . fileinfo ),","title":"ndr.format.ced.read_SOMSMR_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_sampleinterval.m/","text":"ndr.format.ced.read_SOMSMR_sampleinterval \u00b6 ndr . format . ced . read_SOMSMR_sampleinterval - Reads sample interval from a CED SOM / SMR file [ SAMPLEINTERVAL , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = ndr . format . ced . read_SOMSMR_sampleinterval ( FILENAME , ... HEADER , CHANNEL_NUMBER ) Inputs : Reads the sampleinterval ( in seconds ) for a given channel from the Cambridge Electronic Design . SOM or . SMR file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_NUMBER is the the channel number for which to return data ; it corresponds to the channel number in the Spike2 . SMR file ( that is , in the Sampling Configuration that was used on Spike2 ). Outputs : SAMPLE_INTERVAL - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . See also : ndr . format . ced . read_SOMSMR_datafile , ndr . format . ced . read_SOMSMR_header","title":"ndr.format.ced.read_SOMSMR_sampleinterval"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_sampleinterval.m/#ndrformatcedread_somsmr_sampleinterval","text":"ndr . format . ced . read_SOMSMR_sampleinterval - Reads sample interval from a CED SOM / SMR file [ SAMPLEINTERVAL , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = ndr . format . ced . read_SOMSMR_sampleinterval ( FILENAME , ... HEADER , CHANNEL_NUMBER ) Inputs : Reads the sampleinterval ( in seconds ) for a given channel from the Cambridge Electronic Design . SOM or . SMR file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_NUMBER is the the channel number for which to return data ; it corresponds to the channel number in the Spike2 . SMR file ( that is , in the Sampling Configuration that was used on Spike2 ). Outputs : SAMPLE_INTERVAL - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . See also : ndr . format . ced . read_SOMSMR_datafile , ndr . format . ced . read_SOMSMR_header","title":"ndr.format.ced.read_SOMSMR_sampleinterval"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/Intan_RHD2000_blockinfo.m/","text":"ndr.format.intan.Intan_RHD2000_blockinfo \u00b6 INTAN_RHD2000_BLOCKINFO - Block information for an Intan RHD2000 file [ BLOCK_INFO , BYTES_PER_BLOCK , BYTES_PRESENT , NUMDATABLOCKS ] = ... INTAN_RHD2000_BLOCKINFO ( FILENAME [, HEADER ]) Computes the parameters of each data block of an Intan_RHD_2000 file . The Intan 2000 RHD file type is organized into a header , and then data blocks of samples of the various channel types that the Intan demo board can sample . This file , along with the HEADER , computes the structure of these data blocks that are needed to interpret each data block . FILENAME should be the name of an RHD2000 file ( normally with extension '.rhd' ) . HEADER should be the header information structure that is returned by READ_INTAN_RHD2000_HEADER ; if it is left blank , it will be read from the file . BLOCK_INFO is a structure describing the parameters of each block . BYTES_PER_BLOCK is the number of bytes per data block BYTES_PRESENT is the number of non - header bytes in the file . NUMDATABLOCKS is the number of data blocks in the file . See also : READ_INTAN_RHD2000_HEADER , READ_INTAN_RHD2000_DATAFILE , CAT_INTAN_RHD2000_FILES","title":"ndr.format.intan.Intan_RHD2000_blockinfo"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/Intan_RHD2000_blockinfo.m/#ndrformatintanintan_rhd2000_blockinfo","text":"INTAN_RHD2000_BLOCKINFO - Block information for an Intan RHD2000 file [ BLOCK_INFO , BYTES_PER_BLOCK , BYTES_PRESENT , NUMDATABLOCKS ] = ... INTAN_RHD2000_BLOCKINFO ( FILENAME [, HEADER ]) Computes the parameters of each data block of an Intan_RHD_2000 file . The Intan 2000 RHD file type is organized into a header , and then data blocks of samples of the various channel types that the Intan demo board can sample . This file , along with the HEADER , computes the structure of these data blocks that are needed to interpret each data block . FILENAME should be the name of an RHD2000 file ( normally with extension '.rhd' ) . HEADER should be the header information structure that is returned by READ_INTAN_RHD2000_HEADER ; if it is left blank , it will be read from the file . BLOCK_INFO is a structure describing the parameters of each block . BYTES_PER_BLOCK is the number of bytes per data block BYTES_PRESENT is the number of non - header bytes in the file . NUMDATABLOCKS is the number of data blocks in the file . See also : READ_INTAN_RHD2000_HEADER , READ_INTAN_RHD2000_DATAFILE , CAT_INTAN_RHD2000_FILES","title":"ndr.format.intan.Intan_RHD2000_blockinfo"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/cat_Intan_RHD2000_files.m/","text":"ndr.format.intan.cat_Intan_RHD2000_files \u00b6 CAT_INTAN_RHD2000_FILES - Concatenate multiple RHD files together STATUS = CAT_INTAN_RHD2000_FILES ( FILENAME1 , FILENAME2 , ... ) Concatenate multiple RHD files together . Produces a large file named [ 'cat' FILENAME1 ]. Note that the filename information in the header of [ 'cat' FILENAME1 ] will still be FILENAME1 . STATUS should always return 0 if there was no error . See also : READ_INTAN_RHD2000_DATAFILE , READ_INTAN_RHD2000_HEADER","title":"ndr.format.intan.cat_Intan_RHD2000_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/cat_Intan_RHD2000_files.m/#ndrformatintancat_intan_rhd2000_files","text":"CAT_INTAN_RHD2000_FILES - Concatenate multiple RHD files together STATUS = CAT_INTAN_RHD2000_FILES ( FILENAME1 , FILENAME2 , ... ) Concatenate multiple RHD files together . Produces a large file named [ 'cat' FILENAME1 ]. Note that the filename information in the header of [ 'cat' FILENAME1 ] will still be FILENAME1 . STATUS should always return 0 if there was no error . See also : READ_INTAN_RHD2000_DATAFILE , READ_INTAN_RHD2000_HEADER","title":"ndr.format.intan.cat_Intan_RHD2000_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/concat_rhd_files.m/","text":"ndr.format.intan.concat_rhd_files \u00b6 CONCAT_RHD_FILES - Concatenate RHD files and rename the original files CONCAT_RHD_FILES ( DIRNAME ) Concatenates all of the * . rhd files in a directory into one larger file , and then renames the original * . rhd files so the extension is . rhd_original . See also : CAT_INTAN_RHD2000_FILES","title":"ndr.format.intan.concat_rhd_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/concat_rhd_files.m/#ndrformatintanconcat_rhd_files","text":"CONCAT_RHD_FILES - Concatenate RHD files and rename the original files CONCAT_RHD_FILES ( DIRNAME ) Concatenates all of the * . rhd files in a directory into one larger file , and then renames the original * . rhd files so the extension is . rhd_original . See also : CAT_INTAN_RHD2000_FILES","title":"ndr.format.intan.concat_rhd_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/copy_Intan_RHD2000_blocks.m/","text":"ndr.format.intan.copy_Intan_RHD2000_blocks \u00b6 COPY_INTAN_RHD2000_BLOCKS - Concatenate multiple RHD blocks together STATUS = COPY_INTAN_RHD2000_BLOCKS ( FILENAME_IN , B1 , B2 , FILENAME_OUT ) Copies data blocks from B1 to B2 from the RHD 2000 file FILENAME_IN and writes it to the file FILENAME_OUT . The first block is numbered 1. This is useful for trimming files down to certain blocks . Check out INTAN_RHD2000_BLOCKINFO to understand the relationship between data blocks and samples ( short version: data blocks are not samples , they are regular collections of samples ). STATUS should always return 0 if there was no error . See also: READ_INTAN_RHD2000_DATAFILE , READ_INTAN_RHD2000_HEADER , INTAN_RHD2000_BLOCKINFO","title":"ndr.format.intan.copy_Intan_RHD2000_blocks"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/copy_Intan_RHD2000_blocks.m/#ndrformatintancopy_intan_rhd2000_blocks","text":"COPY_INTAN_RHD2000_BLOCKS - Concatenate multiple RHD blocks together STATUS = COPY_INTAN_RHD2000_BLOCKS ( FILENAME_IN , B1 , B2 , FILENAME_OUT ) Copies data blocks from B1 to B2 from the RHD 2000 file FILENAME_IN and writes it to the file FILENAME_OUT . The first block is numbered 1. This is useful for trimming files down to certain blocks . Check out INTAN_RHD2000_BLOCKINFO to understand the relationship between data blocks and samples ( short version: data blocks are not samples , they are regular collections of samples ). STATUS should always return 0 if there was no error . See also: READ_INTAN_RHD2000_DATAFILE , READ_INTAN_RHD2000_HEADER , INTAN_RHD2000_BLOCKINFO","title":"ndr.format.intan.copy_Intan_RHD2000_blocks"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/fread_QString.m/","text":"ndr.format.intan.fread_QString \u00b6 a = read_QString ( fid ) Read Qt style QString . The first 32 - bit unsigned number indicates the length of the string ( in bytes ) . If this number equals 0 xFFFFFFFF , the string is null . From Intan Technologies","title":"ndr.format.intan.fread_QString"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/fread_QString.m/#ndrformatintanfread_qstring","text":"a = read_QString ( fid ) Read Qt style QString . The first 32 - bit unsigned number indicates the length of the string ( in bytes ) . If this number equals 0 xFFFFFFFF , the string is null . From Intan Technologies","title":"ndr.format.intan.fread_QString"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_datafile.m/","text":"ndr.format.intan.read_Intan_RHD2000_datafile \u00b6 READ_INTAN_RHD2000_DATAFILE - Read samples from an Intan data file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DATAFILE ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel , 1 , may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2014 - 12 - 08 SDV - wrote it and tested it","title":"ndr.format.intan.read_Intan_RHD2000_datafile"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_datafile.m/#ndrformatintanread_intan_rhd2000_datafile","text":"READ_INTAN_RHD2000_DATAFILE - Read samples from an Intan data file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DATAFILE ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel , 1 , may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2014 - 12 - 08 SDV - wrote it and tested it","title":"ndr.format.intan.read_Intan_RHD2000_datafile"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_directory.m/","text":"ndr.format.intan.read_Intan_RHD2000_directory \u00b6 READ_INTAN_RHD2000_DIRECTORY - Read samples from an Intan data directory ( 1 file per channel format ) [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DIRECTORY ( DIRECTORYNAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 directory DIRECTORYNAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . NOTE : It is assumed that the DIRECTORY is a directory / folder with files written in the Intan \"1 file per channel\" format . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2020 - 06 - 11 SDV - wrote it , checked time , amp , aux , supply , din could use more testing with different channel configurations and ADC and DOUT note : dout seems to write to disk even if it is not in the header file but this function will only examine channels that are listed in the header file","title":"ndr.format.intan.read_Intan_RHD2000_directory"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_directory.m/#ndrformatintanread_intan_rhd2000_directory","text":"READ_INTAN_RHD2000_DIRECTORY - Read samples from an Intan data directory ( 1 file per channel format ) [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DIRECTORY ( DIRECTORYNAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 directory DIRECTORYNAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . NOTE : It is assumed that the DIRECTORY is a directory / folder with files written in the Intan \"1 file per channel\" format . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2020 - 06 - 11 SDV - wrote it , checked time , amp , aux , supply , din could use more testing with different channel configurations and ADC and DOUT note : dout seems to write to disk even if it is not in the header file but this function will only examine channels that are listed in the header file","title":"ndr.format.intan.read_Intan_RHD2000_directory"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_header.m/","text":"ndr.format.intan.read_Intan_RHD2000_header \u00b6 READ_INTAN_RHD2000_HEADER - Read header information from an Intan data file HEADER = READ_INTAN_RHD2000_HEADER ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the Intan RHD2000 file FILENAME . HEADER contains several substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency spike_triggers | Information about spike triggers for each amplifier channel amplifier_channels | Information about amplifier channels aux_input_channels | Information about auxillary input channels supply_voltage_channels | Information about supply voltage channels board_adc_channels | Information about the board analog to digital converter channels board_dig_in_channels | Digital input channels board_dig_out_channels | Digital output channels num_temp_sensor_channels | Number of temperature sensor channels See also : READ_INTAN_RDH2000_DATAFILE","title":"ndr.format.intan.read_Intan_RHD2000_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_header.m/#ndrformatintanread_intan_rhd2000_header","text":"READ_INTAN_RHD2000_HEADER - Read header information from an Intan data file HEADER = READ_INTAN_RHD2000_HEADER ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the Intan RHD2000 file FILENAME . HEADER contains several substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency spike_triggers | Information about spike triggers for each amplifier channel amplifier_channels | Information about amplifier channels aux_input_channels | Information about auxillary input channels supply_voltage_channels | Information about supply voltage channels board_adc_channels | Information about the board analog to digital converter channels board_dig_in_channels | Digital input channels board_dig_out_channels | Digital output channels num_temp_sensor_channels | Number of temperature sensor channels See also : READ_INTAN_RDH2000_DATAFILE","title":"ndr.format.intan.read_Intan_RHD2000_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/copy_rec_files.m/","text":"ndr.format.spikegadgets.copy_rec_files \u00b6 COPY_SPIKEGADGETS_REC_FILES Shortens .rec files from sample to sample provided in arguments","title":"ndr.format.spikegadgets.copy_rec_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/copy_rec_files.m/#ndrformatspikegadgetscopy_rec_files","text":"COPY_SPIKEGADGETS_REC_FILES Shortens .rec files from sample to sample provided in arguments","title":"ndr.format.spikegadgets.copy_rec_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_analogChannels.m/","text":"ndr.format.spikegadgets.read_rec_analogChannels \u00b6 [recData, timestamps] = read_SpikeGadgets_analogChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the analog channels you want to extract, designated by the byte location (1-based), i.e., [3 5 7] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- an N by M matrix with N data points and M channels (M is equal to the number of channels in the input)","title":"ndr.format.spikegadgets.read_rec_analogChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_analogChannels.m/#ndrformatspikegadgetsread_rec_analogchannels","text":"[recData, timestamps] = read_SpikeGadgets_analogChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the analog channels you want to extract, designated by the byte location (1-based), i.e., [3 5 7] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- an N by M matrix with N data points and M channels (M is equal to the number of channels in the input)","title":"ndr.format.spikegadgets.read_rec_analogChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_config.m/","text":"ndr.format.spikegadgets.read_rec_config \u00b6 out = read_SpikeGadgets_config ( filename ) Reads the configuration section of a Trodes (. rec ) file xml header is parsed and read out is a 1 x1 struct with 12 fields configText - length ( configText ) is the number of characters in header filePath - <---> filePrefix - <---> realtimeMode - logical saveDisplayedChanOnly - logical systemTimeAtCreation - str with systemTimeAtCreation timestampAtCreation - str with timestampAtCreation numChannels - str of number of channels in nTrodes ( sum of all trodes channels ) samplingRate - str of sampling rate headerSize - str of sum of numBytes in devices / 2 nTrodes - struct that lists nTrodes with structs inside that describe each channel headerChannels - channels listed in AuxDisplayConfiguration","title":"ndr.format.spikegadgets.read_rec_config"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_config.m/#ndrformatspikegadgetsread_rec_config","text":"out = read_SpikeGadgets_config ( filename ) Reads the configuration section of a Trodes (. rec ) file xml header is parsed and read out is a 1 x1 struct with 12 fields configText - length ( configText ) is the number of characters in header filePath - <---> filePrefix - <---> realtimeMode - logical saveDisplayedChanOnly - logical systemTimeAtCreation - str with systemTimeAtCreation timestampAtCreation - str with timestampAtCreation numChannels - str of number of channels in nTrodes ( sum of all trodes channels ) samplingRate - str of sampling rate headerSize - str of sum of numBytes in devices / 2 nTrodes - struct that lists nTrodes with structs inside that describe each channel headerChannels - channels listed in AuxDisplayConfiguration","title":"ndr.format.spikegadgets.read_rec_config"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_digitalChannels.m/","text":"ndr.format.spikegadgets.read_rec_digitalChannels \u00b6 [recData, timestamps] = read_SpikeGadgets_digitalChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the digital channels you want to extract, designated as an N by 2 matrix [byte(1-based) bit(1-based)] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- a structure continaing the digital state of the channels","title":"ndr.format.spikegadgets.read_rec_digitalChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_digitalChannels.m/#ndrformatspikegadgetsread_rec_digitalchannels","text":"[recData, timestamps] = read_SpikeGadgets_digitalChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the digital channels you want to extract, designated as an N by 2 matrix [byte(1-based) bit(1-based)] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- a structure continaing the digital state of the channels","title":"ndr.format.spikegadgets.read_rec_digitalChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_trodeChannels.m/","text":"ndr.format.spikegadgets.read_rec_trodeChannels \u00b6 [ recData , timestamps ] = read_SpikeGadgets_trodeChannels ( filename , NumChannels , channels , samplingRate , headerSize , s0 , s1 ) ) Imports channel data in matlab from the raw data file INPUTS filename -- a string containing the name of the . dat file ( raw file from SD card ) NumChannels -- the number of channels in the recording ( i . e . , 32 , 64 , 96. .. ) channels -- the channels you want to extract ( extracting all channels at once may overload memory ) numbers 1 - 120 which belong to each 4 of the 30 tetrodes samplingRate -- the sampling rate of the recording , i . e 30000 headerSize -- the size , in int16 's, of the header block of the data ( contains DIO channels and aux analog channels ) . calculated from ( MCUnumbytes + ECUnumbytes + 1 ) / 2 = 17 s0 - the first sample number to read s1 - the last sample number to read OUTPUTS timestamps -- the system clock when each sample was taken recData -- an N by M matrix with N data points and M channels ( M is equal to the number of channels in the input )","title":"ndr.format.spikegadgets.read_rec_trodeChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_trodeChannels.m/#ndrformatspikegadgetsread_rec_trodechannels","text":"[ recData , timestamps ] = read_SpikeGadgets_trodeChannels ( filename , NumChannels , channels , samplingRate , headerSize , s0 , s1 ) ) Imports channel data in matlab from the raw data file INPUTS filename -- a string containing the name of the . dat file ( raw file from SD card ) NumChannels -- the number of channels in the recording ( i . e . , 32 , 64 , 96. .. ) channels -- the channels you want to extract ( extracting all channels at once may overload memory ) numbers 1 - 120 which belong to each 4 of the 30 tetrodes samplingRate -- the sampling rate of the recording , i . e 30000 headerSize -- the size , in int16 's, of the header block of the data ( contains DIO channels and aux analog channels ) . calculated from ( MCUnumbytes + ECUnumbytes + 1 ) / 2 = 17 s0 - the first sample number to read s1 - the last sample number to read OUTPUTS timestamps -- the system clock when each sample was taken recData -- an N by M matrix with N data points and M channels ( M is equal to the number of channels in the input )","title":"ndr.format.spikegadgets.read_rec_trodeChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Btdt/read_SEV_channel.m/","text":"ndr.format.tdt.read_SEV_channel \u00b6 READ_SEV_CHANNEL - read data from an SEV channel DATA = READ_SEV_CHANNEL ( DIRNAME , HEADER , CHANNELTYPE , CHANNEL , S0 , S1 ) Read data from a single channel CHANNEL from the SEV directory DIRNAME . CHANNELTYPE must be 'time' ( to read sample times ) or 'analog_in' or 'ai' to read analog input data .","title":"ndr.format.tdt.read_SEV_channel"},{"location":"reference/%2Bndr/%2Bformat/%2Btdt/read_SEV_channel.m/#ndrformattdtread_sev_channel","text":"READ_SEV_CHANNEL - read data from an SEV channel DATA = READ_SEV_CHANNEL ( DIRNAME , HEADER , CHANNELTYPE , CHANNEL , S0 , S1 ) Read data from a single channel CHANNEL from the SEV directory DIRNAME . CHANNELTYPE must be 'time' ( to read sample times ) or 'analog_in' or 'ai' to read analog input data .","title":"ndr.format.tdt.read_SEV_channel"},{"location":"reference/%2Bndr/%2Bformat/%2Btdt/read_SEV_header.m/","text":"ndr.format.tdt.read_SEV_header \u00b6 READ_SEV_HEADER - read the header and channel information for a TDT directory of files HEADER = READ_SEV_HEADER ( DIRNAME )","title":"ndr.format.tdt.read_SEV_header"},{"location":"reference/%2Bndr/%2Bformat/%2Btdt/read_SEV_header.m/#ndrformattdtread_sev_header","text":"READ_SEV_HEADER - read the header and channel information for a TDT directory of files HEADER = READ_SEV_HEADER ( DIRNAME )","title":"ndr.format.tdt.read_SEV_header"},{"location":"reference/%2Bndr/%2Bformat/%2Btdt/read_SEV_logs.m/","text":"ndr.format.tdt.read_SEV_logs \u00b6 READ_SEV_LOGS - read the logs for a TDT SEV directory SAMPLE_INFO = READ_SEV_LOGS ( DIRNAME ) Reads the * _log . txt files in the directory DIRNAME that contains a TDT SEV recording .","title":"ndr.format.tdt.read_SEV_logs"},{"location":"reference/%2Bndr/%2Bformat/%2Btdt/read_SEV_logs.m/#ndrformattdtread_sev_logs","text":"READ_SEV_LOGS - read the logs for a TDT SEV directory SAMPLE_INFO = READ_SEV_LOGS ( DIRNAME ) Reads the * _log . txt files in the directory DIRNAME that contains a TDT SEV recording .","title":"ndr.format.tdt.read_SEV_logs"},{"location":"reference/%2Bndr/%2Bformat/%2Bwhitematter/header.m/","text":"ndr.format.whitematter.header \u00b6 HEADER Reads header information embedded within a WhiteMatter LLC binary filename . H = ndr . format . whitematter . header ( FILENAME ) Parses a WhiteMatter LLC binary data filename to extract metadata about the recording session . The filename is expected to follow a specific convention , typically including format , date , time , duration , device type , channel count , and sampling rate , separated by double underscores (' __ '). Expected Filename Format Examples: HSW_2025_01_14__12_43_33__03min_46sec__hsamp_64ch_20000sps . bin HSW_2025_01_14__12_43_33__03min_46sec__mmx_imu_10ch_20000sps . bin Inputs: FILENAME - The full path or relative path to the WhiteMatter LLC binary data file ( e . g ., ending in '. bin '). ( char row vector ). The file must exist . Outputs: H - A structure containing the extracted header information: . filename : The base name of the input file ( string ). . filepath : The directory path of the input file ( string ). . file_format : The format identifier ( e . g ., ' HSW ') ( string ). . start_time_iso : The recording start date and time in ISO 8601 format (' YYYY - MM - DDTHH:MM: SS ') ( string ). . duration_seconds : The recording duration in seconds ( double ). . device_type : The identifier for the recording device ( e . g ., ' hsamp ', ' mmx_imu ') ( string ). . num_channels : The number of channels recorded ( double ). . sampling_rate : The sampling rate in samples per second ( Hz ) ( double ). Errors: - Throws an error if the input filename does not exist . - Throws an error if the filename does not conform to the expected parsing format ( e . g ., incorrect number of ' __ ' separators or unparsable components ). See also: fileparts , strsplit , regexp , sscanf , datetime","title":"ndr.format.whitematter.header"},{"location":"reference/%2Bndr/%2Bformat/%2Bwhitematter/header.m/#ndrformatwhitematterheader","text":"HEADER Reads header information embedded within a WhiteMatter LLC binary filename . H = ndr . format . whitematter . header ( FILENAME ) Parses a WhiteMatter LLC binary data filename to extract metadata about the recording session . The filename is expected to follow a specific convention , typically including format , date , time , duration , device type , channel count , and sampling rate , separated by double underscores (' __ '). Expected Filename Format Examples: HSW_2025_01_14__12_43_33__03min_46sec__hsamp_64ch_20000sps . bin HSW_2025_01_14__12_43_33__03min_46sec__mmx_imu_10ch_20000sps . bin Inputs: FILENAME - The full path or relative path to the WhiteMatter LLC binary data file ( e . g ., ending in '. bin '). ( char row vector ). The file must exist . Outputs: H - A structure containing the extracted header information: . filename : The base name of the input file ( string ). . filepath : The directory path of the input file ( string ). . file_format : The format identifier ( e . g ., ' HSW ') ( string ). . start_time_iso : The recording start date and time in ISO 8601 format (' YYYY - MM - DDTHH:MM: SS ') ( string ). . duration_seconds : The recording duration in seconds ( double ). . device_type : The identifier for the recording device ( e . g ., ' hsamp ', ' mmx_imu ') ( string ). . num_channels : The number of channels recorded ( double ). . sampling_rate : The sampling rate in samples per second ( Hz ) ( double ). Errors: - Throws an error if the input filename does not exist . - Throws an error if the filename does not conform to the expected parsing format ( e . g ., incorrect number of ' __ ' separators or unparsable components ). See also: fileparts , strsplit , regexp , sscanf , datetime","title":"ndr.format.whitematter.header"},{"location":"reference/%2Bndr/%2Bformat/%2Bwhitematter/read.m/","text":"ndr.format.whitematter.read \u00b6 READ Reads data from a WhiteMatter LLC ( WM ) binary data file . [ D , t , t0_t1 ] = whitematter . read ( FNAME , T0 , T1 , OPTIONS ) reads data from the binary file specified by FNAME . It returns the data in the matrix D , where each row represents a sample and each column represents a channel . By default , all channels are read . Use the ' channels ' option to specify a subset of channels . The data is read from time T0 to T1 ( inclusive , in seconds ). The time vector corresponding to the samples in D is returned in t . The entire recording time window available in the file is returned in t0_t1 as a 1 x2 vector [ startTime endTime ]. This function utilizes ndr . format . binarymatrix . read for efficient data reading . Inputs : FNAME - Path to the WM data file ( char row vector ). The file must exist . It is assumed to contain an 8 - byte header followed by interleaved int16 data . T0 - Start time for data reading ( in seconds , double scalar ). Use - Inf to start from the beginning of the file . T1 - End time for data reading ( in seconds , double scalar ). Use Inf to read until the end of the file . OPTIONS : numChans - Total number of channels interleaved in the data file ( positive integer scalar , default : 64 ). This must be the * total * number , even if reading a subset . SR - Sampling rate of the data in Hz ( positive double scalar , default : 20000 ). byteOrder - Byte order of the binary data file ( ' ieee - le ' or ' ieee - be ' , char row vector , default : ' ieee - le ' ). channels - Vector of channel indices ( 1 - based ) to read . Channels must be within the range [ 1 , numChans ]. ( numeric vector , default : [] which means read all channels ). Outputs : D - N x C matrix containing the read data , where N is the number of samples read and C is the number of channels specified in the ' channels ' option ( or numChans if ' channels ' is empty ). Data is returned as int16 . t - N x 1 vector of time points ( in seconds ) corresponding to the samples in D . Returned as double . t0_t1 - 1 x2 vector [ startTime endTime ] indicating the total time window available for reading in the file ( seconds ). Returned as double . Examples : % Read all 64 channels from ' mydata_wm . dat ' from 10 s to 20 s [ D_all , t_all , time_range_all ] = whitematter . read ( ' mydata_wm . dat ' , 10 , 20 ); disp ([ ' Total time available : ' num2str ( time_range_all ( 2 )) ' seconds ' ]); disp ([ ' Data size : ' mat2str ( size ( D_all ))]); % Should be samples x 64 % Read only channels 1 , 5 , and 10 from ' mydata_wm . dat ' from 10 s to 20 s [ D_sub , t_sub , time_range_sub ] = whitematter . read ( ' mydata_wm . dat ' , 10 , 20 , ' channels ' , [ 1 , 5 , 10 ]); disp ([ ' Data size : ' mat2str ( size ( D_sub ))]); % Should be samples x 3 figure ; plot ( t_sub , double ( D_sub ( : , 2 ))); % Plot channel 5 ( second column requested ) xlabel ( ' Time ( s ) ' ); ylabel ( ' Raw Value ( int16 ) ' ); title ( ' Data Channel 5 ' ); See also : ndr . format . binarymatrix . read , ndr . time . fun . times2samples , ndr . time . fun . samples2times","title":"ndr.format.whitematter.read"},{"location":"reference/%2Bndr/%2Bformat/%2Bwhitematter/read.m/#ndrformatwhitematterread","text":"READ Reads data from a WhiteMatter LLC ( WM ) binary data file . [ D , t , t0_t1 ] = whitematter . read ( FNAME , T0 , T1 , OPTIONS ) reads data from the binary file specified by FNAME . It returns the data in the matrix D , where each row represents a sample and each column represents a channel . By default , all channels are read . Use the ' channels ' option to specify a subset of channels . The data is read from time T0 to T1 ( inclusive , in seconds ). The time vector corresponding to the samples in D is returned in t . The entire recording time window available in the file is returned in t0_t1 as a 1 x2 vector [ startTime endTime ]. This function utilizes ndr . format . binarymatrix . read for efficient data reading . Inputs : FNAME - Path to the WM data file ( char row vector ). The file must exist . It is assumed to contain an 8 - byte header followed by interleaved int16 data . T0 - Start time for data reading ( in seconds , double scalar ). Use - Inf to start from the beginning of the file . T1 - End time for data reading ( in seconds , double scalar ). Use Inf to read until the end of the file . OPTIONS : numChans - Total number of channels interleaved in the data file ( positive integer scalar , default : 64 ). This must be the * total * number , even if reading a subset . SR - Sampling rate of the data in Hz ( positive double scalar , default : 20000 ). byteOrder - Byte order of the binary data file ( ' ieee - le ' or ' ieee - be ' , char row vector , default : ' ieee - le ' ). channels - Vector of channel indices ( 1 - based ) to read . Channels must be within the range [ 1 , numChans ]. ( numeric vector , default : [] which means read all channels ). Outputs : D - N x C matrix containing the read data , where N is the number of samples read and C is the number of channels specified in the ' channels ' option ( or numChans if ' channels ' is empty ). Data is returned as int16 . t - N x 1 vector of time points ( in seconds ) corresponding to the samples in D . Returned as double . t0_t1 - 1 x2 vector [ startTime endTime ] indicating the total time window available for reading in the file ( seconds ). Returned as double . Examples : % Read all 64 channels from ' mydata_wm . dat ' from 10 s to 20 s [ D_all , t_all , time_range_all ] = whitematter . read ( ' mydata_wm . dat ' , 10 , 20 ); disp ([ ' Total time available : ' num2str ( time_range_all ( 2 )) ' seconds ' ]); disp ([ ' Data size : ' mat2str ( size ( D_all ))]); % Should be samples x 64 % Read only channels 1 , 5 , and 10 from ' mydata_wm . dat ' from 10 s to 20 s [ D_sub , t_sub , time_range_sub ] = whitematter . read ( ' mydata_wm . dat ' , 10 , 20 , ' channels ' , [ 1 , 5 , 10 ]); disp ([ ' Data size : ' mat2str ( size ( D_sub ))]); % Should be samples x 3 figure ; plot ( t_sub , double ( D_sub ( : , 2 ))); % Plot channel 5 ( second column requested ) xlabel ( ' Time ( s ) ' ); ylabel ( ' Raw Value ( int16 ) ' ); title ( ' Data Channel 5 ' ); See also : ndr . format . binarymatrix . read , ndr . time . fun . times2samples , ndr . time . fun . samples2times","title":"ndr.format.whitematter.read"},{"location":"reference/%2Bndr/%2Bfun/bitDepth.m/","text":"ndr.fun.bitDepth \u00b6 BITDEPTH Calculate required standard bit depth for a number of levels. reqBitDepth = BITDEPTH ( numberLevels ) calculates the minimum number of bits required to represent 'numberLevels' distinct values , and then rounds this value up to the nearest standard bit depth from the set { 4 , 8 , 16 , 32 , 64 , 128 , 256 }. Syntax : reqBitDepth = bitDepth ( numberLevels ) Description : The function determines the smallest integer 'b' such that 2 ^ b is greater than or equal to numberLevels . This theoretical minimum 'b' is calculated as ceil ( log2 ( numberLevels )). The function then finds the smallest value in the predefined list of standard bit depths [ 4 , 8 , 16 , 32 , 64 , 128 , 256 ] that is greater than or equal to 'b' . If the number of levels requires more than 256 bits , the function will produce an error . Note that representing 1 level requires a minimum of 0 bits theoretically , but this function returns the smallest standard size , which is 4. Input Arguments : numberLevels - The number of distinct levels or values that need to be represented . Type : numeric scalar Constraints : Must be a positive integer ( >= 1 ). Output Arguments : reqBitDepth - The required bit depth , rounded up to the nearest standard size . Type : numeric scalar Value : Will be one of 4 , 8 , 16 , 32 , 64 , 128 , or 256. Examples : % How many bits to represent 100 different intensity levels? b = bitDepth ( 100 ) % ceil(log2(100)) is 7. Round up standard size is 8. % Expected output: b = 8 % How many bits for a typical 8-bit grayscale image range? b = bitDepth ( 256 ) % ceil(log2(256)) is 8. Round up standard size is 8. % Expected output: b = 8 % How many bits if you need just one more level than 8-bit? b = bitDepth ( 257 ) % ceil(log2(257)) is 9. Round up standard size is 16. % Expected output: b = 16 % How many bits needed for just 1 level? (Returns smallest standard size) b = bitDepth ( 1 ) % Expected output: b = 4 % How many bits needed for 2 levels? b = bitDepth ( 2 ) % ceil(log2(2)) is 1. Round up standard size is 4. % Expected output: b = 4 % How many bits for exactly 16 levels? b = bitDepth ( 16 ) % ceil(log2(16)) is 4. Round up standard size is 4. % Expected output: b = 4 % How many bits for 17 levels? b = bitDepth ( 17 ) % ceil(log2(17)) is 5. Round up standard size is 8. % Expected output: b = 8 % Example that would error (requires > 256 bits) try hugeNumLevels = pow2 ( 256 ) + 1 ; % Needs 257 bits b = bitDepth ( hugeNumLevels ) catch ME disp ( ME . message ) fprintf ( 'Error ID: %s\\n' , ME . identifier ); end % Expected output: Error message \"Number of levels (...) requires % more than 256 bits.\" % Error ID: bitDepth:LevelsTooHigh See also : log2 , ceil , find , pow2 , arguments","title":"ndr.fun.bitDepth"},{"location":"reference/%2Bndr/%2Bfun/bitDepth.m/#ndrfunbitdepth","text":"BITDEPTH Calculate required standard bit depth for a number of levels. reqBitDepth = BITDEPTH ( numberLevels ) calculates the minimum number of bits required to represent 'numberLevels' distinct values , and then rounds this value up to the nearest standard bit depth from the set { 4 , 8 , 16 , 32 , 64 , 128 , 256 }. Syntax : reqBitDepth = bitDepth ( numberLevels ) Description : The function determines the smallest integer 'b' such that 2 ^ b is greater than or equal to numberLevels . This theoretical minimum 'b' is calculated as ceil ( log2 ( numberLevels )). The function then finds the smallest value in the predefined list of standard bit depths [ 4 , 8 , 16 , 32 , 64 , 128 , 256 ] that is greater than or equal to 'b' . If the number of levels requires more than 256 bits , the function will produce an error . Note that representing 1 level requires a minimum of 0 bits theoretically , but this function returns the smallest standard size , which is 4. Input Arguments : numberLevels - The number of distinct levels or values that need to be represented . Type : numeric scalar Constraints : Must be a positive integer ( >= 1 ). Output Arguments : reqBitDepth - The required bit depth , rounded up to the nearest standard size . Type : numeric scalar Value : Will be one of 4 , 8 , 16 , 32 , 64 , 128 , or 256. Examples : % How many bits to represent 100 different intensity levels? b = bitDepth ( 100 ) % ceil(log2(100)) is 7. Round up standard size is 8. % Expected output: b = 8 % How many bits for a typical 8-bit grayscale image range? b = bitDepth ( 256 ) % ceil(log2(256)) is 8. Round up standard size is 8. % Expected output: b = 8 % How many bits if you need just one more level than 8-bit? b = bitDepth ( 257 ) % ceil(log2(257)) is 9. Round up standard size is 16. % Expected output: b = 16 % How many bits needed for just 1 level? (Returns smallest standard size) b = bitDepth ( 1 ) % Expected output: b = 4 % How many bits needed for 2 levels? b = bitDepth ( 2 ) % ceil(log2(2)) is 1. Round up standard size is 4. % Expected output: b = 4 % How many bits for exactly 16 levels? b = bitDepth ( 16 ) % ceil(log2(16)) is 4. Round up standard size is 4. % Expected output: b = 4 % How many bits for 17 levels? b = bitDepth ( 17 ) % ceil(log2(17)) is 5. Round up standard size is 8. % Expected output: b = 8 % Example that would error (requires > 256 bits) try hugeNumLevels = pow2 ( 256 ) + 1 ; % Needs 257 bits b = bitDepth ( hugeNumLevels ) catch ME disp ( ME . message ) fprintf ( 'Error ID: %s\\n' , ME . identifier ); end % Expected output: Error message \"Number of levels (...) requires % more than 256 bits.\" % Error ID: bitDepth:LevelsTooHigh See also : log2 , ceil , find , pow2 , arguments","title":"ndr.fun.bitDepth"},{"location":"reference/%2Bndr/%2Bfun/getDataTypeString.m/","text":"ndr.fun.getDataTypeString \u00b6 GETDATATYPESTRING Returns a data type string based on properties. typeString = GETDATATYPESTRING ( isSigned , isInt , bitDepth ) generates a data type string ( e . g ., 'uint16' , 'int32' , 'float32' , 'float64' ) based on the specified properties . Syntax : typeString = getDataTypeString ( isSigned , isInt , bitDepth ) Description : This function determines a descriptive data type name given whether the type is signed , whether it ' s an integer , and its bit depth . - For integers ( isInt = true ), it returns 'intX' or 'uintX' where X is the bitDepth ( 8 , 16 , 32 , or 64 ). These match standard MATLAB integer type names . - For floating - point numbers ( isInt = false ), it returns 'float32' for bitDepth 32 or 'float64' for bitDepth 64. Note that these ( 'float32' , 'float64' ) are descriptive strings returned by this function and correspond to MATLAB ' s standard 'single' and 'double' types , respectively . The isSigned input is ignored for floating - point types as standard floats ( IEEE 754 ) are inherently signed . Bit depths 8 and 16 are not valid for standard floats and will cause an error if isInt is false . Input Arguments : isSigned - Specifies whether the data type is signed . Type : logical scalar ( true or false ) true : Signed type ( e . g ., int8 , int32 ) false : Unsigned type ( e . g ., uint8 , uint32 ). Ignored if isInt is false . isInt - Specifies whether the data type is an integer . Type : logical scalar ( true or false ) true : Integer type ( int / uint ) false : Floating - point type ( float32 / float64 ) bitDepth - Specifies the number of bits for the data type . Type : numeric scalar Allowed values : 8 , 16 , 32 , 64 Must be a positive integer . Output Arguments : typeString - The data type name . Type : char row vector ( e . g ., 'int16' , 'float64' ) Examples : % Get the type string for a signed 16-bit integer str16 = getDataTypeString ( true , true , 16 ) % Expected output: str16 = 'int16' % Get the type string for an unsigned 32-bit integer strU32 = getDataTypeString ( false , true , 32 ) % Expected output: strU32 = 'uint32' % Get the type string for a 32-bit floating-point number % Note: isSigned input (true/false) doesn't change the result strF32 = getDataTypeString ( true , false , 32 ) % Expected output: strF32 = 'float32' % Get the type string for a 64-bit floating-point number strF64 = getDataTypeString ( false , false , 64 ) % Expected output: strF64 = 'float64' % Example of invalid input (float with 16 bits) - This will error try getDataTypeString ( true , false , 16 ) catch ME disp ( ME . message ) % Display the error message fprintf ( 'Error ID: %s\\n' , ME . identifier ); % Display error ID end % Expected output: Error message indicating invalid bit depth for float. % Error ID: getDataTypeString:InvalidFloatBitDepth See also : class , isa , int8 , uint16 , single , double , arguments , sprintf , error","title":"ndr.fun.getDataTypeString"},{"location":"reference/%2Bndr/%2Bfun/getDataTypeString.m/#ndrfungetdatatypestring","text":"GETDATATYPESTRING Returns a data type string based on properties. typeString = GETDATATYPESTRING ( isSigned , isInt , bitDepth ) generates a data type string ( e . g ., 'uint16' , 'int32' , 'float32' , 'float64' ) based on the specified properties . Syntax : typeString = getDataTypeString ( isSigned , isInt , bitDepth ) Description : This function determines a descriptive data type name given whether the type is signed , whether it ' s an integer , and its bit depth . - For integers ( isInt = true ), it returns 'intX' or 'uintX' where X is the bitDepth ( 8 , 16 , 32 , or 64 ). These match standard MATLAB integer type names . - For floating - point numbers ( isInt = false ), it returns 'float32' for bitDepth 32 or 'float64' for bitDepth 64. Note that these ( 'float32' , 'float64' ) are descriptive strings returned by this function and correspond to MATLAB ' s standard 'single' and 'double' types , respectively . The isSigned input is ignored for floating - point types as standard floats ( IEEE 754 ) are inherently signed . Bit depths 8 and 16 are not valid for standard floats and will cause an error if isInt is false . Input Arguments : isSigned - Specifies whether the data type is signed . Type : logical scalar ( true or false ) true : Signed type ( e . g ., int8 , int32 ) false : Unsigned type ( e . g ., uint8 , uint32 ). Ignored if isInt is false . isInt - Specifies whether the data type is an integer . Type : logical scalar ( true or false ) true : Integer type ( int / uint ) false : Floating - point type ( float32 / float64 ) bitDepth - Specifies the number of bits for the data type . Type : numeric scalar Allowed values : 8 , 16 , 32 , 64 Must be a positive integer . Output Arguments : typeString - The data type name . Type : char row vector ( e . g ., 'int16' , 'float64' ) Examples : % Get the type string for a signed 16-bit integer str16 = getDataTypeString ( true , true , 16 ) % Expected output: str16 = 'int16' % Get the type string for an unsigned 32-bit integer strU32 = getDataTypeString ( false , true , 32 ) % Expected output: strU32 = 'uint32' % Get the type string for a 32-bit floating-point number % Note: isSigned input (true/false) doesn't change the result strF32 = getDataTypeString ( true , false , 32 ) % Expected output: strF32 = 'float32' % Get the type string for a 64-bit floating-point number strF64 = getDataTypeString ( false , false , 64 ) % Expected output: strF64 = 'float64' % Example of invalid input (float with 16 bits) - This will error try getDataTypeString ( true , false , 16 ) catch ME disp ( ME . message ) % Display the error message fprintf ( 'Error ID: %s\\n' , ME . identifier ); % Display error ID end % Expected output: Error message indicating invalid bit depth for float. % Error ID: getDataTypeString:InvalidFloatBitDepth See also : class , isa , int8 , uint16 , single , double , arguments , sprintf , error","title":"ndr.fun.getDataTypeString"},{"location":"reference/%2Bndr/%2Bfun/ndrpath.m/","text":"ndr.fun.ndrpath \u00b6 ndr . fun . ndrpath - return the path to NDR , the Neuroscience Data Reader library in Matlab P = ndr . fun . ndrpath () Returns the full path to the ndr package in Matlab .","title":"ndr.fun.ndrpath"},{"location":"reference/%2Bndr/%2Bfun/ndrpath.m/#ndrfunndrpath","text":"ndr . fun . ndrpath - return the path to NDR , the Neuroscience Data Reader library in Matlab P = ndr . fun . ndrpath () Returns the full path to the ndr package in Matlab .","title":"ndr.fun.ndrpath"},{"location":"reference/%2Bndr/%2Bfun/ndrresource.m/","text":"ndr.fun.ndrresource \u00b6 NDRRESOURCE - read an NDR resource file J = ndr.fun.ndrresource(RESOURCENAME) Reads the JSON resource file RESOURCENAME from the NDR resource directory. Returns a Matlab structure that is output by JSONDECODE. See also: ndr.fun.ndrpath, JSONDECODE","title":"ndr.fun.ndrresource"},{"location":"reference/%2Bndr/%2Bfun/ndrresource.m/#ndrfunndrresource","text":"NDRRESOURCE - read an NDR resource file J = ndr.fun.ndrresource(RESOURCENAME) Reads the JSON resource file RESOURCENAME from the NDR resource directory. Returns a Matlab structure that is output by JSONDECODE. See also: ndr.fun.ndrpath, JSONDECODE","title":"ndr.fun.ndrresource"},{"location":"reference/%2Bndr/%2Bfun/python_detect.m/","text":"ndr.fun.python_detect \u00b6 PYTHON_DETECT - detect if we have Python here B = PYTHON_DETECT () Run code to detect the presence of Python . If this Matlab application has Python on board , B is 1 . Otherwise , B is 0 . Note : This function may fail to compile on systems that lack Python . We recommend calling this function within a try / catch loop .","title":"ndr.fun.python_detect"},{"location":"reference/%2Bndr/%2Bfun/python_detect.m/#ndrfunpython_detect","text":"PYTHON_DETECT - detect if we have Python here B = PYTHON_DETECT () Run code to detect the presence of Python . If this Matlab application has Python on board , B is 1 . Otherwise , B is 0 . Note : This function may fail to compile on systems that lack Python . We recommend calling this function within a try / catch loop .","title":"ndr.fun.python_detect"},{"location":"reference/%2Bndr/%2Breader/axon_abf.m/","text":"CLASS ndr.reader.axon_abf \u00b6 NDR_READER_AXON_ABF - Reader class for Axon Instruments ( ABF ) . abf file This class reads data from Axon . ABF file format . Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description axon_abf Create a new Neuroscience Data Reader object for Axon ABF format canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the ABF file getchannelsepoch List the channels that are available from this ABF mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an underlying_datatype get the underlying data type for a channel in an epoch Methods help \u00b6 axon_abf - Create a new Neuroscience Data Reader object for Axon ABF format AXON_ABF_OBJ = AXON_ABF () Creates a Neuroscience Data Reader object of the Axon Instruments ABF file format . Documentation for ndr . reader . axon_abf / axon_abf doc ndr . reader . axon_abf canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . axon_abf / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_AXON_ABF_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . See also : ndr . time . clocktype filenamefromepochfiles - Return the file name that corresponds to the ABF file [ FILENAME ] = FILENAMEFROMEPOCHFILES ( AXON_ABF_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an . ABF data file . getchannelsepoch - List the channels that are available from this ABF file for a given set of files CHANNELS = GETCHANNELSEPOCH ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch . CHANNELS is a structure list of all channels with fields : --------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data store in the channel | ( e . g ., 'analog_in' , 'digital_in' , 'image' , 'timestamp' ) mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . axon_abf . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . axon_abf . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . axon_abf . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES ( AXON_ABF_OBJ , CHANNELTYPE , CHANNEL , EPOCH , S0 , S1 ) CHANNELTYPE is the type of channel to read ( single text string , such as 'ai' , 'analog_input' , 'time' ) or a cell array of strings for each channel CHANNEL is a vector of the channel numbers to read , beginning from 1 . EPOCH is the epoch number to read from . DATA will have one column per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . axon_abf / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channel SR = SAMPLERATE ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels in samples / sec . CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1 ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndr . time . clocktype objects returned by EPOCH_NUMBER . See also : ndr . time . clocktype , EPOCHCLOCK underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a polynomial that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( 1 )) * P ( 2 ) + ( RAW_DATA + P ( 1 )) * P ( 3 ) ... DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL .","title":"ndr.reader.axon_abf"},{"location":"reference/%2Bndr/%2Breader/axon_abf.m/#class-ndrreaderaxon_abf","text":"NDR_READER_AXON_ABF - Reader class for Axon Instruments ( ABF ) . abf file This class reads data from Axon . ABF file format .","title":"CLASS ndr.reader.axon_abf"},{"location":"reference/%2Bndr/%2Breader/axon_abf.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/axon_abf.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/axon_abf.m/#methods","text":"Method Description axon_abf Create a new Neuroscience Data Reader object for Axon ABF format canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the ABF file getchannelsepoch List the channels that are available from this ABF mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an underlying_datatype get the underlying data type for a channel in an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/axon_abf.m/#methods-help","text":"axon_abf - Create a new Neuroscience Data Reader object for Axon ABF format AXON_ABF_OBJ = AXON_ABF () Creates a Neuroscience Data Reader object of the Axon Instruments ABF file format . Documentation for ndr . reader . axon_abf / axon_abf doc ndr . reader . axon_abf canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . axon_abf / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_AXON_ABF_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . See also : ndr . time . clocktype filenamefromepochfiles - Return the file name that corresponds to the ABF file [ FILENAME ] = FILENAMEFROMEPOCHFILES ( AXON_ABF_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an . ABF data file . getchannelsepoch - List the channels that are available from this ABF file for a given set of files CHANNELS = GETCHANNELSEPOCH ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch . CHANNELS is a structure list of all channels with fields : --------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data store in the channel | ( e . g ., 'analog_in' , 'digital_in' , 'image' , 'timestamp' ) mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . axon_abf . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . axon_abf . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . axon_abf . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES ( AXON_ABF_OBJ , CHANNELTYPE , CHANNEL , EPOCH , S0 , S1 ) CHANNELTYPE is the type of channel to read ( single text string , such as 'ai' , 'analog_input' , 'time' ) or a cell array of strings for each channel CHANNEL is a vector of the channel numbers to read , beginning from 1 . EPOCH is the epoch number to read from . DATA will have one column per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . axon_abf / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channel SR = SAMPLERATE ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels in samples / sec . CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1 ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndr . time . clocktype objects returned by EPOCH_NUMBER . See also : ndr . time . clocktype , EPOCHCLOCK underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( AXON_ABF_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a polynomial that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( 1 )) * P ( 2 ) + ( RAW_DATA + P ( 1 )) * P ( 3 ) ... DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL .","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/base.m/","text":"CLASS ndr.reader.base \u00b6 READER - create a new Neuroscience Data Reader Base object READER_OBJ = ndr.reader.base() Creates an Neuroscence Data Reader object of the indicated type. Superclasses \u00b6 none Properties \u00b6 none Methods \u00b6 Method Description base create a new Neuroscience Data Reader Base object canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device for a given epoch mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlying_datatype get the underlying data type for a channel in an epoch Methods help \u00b6 base - create a new Neuroscience Data Reader Base object READER_OBJ = ndr . reader . base () Creates an Neuroscence Data Reader object of the indicated type . Documentation for ndr . reader . base / base doc ndr . reader . base canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_BASE_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELSEPOCH(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT . The abstract class always returns {[ NaN NaN ]}. See also : ndr . time . clocktype , ndr . reader . base / epochclock underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL .","title":"ndr.reader.base"},{"location":"reference/%2Bndr/%2Breader/base.m/#class-ndrreaderbase","text":"READER - create a new Neuroscience Data Reader Base object READER_OBJ = ndr.reader.base() Creates an Neuroscence Data Reader object of the indicated type.","title":"CLASS ndr.reader.base"},{"location":"reference/%2Bndr/%2Breader/base.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/base.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/base.m/#methods","text":"Method Description base create a new Neuroscience Data Reader Base object canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device for a given epoch mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlying_datatype get the underlying data type for a channel in an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/base.m/#methods-help","text":"base - create a new Neuroscience Data Reader Base object READER_OBJ = ndr . reader . base () Creates an Neuroscence Data Reader object of the indicated type . Documentation for ndr . reader . base / base doc ndr . reader . base canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_BASE_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELSEPOCH(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT . The abstract class always returns {[ NaN NaN ]}. See also : ndr . time . clocktype , ndr . reader . base / epochclock underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL .","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/bjg.m/","text":"CLASS ndr.reader.bjg \u00b6 NDR_READER_BJG - Reader class for Gluckman lab binary format file This class reads data from Gluckman lab binary format Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description bjg Create a new Neuroscience Data Reader object for Axon ABF format canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the ABF file getchannelsepoch List the channels that are available from this ABF mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an underlying_datatype get the underlying data type for a channel in an epoch Methods help \u00b6 bjg - Create a new Neuroscience Data Reader object for Axon ABF format BJG_OBJ = BJG () Creates a Neuroscience Data Reader object of the Axon Instruments ABF file format . Documentation for ndr . reader . bjg / bjg doc ndr . reader . bjg canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . bjg / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_BJG_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.bjg/epochclock is inherited from superclass ndr.reader.base filenamefromepochfiles - Return the file name that corresponds to the ABF file [ FILENAME ] = FILENAMEFROMEPOCHFILES ( BJG_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an . ABF data file . getchannelsepoch - List the channels that are available from this ABF file for a given set of files CHANNELS = GETCHANNELSEPOCH ( BJG_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch . CHANNELS is a structure list of all channels with fields : --------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data store in the channel | ( e . g ., 'analog_in' , 'digital_in' , 'image' , 'timestamp' ) mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . bjg . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . bjg . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . bjg . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES ( BJG_OBJ , CHANNELTYPE , CHANNEL , EPOCH , S0 , S1 ) CHANNELTYPE is the type of channel to read ( single text string , such as 'ai' , 'analog_input' , 'time' ) or a cell array of strings for each channel CHANNEL is a vector of the channel numbers to read , beginning from 1 . EPOCH is the epoch number to read from . DATA will have one column per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . bjg / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channel SR = SAMPLERATE ( BJG_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels in samples / sec . CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1 ( BJG_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndr . time . clocktype objects returned by EPOCH_NUMBER . See also : ndr . time . clocktype , EPOCHCLOCK underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . bjg / underlying_datatype is inherited from superclass ndr . reader . base","title":"ndr.reader.bjg"},{"location":"reference/%2Bndr/%2Breader/bjg.m/#class-ndrreaderbjg","text":"NDR_READER_BJG - Reader class for Gluckman lab binary format file This class reads data from Gluckman lab binary format","title":"CLASS ndr.reader.bjg"},{"location":"reference/%2Bndr/%2Breader/bjg.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/bjg.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/bjg.m/#methods","text":"Method Description bjg Create a new Neuroscience Data Reader object for Axon ABF format canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the ABF file getchannelsepoch List the channels that are available from this ABF mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an underlying_datatype get the underlying data type for a channel in an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/bjg.m/#methods-help","text":"bjg - Create a new Neuroscience Data Reader object for Axon ABF format BJG_OBJ = BJG () Creates a Neuroscience Data Reader object of the Axon Instruments ABF file format . Documentation for ndr . reader . bjg / bjg doc ndr . reader . bjg canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . bjg / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_BJG_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.bjg/epochclock is inherited from superclass ndr.reader.base filenamefromepochfiles - Return the file name that corresponds to the ABF file [ FILENAME ] = FILENAMEFROMEPOCHFILES ( BJG_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an . ABF data file . getchannelsepoch - List the channels that are available from this ABF file for a given set of files CHANNELS = GETCHANNELSEPOCH ( BJG_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch . CHANNELS is a structure list of all channels with fields : --------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data store in the channel | ( e . g ., 'analog_in' , 'digital_in' , 'image' , 'timestamp' ) mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . bjg . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . bjg . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . bjg . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES ( BJG_OBJ , CHANNELTYPE , CHANNEL , EPOCH , S0 , S1 ) CHANNELTYPE is the type of channel to read ( single text string , such as 'ai' , 'analog_input' , 'time' ) or a cell array of strings for each channel CHANNEL is a vector of the channel numbers to read , beginning from 1 . EPOCH is the epoch number to read from . DATA will have one column per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . bjg / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channel SR = SAMPLERATE ( BJG_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels in samples / sec . CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1 ( BJG_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndr . time . clocktype objects returned by EPOCH_NUMBER . See also : ndr . time . clocktype , EPOCHCLOCK underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . bjg / underlying_datatype is inherited from superclass ndr . reader . base","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/","text":"CLASS ndr.reader.ced_smr \u00b6 CED_SMR - reader class for Cambridge Electronic Design ( CED ) SMR files This class reads data from CED Spike2 . SMR or . SON file formats . It depends on sigTOOL by Malcolm Lidierth ( http : // sigtool . sourceforge . net ) . sigTOOL is also included in the https : // github . com / VH - Lab / vhlab - thirdparty - matlab bundle and can be installed with instructions at http : // code . vhlab . org . Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether can the channels in a channel struct be read in a single function call? ced_smr Create a new NDR_NDR_READER_CEDSMR object cedsmrfile Identify the .SMR file out of a file list cedsmrheader2readerchanneltype Convert between Intan headers and the ndr.ndr.reader channel types daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlying_datatype get the underlying data type for a channel in an epoch Methods help \u00b6 canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . ced_smr / canbereadtogether is inherited from superclass ndr . reader . base ced_smr - Create a new NDR_NDR_READER_CEDSMR object N = ndr . reader . ced_smr ( NAME , THEFILENAVIGATOR ) Creates a new object for reading Cambridge Electronic Design SMR files . Documentation for ndr . reader . ced_smr / ced_smr doc ndr . reader . ced_smr cedsmrfile - Identify the .SMR file out of a file list FILENAME = CEDSMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). cedsmrheader2readerchanneltype - Convert between Intan headers and the ndr.ndr.reader channel types CHANNELTYPE = CEDSMRHEADER2READERCHANNELTYPE(CEDSMRCHANNELTYPE) Given an Intan header file type, returns the standard ndr.ndr.reader channel type daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_CEDSMR_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.ced_smr/epochclock is inherited from superclass ndr.reader.base getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELS(THEDEV, EPOCHFILES, EPOCHSELECT) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . ced_smr . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . ced_smr . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . ced_smr . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data ( each column contains data from an indvidual channel ) readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_CEDSMR_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , 'text' ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the set of epoch files DATA is a multiple - column vector ; the first column has the time of the event . The remaining columns indicate the marker code . In the case of 'events' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDR_NDR_READER_CEDSMR_OBJ , EPOCHFILES , EPOCHSELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the EPOCHFILES that define this epoch in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . See also : ndi . time . clocktype , EPOCHCLOCK underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . ced_smr / underlying_datatype is inherited from superclass ndr . reader . base","title":"ndr.reader.ced_smr"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#class-ndrreaderced_smr","text":"CED_SMR - reader class for Cambridge Electronic Design ( CED ) SMR files This class reads data from CED Spike2 . SMR or . SON file formats . It depends on sigTOOL by Malcolm Lidierth ( http : // sigtool . sourceforge . net ) . sigTOOL is also included in the https : // github . com / VH - Lab / vhlab - thirdparty - matlab bundle and can be installed with instructions at http : // code . vhlab . org .","title":"CLASS ndr.reader.ced_smr"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#methods","text":"Method Description canbereadtogether can the channels in a channel struct be read in a single function call? ced_smr Create a new NDR_NDR_READER_CEDSMR object cedsmrfile Identify the .SMR file out of a file list cedsmrheader2readerchanneltype Convert between Intan headers and the ndr.ndr.reader channel types daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlying_datatype get the underlying data type for a channel in an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#methods-help","text":"canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . ced_smr / canbereadtogether is inherited from superclass ndr . reader . base ced_smr - Create a new NDR_NDR_READER_CEDSMR object N = ndr . reader . ced_smr ( NAME , THEFILENAVIGATOR ) Creates a new object for reading Cambridge Electronic Design SMR files . Documentation for ndr . reader . ced_smr / ced_smr doc ndr . reader . ced_smr cedsmrfile - Identify the .SMR file out of a file list FILENAME = CEDSMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). cedsmrheader2readerchanneltype - Convert between Intan headers and the ndr.ndr.reader channel types CHANNELTYPE = CEDSMRHEADER2READERCHANNELTYPE(CEDSMRCHANNELTYPE) Given an Intan header file type, returns the standard ndr.ndr.reader channel type daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_CEDSMR_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.ced_smr/epochclock is inherited from superclass ndr.reader.base getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELS(THEDEV, EPOCHFILES, EPOCHSELECT) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: ------------------------------------------------------- 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . ced_smr . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . ced_smr . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . ced_smr . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data ( each column contains data from an indvidual channel ) readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ TIMESTAMPS , DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_CEDSMR_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , 'text' ) CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the set of epoch files DATA is a multiple - column vector ; the first column has the time of the event . The remaining columns indicate the marker code . In the case of 'events' , this is just 1 . If more than one channel is requested , DATA is returned as a cell array , one entry per channel . samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDR_NDR_READER_CEDSMR_OBJ , EPOCHFILES , EPOCHSELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the EPOCHFILES that define this epoch in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . See also : ndi . time . clocktype , EPOCHCLOCK underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . ced_smr / underlying_datatype is inherited from superclass ndr . reader . base","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/","text":"CLASS ndr.reader.intan_rhd \u00b6 NDR_READER_INTAN_RHD - Reader class for Intan Technologies . RHD file This class reads data from Intan Technologies . RHD file format . Intan Technologies : http : // intantech . com Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels Convert a set of DAQ channel epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the .RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan intan_rhd Create a new Neuroscience Data Reader object intananychannelname2intanchanneltype Converts a channel bank from Intan native format or relative format to the appropriate Intan channel type intanchanneltype2mfdaqchanneltype Convert the channel type to generic format of multifuncdaqchannel intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndr.ndr.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndr.ndr.reader.mfdaq format mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type mfdaqchanneltype2intanchanneltype Convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndr.ndr.reader.mfdaq channel types and Intan headers readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an underlying_datatype get the underlying data type for a channel in an epoch Methods help \u00b6 canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . intan_rhd / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - Convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( INTAN_RHD_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data . EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than epoch contained . For most devices , EPOCH_SELECT is always 1. Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | |-----------------------------|----------------------------------------------| | internal_type | Internal channel type ; the type of channel as| | | it is known to the device . This is the type | | | that readepoch_samples takes | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the| | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ Examples for Intan . Channels can be specified by either absolute reference ( for example , A - 000 means the first channel in bank A ) or in relative reference ( for example , ai1 means the first channel that was turned on ; the one that appears first in the header file ). Example : % absolute reference channelstruct_1 = daqchannels2internalchannels ( intan_rhd_obj , 'A' , 0 , epochstreams , epoch_select ) % channelstruct_1.internal_type = 'ai'; % channelstruct_1.internal_number = 1; % assuming A-000 is the first channel acquired % channelstruct_1.internal_channelname = 'A-000'; % channelstruct_1.ndr_type = 'ai'; % analog input % channelstruct_1.samplerate = 20000; % relative reference channelstruct_2 = daqchannels2internalchannels ( intan_rhd_obj , 'ai' , 1 , epochstreams , epoch_select ) % channelstruct_2.internal_type = 'ai'; % channelstruct_2.internal_number = 1; % we asked for the first internal/relative channel % channelstruct_2.internal_channelname = 'A-000'; % assuming A-000 is the first channel acquired % channelstruct_2.ndr_type = 'ai'; % analog input % channelstruct_2.samplerate = 20000; epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.intan_rhd/epochclock is inherited from superclass ndr.reader.base filenamefromepochfiles - Return the file name that corresponds to the .RHD file, or directory in case of directory [ FILENAME , PARENTDIR , ISDIRECTORY ] = FILENAMEFROMEPOCHFILES ( NDR_NDRREADER_INTANREADER_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an . RHD data file . If the 1 - file - per - channel mode is used , then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1 . getchannelsepoch - List the channels that are available on this Intan device for a given set of files CHANNELS = GETCHANNELSEPOCH ( INTANREADER_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch . CHANNELS is a structure list of all channels with fields : --------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data store in the channel | ( e . g ., 'analogin' , 'digitalin' , 'image' , 'timestamp' ) intan_rhd - Create a new Neuroscience Data Reader object INTAN_RHD_OBJ = INTAN_RHD () Creates a Neuroscience Data Reader object of the Intan Technologies . RHD file format . Documentation for ndr . reader . intan_rhd / intan_rhd doc ndr . reader . intan_rhd intananychannelname2intanchanneltype - Converts a channel bank from Intan native format or relative format to the appropriate Intan channel type [ INTANCHANNELTYPE , ABSOLUTE ] = INTANANYCHANNELNAME2INTANCHANNELTYPE ( INTANANYCHANNELNAME ) Converts any channel name into the type needed to call ndr . format . intan . readfile . If the channel was specified as an absolute reference ( that is , 'A' , 'B' , etc ) , then ABSOLUTE is 1 . Otherwise , if the reference is relative , then ABSOLUTE is 0 . Examples : intanchanneltype = ndr . reader . intan_rhd . intananychannelname2intanchanneltype ( 'ai' ) % returns 'amp' , 0 intanchanneltype = ndr . reader . intan_rhd . intananychannelname2intanchanneltype ( 'A' ) % returns 'amp' , 1 intanchanneltype = ndr . reader . intan_rhd . intananychannelname2intanchanneltype ( 'DIN' ) % returns 'din' , 0 intanchanneltype2mfdaqchanneltype - Convert the channel type to generic format of multifuncdaqchannel from the specific Intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE ( CHANNELTYPE ) The intanchanneltype is a string of the specific channel type for Intan . intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndr.ndr.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.ndr.reader.mfdaq channel type. intanname2mfdaqname - Converts a channel name from Intan native format to ndr.ndr.reader.mfdaq format [ CHANNAME ] = INTANNAME2MFDAQNAME ( NDR_NDRREADER_INTANREADER_OBJ , TYPE , NAME ) Given an Intan native channel name ( e . g ., 'A-000' ) in NAME and an ndr . ndr . reader . mfdaq channel type string ( see NDI_DEVICE_MFDAQ ), this function produces an ndr . ndr . reader . mfdaq channel name ( e . g ., 'ai1' ). mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . intan_rhd . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . intan_rhd . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . intan_rhd . mfdaq_type is inherited from superclass ndr . reader . base mfdaqchanneltype2intanchanneltype - Convert the channel type from generic format of multifuncdaqchannel to the specific Intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE ( CHANNELTYPE ) The intanchanneltype is a string of the specific channel type for Intan . mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an ndr.ndr.mfdaq channel type string, this function returns the associated fieldname. mfdaqchanneltype2intanheadertype - Convert between the ndr.ndr.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndr.ndr.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(INTANREADER_OBJ, CHANNELTYPE, CHANNEL, EPOCH, S0, S1) CHANNELTYPE is the type of channel to read (single text string, such as 'ai','analog_input','time') CHANNEL is a vector of the channel numbers to read, beginning from 1. EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . intan_rhd / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channel SR = SAMPLERATE ( INTANREADER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels . CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1 ( INTAN_RHD_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndr . time . clocktype objects returned by EPOCH_NUMBER . The abstract class always return {[ NaN NaN ]}. See also : ndr . time . clocktype , EPOCHCLOCK underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( INTANREADER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a polynomial that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( 1 )) * P ( 2 ) + ( RAW_DATA + P ( 1 )) * P ( 3 ) ... DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL .","title":"ndr.reader.intan_rhd"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#class-ndrreaderintan_rhd","text":"NDR_READER_INTAN_RHD - Reader class for Intan Technologies . RHD file This class reads data from Intan Technologies . RHD file format . Intan Technologies : http : // intantech . com","title":"CLASS ndr.reader.intan_rhd"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#methods","text":"Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels Convert a set of DAQ channel epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the .RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan intan_rhd Create a new Neuroscience Data Reader object intananychannelname2intanchanneltype Converts a channel bank from Intan native format or relative format to the appropriate Intan channel type intanchanneltype2mfdaqchanneltype Convert the channel type to generic format of multifuncdaqchannel intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndr.ndr.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndr.ndr.reader.mfdaq format mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type mfdaqchanneltype2intanchanneltype Convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndr.ndr.reader.mfdaq channel types and Intan headers readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an underlying_datatype get the underlying data type for a channel in an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#methods-help","text":"canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . intan_rhd / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - Convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( INTAN_RHD_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data . EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than epoch contained . For most devices , EPOCH_SELECT is always 1. Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | |-----------------------------|----------------------------------------------| | internal_type | Internal channel type ; the type of channel as| | | it is known to the device . This is the type | | | that readepoch_samples takes | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the| | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ Examples for Intan . Channels can be specified by either absolute reference ( for example , A - 000 means the first channel in bank A ) or in relative reference ( for example , ai1 means the first channel that was turned on ; the one that appears first in the header file ). Example : % absolute reference channelstruct_1 = daqchannels2internalchannels ( intan_rhd_obj , 'A' , 0 , epochstreams , epoch_select ) % channelstruct_1.internal_type = 'ai'; % channelstruct_1.internal_number = 1; % assuming A-000 is the first channel acquired % channelstruct_1.internal_channelname = 'A-000'; % channelstruct_1.ndr_type = 'ai'; % analog input % channelstruct_1.samplerate = 20000; % relative reference channelstruct_2 = daqchannels2internalchannels ( intan_rhd_obj , 'ai' , 1 , epochstreams , epoch_select ) % channelstruct_2.internal_type = 'ai'; % channelstruct_2.internal_number = 1; % we asked for the first internal/relative channel % channelstruct_2.internal_channelname = 'A-000'; % assuming A-000 is the first channel acquired % channelstruct_2.ndr_type = 'ai'; % analog input % channelstruct_2.samplerate = 20000; epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.intan_rhd/epochclock is inherited from superclass ndr.reader.base filenamefromepochfiles - Return the file name that corresponds to the .RHD file, or directory in case of directory [ FILENAME , PARENTDIR , ISDIRECTORY ] = FILENAMEFROMEPOCHFILES ( NDR_NDRREADER_INTANREADER_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an . RHD data file . If the 1 - file - per - channel mode is used , then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1 . getchannelsepoch - List the channels that are available on this Intan device for a given set of files CHANNELS = GETCHANNELSEPOCH ( INTANREADER_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch . CHANNELS is a structure list of all channels with fields : --------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data store in the channel | ( e . g ., 'analogin' , 'digitalin' , 'image' , 'timestamp' ) intan_rhd - Create a new Neuroscience Data Reader object INTAN_RHD_OBJ = INTAN_RHD () Creates a Neuroscience Data Reader object of the Intan Technologies . RHD file format . Documentation for ndr . reader . intan_rhd / intan_rhd doc ndr . reader . intan_rhd intananychannelname2intanchanneltype - Converts a channel bank from Intan native format or relative format to the appropriate Intan channel type [ INTANCHANNELTYPE , ABSOLUTE ] = INTANANYCHANNELNAME2INTANCHANNELTYPE ( INTANANYCHANNELNAME ) Converts any channel name into the type needed to call ndr . format . intan . readfile . If the channel was specified as an absolute reference ( that is , 'A' , 'B' , etc ) , then ABSOLUTE is 1 . Otherwise , if the reference is relative , then ABSOLUTE is 0 . Examples : intanchanneltype = ndr . reader . intan_rhd . intananychannelname2intanchanneltype ( 'ai' ) % returns 'amp' , 0 intanchanneltype = ndr . reader . intan_rhd . intananychannelname2intanchanneltype ( 'A' ) % returns 'amp' , 1 intanchanneltype = ndr . reader . intan_rhd . intananychannelname2intanchanneltype ( 'DIN' ) % returns 'din' , 0 intanchanneltype2mfdaqchanneltype - Convert the channel type to generic format of multifuncdaqchannel from the specific Intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE ( CHANNELTYPE ) The intanchanneltype is a string of the specific channel type for Intan . intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndr.ndr.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.ndr.reader.mfdaq channel type. intanname2mfdaqname - Converts a channel name from Intan native format to ndr.ndr.reader.mfdaq format [ CHANNAME ] = INTANNAME2MFDAQNAME ( NDR_NDRREADER_INTANREADER_OBJ , TYPE , NAME ) Given an Intan native channel name ( e . g ., 'A-000' ) in NAME and an ndr . ndr . reader . mfdaq channel type string ( see NDI_DEVICE_MFDAQ ), this function produces an ndr . ndr . reader . mfdaq channel name ( e . g ., 'ai1' ). mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . intan_rhd . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . intan_rhd . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . intan_rhd . mfdaq_type is inherited from superclass ndr . reader . base mfdaqchanneltype2intanchanneltype - Convert the channel type from generic format of multifuncdaqchannel to the specific Intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE ( CHANNELTYPE ) The intanchanneltype is a string of the specific channel type for Intan . mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an ndr.ndr.mfdaq channel type string, this function returns the associated fieldname. mfdaqchanneltype2intanheadertype - Convert between the ndr.ndr.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndr.ndr.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(INTANREADER_OBJ, CHANNELTYPE, CHANNEL, EPOCH, S0, S1) CHANNELTYPE is the type of channel to read (single text string, such as 'ai','analog_input','time') CHANNEL is a vector of the channel numbers to read, beginning from 1. EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . intan_rhd / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channel SR = SAMPLERATE ( INTANREADER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels . CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1 ( INTAN_RHD_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndr . time . clocktype objects returned by EPOCH_NUMBER . The abstract class always return {[ NaN NaN ]}. See also : ndr . time . clocktype , EPOCHCLOCK underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( INTANREADER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a polynomial that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( 1 )) * P ( 2 ) + ( RAW_DATA + P ( 1 )) * P ( 3 ) ... DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL .","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/neo.m/","text":"CLASS ndr.reader.neo \u00b6 ndr . reader . neo is a class . self = ndr . reader . neo ( varargin ) Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether Formatting objects from matlab to python daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device for a given epoch insert_python_path ndr.reader.neo.insert_python_path is a function. mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type neo ndr.reader.neo/neo is a constructor. readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch reload_python ndr.reader.neo.reload_python is a function. samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlying_datatype get the underlying data type for a channel in an epoch Methods help \u00b6 canbereadtogether - Formatting objects from matlab to python daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_BASE_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ abstract class returns empty Help for ndr . reader . neo / daqchannels2internalchannels is inherited from superclass ndr . reader . base epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.neo/epochclock is inherited from superclass ndr.reader.base getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELSEPOCH ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields : ------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data stored in the channel | ( e . g ., 'analogin' , 'digitalin' , 'image' , 'timestamp' ) Help for ndr . reader . neo / getchannelsepoch is inherited from superclass ndr . reader . base insert_python_path - ndr.reader.neo.insert_python_path is a function. mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . neo . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . neo . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . neo . mfdaq_type is inherited from superclass ndr . reader . base neo - ndr.reader.neo/neo is a constructor. self = neo ( varargin ) Documentation for ndr . reader . neo / neo doc ndr . reader . neo readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCH , S0 , S1 ) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCH is the epoch number to read from . DATA will have one column per channel . Help for ndr . reader . neo / readchannels_epochsamples is inherited from superclass ndr . reader . base readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . neo / readevents_epochsamples_native is inherited from superclass ndr . reader . base reload_python - ndr.reader.neo.reload_python is a function. samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . neo / samplerate is inherited from superclass ndr . reader . base t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT . The abstract class always returns {[ NaN NaN ]}. See also : ndr . time . clocktype , ndr . reader . neo / epochclock Help for ndr . reader . neo / t0_t1 is inherited from superclass ndr . reader . base underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . neo / underlying_datatype is inherited from superclass ndr . reader . base","title":"ndr.reader.neo"},{"location":"reference/%2Bndr/%2Breader/neo.m/#class-ndrreaderneo","text":"ndr . reader . neo is a class . self = ndr . reader . neo ( varargin )","title":"CLASS ndr.reader.neo"},{"location":"reference/%2Bndr/%2Breader/neo.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/neo.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/neo.m/#methods","text":"Method Description canbereadtogether Formatting objects from matlab to python daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device for a given epoch insert_python_path ndr.reader.neo.insert_python_path is a function. mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type neo ndr.reader.neo/neo is a constructor. readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch reload_python ndr.reader.neo.reload_python is a function. samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch underlying_datatype get the underlying data type for a channel in an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/neo.m/#methods-help","text":"canbereadtogether - Formatting objects from matlab to python daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_BASE_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ abstract class returns empty Help for ndr . reader . neo / daqchannels2internalchannels is inherited from superclass ndr . reader . base epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.neo/epochclock is inherited from superclass ndr.reader.base getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELSEPOCH ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields : ------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data stored in the channel | ( e . g ., 'analogin' , 'digitalin' , 'image' , 'timestamp' ) Help for ndr . reader . neo / getchannelsepoch is inherited from superclass ndr . reader . base insert_python_path - ndr.reader.neo.insert_python_path is a function. mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . neo . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . neo . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . neo . mfdaq_type is inherited from superclass ndr . reader . base neo - ndr.reader.neo/neo is a constructor. self = neo ( varargin ) Documentation for ndr . reader . neo / neo doc ndr . reader . neo readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCH , S0 , S1 ) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read , beginning from 1 EPOCH is the epoch number to read from . DATA will have one column per channel . Help for ndr . reader . neo / readchannels_epochsamples is inherited from superclass ndr . reader . base readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . neo / readevents_epochsamples_native is inherited from superclass ndr . reader . base reload_python - ndr.reader.neo.reload_python is a function. samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . neo / samplerate is inherited from superclass ndr . reader . base t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT . The abstract class always returns {[ NaN NaN ]}. See also : ndr . time . clocktype , ndr . reader . neo / epochclock Help for ndr . reader . neo / t0_t1 is inherited from superclass ndr . reader . base underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . neo / underlying_datatype is inherited from superclass ndr . reader . base","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/somecompany_someformat.m/","text":"ndr.reader.somecompany_someformat \u00b6 SOMECOMPANY_SOMEFORMAT - create a new NDR reader base object that reads a particular company or group 's format NDR_OBJ = SOMECOMPANY_SOMEFORMAT() This is a template file for making ndr.reader.base objects that interpret and read data from a particular company or group SOMECOMPANY in SOMEFORMAT. Documentation for ndr.reader.somecompany_someformat doc ndr.reader.somecompany_someformat","title":"ndr.reader.somecompany_someformat"},{"location":"reference/%2Bndr/%2Breader/somecompany_someformat.m/#ndrreadersomecompany_someformat","text":"SOMECOMPANY_SOMEFORMAT - create a new NDR reader base object that reads a particular company or group 's format NDR_OBJ = SOMECOMPANY_SOMEFORMAT() This is a template file for making ndr.reader.base objects that interpret and read data from a particular company or group SOMECOMPANY in SOMEFORMAT. Documentation for ndr.reader.somecompany_someformat doc ndr.reader.somecompany_someformat","title":"ndr.reader.somecompany_someformat"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/","text":"CLASS ndr.reader.spikegadgets_rec \u00b6 path --> epoch start & end Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles ndr.reader.spikegadgets_rec/filenamefromepochfiles is a function. getchannelsepoch List the channels that are available on this device for a given epoch getepochprobemap GETEPOCHPROBEMAP returns struct with probe information mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL spikegadgets_rec create a new Neuroscience Data Reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch test test reading using NDR reader underlying_datatype get the underlying data type for a channel in an epoch Methods help \u00b6 canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . spikegadgets_rec / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_BASE_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHFILES , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | Rate of sampling | ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.spikegadgets_rec/epochclock is inherited from superclass ndr.reader.base filenamefromepochfiles - ndr.reader.spikegadgets_rec/filenamefromepochfiles is a function. filename = filenamefromepochfiles(ndr_reader_base_spikegadgets_obj, filename) getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELS ( THEDEV , EPOCHFILES ) EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields : ------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data stored in the channel | ( e . g ., 'analogin' , 'digitalin' , 'image' , 'timestamp' ) getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information name , reference , n - trode , channels EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . spikegadgets_rec . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . spikegadgets_rec . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . spikegadgets_rec . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read 'digital_in' , 'digital_out' , 'analog_in' , 'analog_out' or 'auxiliary' CHANNEL is a vector of the channel numbers to read beginning from 1 if 'etrodeftrode' is channeltype , if channeltype is 'analog_in' channel is an array with the string names of analog channels 'Ain1' through 8 EPOCH is set of files in the epoch DATA is the channel data ( each column contains data from an indvidual channel ) readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . spikegadgets_rec / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) SR is the list of sample rate from specified channels EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . CHANNELTYPE and CHANNEL not used in this case since it is the same for all channels in this device spikegadgets_rec - create a new Neuroscience Data Reader object READER_OBJ = ndr . ndr . reader () Creates an Neuroscence Data Reader object of SpikeGadgets . Documentation for ndr . reader . spikegadgets_rec / spikegadgets_rec doc ndr . reader . spikegadgets_rec t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1. Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK test - test reading using NDR reader underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . spikegadgets_rec / underlying_datatype is inherited from superclass ndr . reader . base","title":"ndr.reader.spikegadgets_rec"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#class-ndrreaderspikegadgets_rec","text":"path --> epoch start & end","title":"CLASS ndr.reader.spikegadgets_rec"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#methods","text":"Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles ndr.reader.spikegadgets_rec/filenamefromepochfiles is a function. getchannelsepoch List the channels that are available on this device for a given epoch getepochprobemap GETEPOCHPROBEMAP returns struct with probe information mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL spikegadgets_rec create a new Neuroscience Data Reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch test test reading using NDR reader underlying_datatype get the underlying data type for a channel in an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#methods-help","text":"canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . spikegadgets_rec / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_BASE_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHFILES , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | Rate of sampling | ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.spikegadgets_rec/epochclock is inherited from superclass ndr.reader.base filenamefromepochfiles - ndr.reader.spikegadgets_rec/filenamefromepochfiles is a function. filename = filenamefromepochfiles(ndr_reader_base_spikegadgets_obj, filename) getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELS ( THEDEV , EPOCHFILES ) EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields : ------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data stored in the channel | ( e . g ., 'analogin' , 'digitalin' , 'image' , 'timestamp' ) getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information name , reference , n - trode , channels EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . spikegadgets_rec . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . spikegadgets_rec . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . spikegadgets_rec . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS ( MYDEV , CHANNELTYPE , CHANNEL , EPOCHFILES , S0 , S1 ) CHANNELTYPE is the type of channel to read 'digital_in' , 'digital_out' , 'analog_in' , 'analog_out' or 'auxiliary' CHANNEL is a vector of the channel numbers to read beginning from 1 if 'etrodeftrode' is channeltype , if channeltype is 'analog_in' channel is an array with the string names of analog channels 'Ain1' through 8 EPOCH is set of files in the epoch DATA is the channel data ( each column contains data from an indvidual channel ) readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . spikegadgets_rec / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE ( DEV , EPOCHFILES , CHANNELTYPE , CHANNEL ) SR is the list of sample rate from specified channels EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . CHANNELTYPE and CHANNEL not used in this case since it is the same for all channels in this device spikegadgets_rec - create a new Neuroscience Data Reader object READER_OBJ = ndr . ndr . reader () Creates an Neuroscence Data Reader object of SpikeGadgets . Documentation for ndr . reader . spikegadgets_rec / spikegadgets_rec doc ndr . reader . spikegadgets_rec t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1 ( NDI_EPOCHSET_OBJ , EPOCHFILES ) EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1. Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndi . time . clocktype objects returned by EPOCHCLOCK . The abstract class always returns {[ NaN NaN ]}. See also : ndi . time . clocktype , EPOCHCLOCK test - test reading using NDR reader underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . spikegadgets_rec / underlying_datatype is inherited from superclass ndr . reader . base","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/tdt_sev.m/","text":"CLASS ndr.reader.tdt_sev \u00b6 NDR_READER_TDT_SEV - Reader class for Tucker Davis Technologies ( TDT ) . sev file This class reads data from TDT . SEV file format . Tucker Davis Technologies : https : // www . tdt . com Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the SEV directory getchannelsepoch List the channels that are available on this TDT mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an tdt_sev Create a new Neuroscience Data Reader object for TDT SEV format underlying_datatype get the underlying data type for a channel in an epoch Methods help \u00b6 canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . tdt_sev / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_TDT_SEV_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.tdt_sev/epochclock is inherited from superclass ndr.reader.base filenamefromepochfiles - Return the file name that corresponds to the SEV directory [ FILENAME ] = FILENAMEFROMEPOCHFILES ( TDT_SEV_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an . SEV data file . FILENAME will be the parent directory where the . SEV files are contained . getchannelsepoch - List the channels that are available on this TDT device for a given set of files CHANNELS = GETCHANNELSEPOCH ( TDT_SEV_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch . CHANNELS is a structure list of all channels with fields : --------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data store in the channel | ( e . g ., 'analog_in' , 'digital_in' , 'image' , 'timestamp' ) mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . tdt_sev . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . tdt_sev . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . tdt_sev . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES ( TDT_SEV_OBJ , CHANNELTYPE , CHANNEL , EPOCH , S0 , S1 ) CHANNELTYPE is the type of channel to read ( single text string , such as 'ai' , 'analog_input' , 'time' ) or a cell array of strings for each channel CHANNEL is a vector of the channel numbers to read , beginning from 1 . EPOCH is the epoch number to read from . DATA will have one column per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . tdt_sev / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channel SR = SAMPLERATE ( TDT_SEV_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels in samples / sec . CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1 ( TDT_SEV_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndr . time . clocktype objects returned by EPOCH_NUMBER . See also : ndr . time . clocktype , EPOCHCLOCK tdt_sev - Create a new Neuroscience Data Reader object for TDT SEV format TDT_SEV_OBJ = TDT_SEV () Creates a Neuroscience Data Reader object of the Tucker Davis Technologies ( TDT ) . SEV file format . Documentation for ndr . reader . tdt_sev / tdt_sev doc ndr . reader . tdt_sev underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . tdt_sev / underlying_datatype is inherited from superclass ndr . reader . base","title":"ndr.reader.tdt_sev"},{"location":"reference/%2Bndr/%2Breader/tdt_sev.m/#class-ndrreadertdt_sev","text":"NDR_READER_TDT_SEV - Reader class for Tucker Davis Technologies ( TDT ) . sev file This class reads data from TDT . SEV file format . Tucker Davis Technologies : https : // www . tdt . com","title":"CLASS ndr.reader.tdt_sev"},{"location":"reference/%2Bndr/%2Breader/tdt_sev.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/tdt_sev.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/tdt_sev.m/#methods","text":"Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the SEV directory getchannelsepoch List the channels that are available on this TDT mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an tdt_sev Create a new Neuroscience Data Reader object for TDT SEV format underlying_datatype get the underlying data type for a channel in an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/tdt_sev.m/#methods-help","text":"canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . tdt_sev / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( NDR_READER_TDT_SEV_OBJ , ... CHANNELPREFIX , CHANNELNUMBERS , EPOCHSTREAMS , EPOCH_SELECT ) Inputs : For a set of CHANNELPREFIX ( cell array of channel prefixes that describe channels for this device ) and CHANNELNUMBER ( array of channel numbers , 1 for each entry in CHANNELPREFIX ), and for a given recording epoch ( specified by EPOCHSTREAMS and EPOCH_SELECT ), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES . EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access , if the file ( s ) has more than one epoch contained . For most devices , EPOCH_SELECT is always 1 . Output : CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . | ------------------------------------------------------------------------------ epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK ( NDR_READER_BASE_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the clock types available for this epoch as a cell array of ndr . time . clocktype objects ( or sub - class members ) . For the generic ndr . reader . base , this returns a single clock type 'dev_local' time '; See also: ndr.time.clocktype Help for ndr.reader.tdt_sev/epochclock is inherited from superclass ndr.reader.base filenamefromepochfiles - Return the file name that corresponds to the SEV directory [ FILENAME ] = FILENAMEFROMEPOCHFILES ( TDT_SEV_OBJ , FILENAME_ARRAY ) Examines the list of filenames in FILENAME_ARRAY ( cell array of full path file strings ) and determines which one is an . SEV data file . FILENAME will be the parent directory where the . SEV files are contained . getchannelsepoch - List the channels that are available on this TDT device for a given set of files CHANNELS = GETCHANNELSEPOCH ( TDT_SEV_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the channel list of acquired channels in this epoch . CHANNELS is a structure list of all channels with fields : --------------------------------------------------------- 'name' | The name of the channel ( e . g ., 'ai1' ) 'type' | The type of data store in the channel | ( e . g ., 'analog_in' , 'digital_in' , 'image' , 'timestamp' ) mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . tdt_sev . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . tdt_sev . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . tdt_sev . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES ( TDT_SEV_OBJ , CHANNELTYPE , CHANNEL , EPOCH , S0 , S1 ) CHANNELTYPE is the type of channel to read ( single text string , such as 'ai' , 'analog_input' , 'time' ) or a cell array of strings for each channel CHANNEL is a vector of the channel numbers to read , beginning from 1 . EPOCH is the epoch number to read from . DATA will have one column per channel . readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . tdt_sev / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channel SR = SAMPLERATE ( TDT_SEV_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) SR is an array of sample rates from the specified channels in samples / sec . CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL . If CHANNELTYPE is a single string , then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL . t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1 ( TDT_SEV_OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Return the beginning ( t0 ) and end ( t1 ) times of the epoch EPOCH_NUMBER in the same units as the ndr . time . clocktype objects returned by EPOCH_NUMBER . See also : ndr . time . clocktype , EPOCHCLOCK tdt_sev - Create a new Neuroscience Data Reader object for TDT SEV format TDT_SEV_OBJ = TDT_SEV () Creates a Neuroscience Data Reader object of the Tucker Davis Technologies ( TDT ) . SEV file format . Documentation for ndr . reader . tdt_sev / tdt_sev doc ndr . reader . tdt_sev underlying_datatype - get the underlying data type for a channel in an epoch [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( NDR_READER_OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Return the underlying datatype for the requested channel . DATATYPE is a type that is suitable for passing to FREAD or FWRITE ( e . g ., 'float64' , 'uint16' , etc . See help fread . ) P is a matrix of polynomials that converts between the double data that is returned by READCHANNEL . RETURNED_DATA = ( RAW_DATA + P ( i , 1 )) * P ( i , 2 ) + ( RAW_DATA + P ( i , 1 )) * P ( i , 3 ) ... There is one row of P for each entry of CHANNEL . DATASIZE is the sample size in bits . CHANNELTYPE must be a string . It is assumed that that CHANNELTYPE applies to every entry of CHANNEL . Help for ndr . reader . tdt_sev / underlying_datatype is inherited from superclass ndr . reader . base","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/whitematter.m/","text":"CLASS ndr.reader.whitematter \u00b6 NDR_READER_WHITEMATTER - Reader class for WhiteMatter LLC ( WM ) binary files . This class reads data from WhiteMatter LLC . bin files where metadata is embedded in the filename . It assumes an 8 - byte header followed by interleaved int16 data samples . It relies on the helper function ndr . format . whitematter . header to parse filenames and whitematter . read ( or ndr . format . binarymatrix . read ) to read the data . Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels Convert public channel info to internal representation. epochclock Return the ndr.time.clocktype objects for an epoch. filenamefromepochfiles Return the .bin filename from a list. getchannelsepoch List the channels available for a given epoch. mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples Read data samples for specified channels. readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channels. t0_t1 Return the beginning and end epoch times for an epoch. underlying_datatype Get the native data type for channels. whitematter Create a new NDR reader object for WhiteMatter LLC format. Methods help \u00b6 canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . whitematter / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - Convert public channel info to internal representation. CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( OBJ , CHANNELPREFIX , CHANNELNUMBER , EPOCHSTREAMS , EPOCH_SELECT ) Converts requested DAQ channels ( e . g ., prefix 'ai' , numbers [ 1 5 10 ] ) into the internal structure format needed by readchannels_epochsamples . For this reader , the internal representation is straightforward as channels are simply referenced by their 1 - based index . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . Output CHANNELSTRUCT fields : internal_type : Type used internally ( 'analog_in' , 'time' ) internal_number : Channel number used internally ( 1 - based index ) internal_channelname : Original channel name ( 'ai1' , 't1' ) ndr_type : Standard NDR type ( 'analog_in' , 'time' ) samplerate : Sampling rate for the channel See also : ndr . reader . base / daqchannels2internalchannels epochclock - Return the ndr.time.clocktype objects for an epoch. EC = EPOCHCLOCK ( OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the clock types available for this epoch . For WhiteMatter files , this is assumed to be only 'dev_local_time' , as the absolute time reference is derived from the filename , not embedded timing signals within the data stream relative to an external clock . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . See also : ndr . time . clocktype , ndr . reader . base / epochclock filenamefromepochfiles - Return the .bin filename from a list. FILENAME = FILENAMEFROMEPOCHFILES ( OBJ , FILENAME_ARRAY ) Identifies the WhiteMatter LLC data file ( expected extension '.bin' and starting with 'HSW' , case - insensitive ) from the cell array of full path filenames FILENAME_ARRAY . Throws an error if zero or more than one matching file is found . See also : ndr . reader . base / filenamefromepochfiles getchannelsepoch - List the channels available for a given epoch. CHANNELS = GETCHANNELSEPOCH ( OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns a structure list of channels available in the epoch . Channel information ( number of channels ) is read from the header derived from the filename . All data channels are assumed to be 'analog_in' type . A single 'time' channel is also reported . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . Output CHANNELS structure fields : 'name' : Channel name ( e . g ., 'ai1' , 't1' ) 'type' : Channel type ( e . g ., 'analog_in' , 'time' ) 'time_channel' : Index of the associated time channel ( always 1 ) See also : ndr . format . whitematter . header , ndr . reader . base / getchannelsepoch mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . whitematter . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . whitematter . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . whitematter . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - Read data samples for specified channels. DATA = READCHANNELS_EPOCHSAMPLES ( OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , S0 , S1 ) Reads data for the given CHANNELTYPE and CHANNEL numbers between sample S0 and sample S1 ( inclusive , 1 - based ) . Uses the ndr . format . whitematter . read function to perform the reading . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . S0 , S1 are the start and end sample numbers . Returns DATA matrix ( Samples x Channels ) . For 'time' channeltype , returns a column vector of time stamps . See also : ndr . format . whitematter . read , ndr . reader . base / readchannels_epochsamples readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . whitematter / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channels. SR = SAMPLERATE ( OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Returns the sampling rate in Hz for the specified channels . For WhiteMatter files , the sampling rate is constant across all analog channels and is read from the header ( filename ) . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . CHANNELTYPE is the type ( 'analog_in' , 'time' , etc . ) . CHANNEL is the vector of channel numbers . See also : ndr . format . whitematter . header , ndr . reader . base / samplerate t0_t1 - Return the beginning and end epoch times for an epoch. T0T1 = T0_T1 ( OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the beginning ( t0 ) and end ( t1 ) times of the epoch in seconds , relative to the start of the recording ( t0 = 0 ) . The end time is determined from the file size and header info . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . See also : ndr . format . whitematter . header , ndr . reader . base / t0_t1 underlying_datatype - Get the native data type for channels. [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Returns the underlying data type as stored in the file . For WhiteMatter files , analog data is ' int16 ' . Time is ' double ' . The polynomial P describes scaling : P = [ OFFSET SCALE ]. Since this reader returns raw int16 , P is [ 0 1 ]. EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ). CHANNELTYPE is the type ( ' analog_in ' , ' time ' , etc .). CHANNEL is the vector of channel numbers . See also : ndr . reader . base / underlying_datatype whitematter - Create a new NDR reader object for WhiteMatter LLC format. OBJ = ndr . reader . whitematter () Creates a Neuroscience Data Reader object for the WhiteMatter LLC binary file format . See also : ndr . reader . base Documentation for ndr . reader . whitematter / whitematter doc ndr . reader . whitematter","title":"ndr.reader.whitematter"},{"location":"reference/%2Bndr/%2Breader/whitematter.m/#class-ndrreaderwhitematter","text":"NDR_READER_WHITEMATTER - Reader class for WhiteMatter LLC ( WM ) binary files . This class reads data from WhiteMatter LLC . bin files where metadata is embedded in the filename . It assumes an 8 - byte header followed by interleaved int16 data samples . It relies on the helper function ndr . format . whitematter . header to parse filenames and whitematter . read ( or ndr . format . binarymatrix . read ) to read the data .","title":"CLASS ndr.reader.whitematter"},{"location":"reference/%2Bndr/%2Breader/whitematter.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/whitematter.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/whitematter.m/#methods","text":"Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels Convert public channel info to internal representation. epochclock Return the ndr.time.clocktype objects for an epoch. filenamefromepochfiles Return the .bin filename from a list. getchannelsepoch List the channels available for a given epoch. mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples Read data samples for specified channels. readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channels. t0_t1 Return the beginning and end epoch times for an epoch. underlying_datatype Get the native data type for channels. whitematter Create a new NDR reader object for WhiteMatter LLC format.","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/whitematter.m/#methods-help","text":"canbereadtogether - can the channels in a channel struct be read in a single function call? [ B , ERRORMSG ] = CANBEREADTOGETHER ( NDR_READER_BASE_OBJ , CHANNELSTRUCT ) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call . If they cannot be read together , a description is provided in ERRORMSG . In the abstract class , this returns 1 if all of the samplerate values are the same and none are NaNs . CHANNELSTRUCT is a structure with the following fields : ------------------------------------------------------------------------------ | Parameter | Description | | ----------------------------- | ---------------------------------------------- | | internal_type | Internal channel type ; the type of channel as | | | it is known to the device . | | internal_number | Internal channel number , as known to device | | internal_channelname | Internal channel name , as known to the device | | ndr_type | The NDR type of channel ; should be one of the | | | types returned by | | | ndr . reader . base . mfdaq_type | | samplerate | The sampling rate of this channel , or NaN if | | | not applicable . ------------------------------------------------------------------------------ in the abstract class , this returns 1 if all the samplerates are the same and none are NaNs Help for ndr . reader . whitematter / canbereadtogether is inherited from superclass ndr . reader . base daqchannels2internalchannels - Convert public channel info to internal representation. CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS ( OBJ , CHANNELPREFIX , CHANNELNUMBER , EPOCHSTREAMS , EPOCH_SELECT ) Converts requested DAQ channels ( e . g ., prefix 'ai' , numbers [ 1 5 10 ] ) into the internal structure format needed by readchannels_epochsamples . For this reader , the internal representation is straightforward as channels are simply referenced by their 1 - based index . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . Output CHANNELSTRUCT fields : internal_type : Type used internally ( 'analog_in' , 'time' ) internal_number : Channel number used internally ( 1 - based index ) internal_channelname : Original channel name ( 'ai1' , 't1' ) ndr_type : Standard NDR type ( 'analog_in' , 'time' ) samplerate : Sampling rate for the channel See also : ndr . reader . base / daqchannels2internalchannels epochclock - Return the ndr.time.clocktype objects for an epoch. EC = EPOCHCLOCK ( OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the clock types available for this epoch . For WhiteMatter files , this is assumed to be only 'dev_local_time' , as the absolute time reference is derived from the filename , not embedded timing signals within the data stream relative to an external clock . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . See also : ndr . time . clocktype , ndr . reader . base / epochclock filenamefromepochfiles - Return the .bin filename from a list. FILENAME = FILENAMEFROMEPOCHFILES ( OBJ , FILENAME_ARRAY ) Identifies the WhiteMatter LLC data file ( expected extension '.bin' and starting with 'HSW' , case - insensitive ) from the cell array of full path filenames FILENAME_ARRAY . Throws an error if zero or more than one matching file is found . See also : ndr . reader . base / filenamefromepochfiles getchannelsepoch - List the channels available for a given epoch. CHANNELS = GETCHANNELSEPOCH ( OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns a structure list of channels available in the epoch . Channel information ( number of channels ) is read from the header derived from the filename . All data channels are assumed to be 'analog_in' type . A single 'time' channel is also reported . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . Output CHANNELS structure fields : 'name' : Channel name ( e . g ., 'ai1' , 't1' ) 'type' : Channel type ( e . g ., 'analog_in' , 'time' ) 'time_channel' : Index of the associated time channel ( always 1 ) See also : ndr . format . whitematter . header , ndr . reader . base / getchannelsepoch mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi . daq . system . mfdaq objects Returns a cell array of strings of supported channels of the ndi . daq . system . mfdaq class . These are the following : Channel type : | Description : ------------------------------------------------------------- analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also : ndi . daq . system . mfdaq / MFDAQ_TYPE Help for ndr . reader . whitematter . mfdaq_channeltypes is inherited from superclass ndr . reader . base mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX ( CHANNELTYPE ) Produces the channel name prefix for a given CHANNELTYPE . Channel type : | MFDAQ_PREFIX : --------------------------------------------------------- 'analog_in' , 'ai' | 'ai' 'analog_out' , 'ao' | 'ao' 'digital_in' , 'di' | 'di' 'digital_out' , 'do' | 'do' 'time' , 'timestamp' , 't' | 't' 'auxiliary' , 'aux' , 'ax' , | 'ax' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event' , 'de' , | 'dep' 'digital_in_event_pos' , 'dep' | 'digital_in_event_neg' , 'den' | 'den' 'digital_in_mark' , 'dimp' , | 'dimp' 'digital_in_mark_pos' , 'dim' | 'digital_in_mark_neg' , 'dimn' | 'dimn' See also : ndi . daq . system . mfdaq/MFDAQ_TYPE Help for ndr . reader . whitematter . mfdaq_prefix is inherited from superclass ndr . reader . base mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE ( CHANNELTYPE ) Produces the preferred long channel type name for a given CHANNELTYPE . Channel type : | MFDAQ_TYPE : --------------------------------------------------------- 'analog_in' , 'ai' | 'analog_in' 'analog_out' , 'ao' | 'analog_out' 'digital_in' , 'di' | 'digital_in' 'digital_out' , 'do' | 'digital_out' 'time' , 'timestamp' , 't' | 'time' 'auxiliary' , 'aux' , 'ax' , | 'auxiliary' 'auxiliary_in' | 'mark' , 'marker' , or 'mk' | 'mark' 'event' or 'e' | 'event' See also : ndi . daq . system . mfdaq / MFDAQ_PREFIX Help for ndr . reader . whitematter . mfdaq_type is inherited from superclass ndr . reader . base readchannels_epochsamples - Read data samples for specified channels. DATA = READCHANNELS_EPOCHSAMPLES ( OBJ , CHANNELTYPE , CHANNEL , EPOCHSTREAMS , EPOCH_SELECT , S0 , S1 ) Reads data for the given CHANNELTYPE and CHANNEL numbers between sample S0 and sample S1 ( inclusive , 1 - based ) . Uses the ndr . format . whitematter . read function to perform the reading . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . S0 , S1 are the start and end sample numbers . Returns DATA matrix ( Samples x Channels ) . For 'time' channeltype , returns a column vector of time stamps . See also : ndr . format . whitematter . read , ndr . reader . base / readchannels_epochsamples readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [ DATA ] = READEVENTS_EPOCHSAMPLES_NATIVE ( NDR_READER_BASE_OBJ , CHANNELTYPE , CHANNEL , EPOCHFILES , T0 , T1 ) CHANNELTYPE is the type of channel to read ( 'event' , 'marker' , etc ). It must be a string ( not a cell array of strings ). CHANNEL is a vector with the identity of the channel ( s ) to be read . EPOCH is the epoch number or epochID DATA is a two - column vector ; the first column has the time of the event . The second column indicates the marker code . In the case of 'events' , this is just 1. If more than one channel is requested , DATA is returned as a cell array , one entry per channel . TIMEREF is an ndi . time . timereference with the NDI_CLOCK of the device , referring to epoch N at time 0 as the reference . Help for ndr . reader . whitematter / readevents_epochsamples_native is inherited from superclass ndr . reader . base samplerate - Get the sample rate for specific channels. SR = SAMPLERATE ( OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Returns the sampling rate in Hz for the specified channels . For WhiteMatter files , the sampling rate is constant across all analog channels and is read from the header ( filename ) . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . CHANNELTYPE is the type ( 'analog_in' , 'time' , etc . ) . CHANNEL is the vector of channel numbers . See also : ndr . format . whitematter . header , ndr . reader . base / samplerate t0_t1 - Return the beginning and end epoch times for an epoch. T0T1 = T0_T1 ( OBJ , EPOCHSTREAMS , EPOCH_SELECT ) Returns the beginning ( t0 ) and end ( t1 ) times of the epoch in seconds , relative to the start of the recording ( t0 = 0 ) . The end time is determined from the file size and header info . EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ) . See also : ndr . format . whitematter . header , ndr . reader . base / t0_t1 underlying_datatype - Get the native data type for channels. [ DATATYPE , P , DATASIZE ] = UNDERLYING_DATATYPE ( OBJ , EPOCHSTREAMS , EPOCH_SELECT , CHANNELTYPE , CHANNEL ) Returns the underlying data type as stored in the file . For WhiteMatter files , analog data is ' int16 ' . Time is ' double ' . The polynomial P describes scaling : P = [ OFFSET SCALE ]. Since this reader returns raw int16 , P is [ 0 1 ]. EPOCHSTREAMS is a cell array of filenames for the epoch . EPOCH_SELECT is the epoch number ( must be 1 for this format ). CHANNELTYPE is the type ( ' analog_in ' , ' time ' , etc .). CHANNEL is the vector of channel numbers . See also : ndr . reader . base / underlying_datatype whitematter - Create a new NDR reader object for WhiteMatter LLC format. OBJ = ndr . reader . whitematter () Creates a Neuroscience Data Reader object for the WhiteMatter LLC binary file format . See also : ndr . reader . base Documentation for ndr . reader . whitematter / whitematter doc ndr . reader . whitematter","title":"Methods help"},{"location":"reference/%2Bndr/%2Bstring/channelstring2channels.m/","text":"ndr.string.channelstring2channels \u00b6 ndr . string . channelstring2channels - convert a channel string to an array of channel prefiex and numbers [ CHANNELNAMEPREFIX , CHANNELNUMBER ] = ... ndr . string . channelstring2channels ( CHANNELSTRING ) Given a CHANNELSTRING , returns a cell array of channel prefixes and an array of channel numbers that correspond to the CHANNELSTRING . A CHANNELSTRING is a means of specifying channels that have prefixes and numbers . It includes a sequence of letters , followed by numbers to specify the channels . One can indicate a sequential range of channels by using a dash ( '-' ) and one can enumerate individual channels with a comma ( ',' ) . Different channel prefixes can be specified by placing a plus ( '+' ) between sets of channels . Examples : [ cp , cn ] = ndr . string . channelstring2channels ( 'a1,3-5,2' ) % cp == { 'a' , 'a' , 'a' , 'a' , 'a' } ' % cn == [ 1 3 4 5 2 ] ' [ cp , cn ] = ndr . string . channelstring2channels ( 'ai1-3+b2-4' ) % cp == { 'ai' , 'ai' , 'ai' , 'b' , 'b' , 'b' } ' % cn == [ 1 2 3 2 3 4 ] '","title":"ndr.string.channelstring2channels"},{"location":"reference/%2Bndr/%2Bstring/channelstring2channels.m/#ndrstringchannelstring2channels","text":"ndr . string . channelstring2channels - convert a channel string to an array of channel prefiex and numbers [ CHANNELNAMEPREFIX , CHANNELNUMBER ] = ... ndr . string . channelstring2channels ( CHANNELSTRING ) Given a CHANNELSTRING , returns a cell array of channel prefixes and an array of channel numbers that correspond to the CHANNELSTRING . A CHANNELSTRING is a means of specifying channels that have prefixes and numbers . It includes a sequence of letters , followed by numbers to specify the channels . One can indicate a sequential range of channels by using a dash ( '-' ) and one can enumerate individual channels with a comma ( ',' ) . Different channel prefixes can be specified by placing a plus ( '+' ) between sets of channels . Examples : [ cp , cn ] = ndr . string . channelstring2channels ( 'a1,3-5,2' ) % cp == { 'a' , 'a' , 'a' , 'a' , 'a' } ' % cn == [ 1 3 4 5 2 ] ' [ cp , cn ] = ndr . string . channelstring2channels ( 'ai1-3+b2-4' ) % cp == { 'ai' , 'ai' , 'ai' , 'b' , 'b' , 'b' } ' % cn == [ 1 2 3 2 3 4 ] '","title":"ndr.string.channelstring2channels"},{"location":"reference/%2Bndr/%2Bstring/intseq2str.m/","text":"ndr.string.intseq2str \u00b6 INTSEQ2STR - Convert an array of integers to a compact string , maintaining sequence STR = ndr . string . intseq2str ( A ) Converts the sequence of integers in array A to a compact , human - readable sequence with '-' indicating inclusion of a series of numbers and commas separating discontinuous numbers . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : A = [ 1 2 3 7 10 ] str = ndr . string . intseq2str ( A ) % str == '1-3,7,10' See also : INT2STR , ndr . string . str2intseq","title":"ndr.string.intseq2str"},{"location":"reference/%2Bndr/%2Bstring/intseq2str.m/#ndrstringintseq2str","text":"INTSEQ2STR - Convert an array of integers to a compact string , maintaining sequence STR = ndr . string . intseq2str ( A ) Converts the sequence of integers in array A to a compact , human - readable sequence with '-' indicating inclusion of a series of numbers and commas separating discontinuous numbers . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : A = [ 1 2 3 7 10 ] str = ndr . string . intseq2str ( A ) % str == '1-3,7,10' See also : INT2STR , ndr . string . str2intseq","title":"ndr.string.intseq2str"},{"location":"reference/%2Bndr/%2Bstring/str2intseq.m/","text":"ndr.string.str2intseq \u00b6 STR2INTSEQ - Recover a sequence of integers from a string A = ndr . string . str2intseq ( STR ) Given a string that specifies a list of integers , with a dash ( '-' ) indicating a run of sequential integers in order , and a comma ( ',' ) indicating integers that are not ( necessarily ) sequential . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : str = '1-3,7,10,12' ; a = ndr . string . str2intseq ( str ); % a == [1 2 3 7 10 12]","title":"ndr.string.str2intseq"},{"location":"reference/%2Bndr/%2Bstring/str2intseq.m/#ndrstringstr2intseq","text":"STR2INTSEQ - Recover a sequence of integers from a string A = ndr . string . str2intseq ( STR ) Given a string that specifies a list of integers , with a dash ( '-' ) indicating a run of sequential integers in order , and a comma ( ',' ) indicating integers that are not ( necessarily ) sequential . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : str = '1-3,7,10,12' ; a = ndr . string . str2intseq ( str ); % a == [1 2 3 7 10 12]","title":"ndr.string.str2intseq"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bbinarymatrix/maketestfile.m/","text":"ndr.test.format.binarymatrix.maketestfile \u00b6 MAKETESTFILE - make a binary matrix test file maketestfile() Creates a binary file with uint32 numbers from 1..100. The data are written using little-endian formatting ('ieee-le'). The file is placed at ndr.test.format.binarymatrix.testfile.bin.","title":"ndr.test.format.binarymatrix.maketestfile"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bbinarymatrix/maketestfile.m/#ndrtestformatbinarymatrixmaketestfile","text":"MAKETESTFILE - make a binary matrix test file maketestfile() Creates a binary file with uint32 numbers from 1..100. The data are written using little-endian formatting ('ieee-le'). The file is placed at ndr.test.format.binarymatrix.testfile.bin.","title":"ndr.test.format.binarymatrix.maketestfile"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bbinarymatrix/testread.m/","text":"ndr.test.format.binarymatrix.testread \u00b6 TESTREAD - test reading binarymatix format B = TESTREAD () Reads information from the test file ndr . test . format . binarymatrix . testfile . bin . If any test fails , an error with an informative error message is given . Otherwise B is 1 .","title":"ndr.test.format.binarymatrix.testread"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bbinarymatrix/testread.m/#ndrtestformatbinarymatrixtestread","text":"TESTREAD - test reading binarymatix format B = TESTREAD () Reads information from the test file ndr . test . format . binarymatrix . testfile . bin . If any test fails , an error with an informative error message is given . Otherwise B is 1 .","title":"ndr.test.format.binarymatrix.testread"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bced/test.m/","text":"ndr.test.format.ced.test \u00b6 ndr.test.format.ced.test- test reading from CED format","title":"ndr.test.format.ced.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bced/test.m/#ndrtestformatcedtest","text":"ndr.test.format.ced.test- test reading from CED format","title":"ndr.test.format.ced.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bintan_rhd/test.m/","text":"ndr.test.format.intan_rhd.test \u00b6 ndr.test.format.intan_rhd.test - test reading from Intan RHD format","title":"ndr.test.format.intan_rhd.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bintan_rhd/test.m/#ndrtestformatintan_rhdtest","text":"ndr.test.format.intan_rhd.test - test reading from Intan RHD format","title":"ndr.test.format.intan_rhd.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bspikegadgets/test.m/","text":"ndr.test.format.spikegadgets.test \u00b6 ndr.test.format.spikegadgets.test - test reading from SpikeGadgets format","title":"ndr.test.format.spikegadgets.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bspikegadgets/test.m/#ndrtestformatspikegadgetstest","text":"ndr.test.format.spikegadgets.test - test reading from SpikeGadgets format","title":"ndr.test.format.spikegadgets.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Baxon_abf/readertest.m/","text":"ndr.test.reader.axon_abf.readertest \u00b6 READERTEST - Test the functionality of the axon_abf ndr.reader.read function Setup as before","title":"ndr.test.reader.axon_abf.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Baxon_abf/readertest.m/#ndrtestreaderaxon_abfreadertest","text":"READERTEST - Test the functionality of the axon_abf ndr.reader.read function Setup as before","title":"ndr.test.reader.axon_abf.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Baxon_abf/test.m/","text":"ndr.test.reader.axon_abf.test \u00b6 ndr.test.reader.axon_abf.test - Test reading using Neuroscience Data Reader with Axon ABF format See also: ndr.reader.axon_abf","title":"ndr.test.reader.axon_abf.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Baxon_abf/test.m/#ndrtestreaderaxon_abftest","text":"ndr.test.reader.axon_abf.test - Test reading using Neuroscience Data Reader with Axon ABF format See also: ndr.reader.axon_abf","title":"ndr.test.reader.axon_abf.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bbjg/readertest.m/","text":"ndr.test.reader.bjg.readertest \u00b6 READERTEST - Test the functionality of the axon_abf ndr.reader.read function Setup as before","title":"ndr.test.reader.bjg.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bbjg/readertest.m/#ndrtestreaderbjgreadertest","text":"READERTEST - Test the functionality of the axon_abf ndr.reader.read function Setup as before","title":"ndr.test.reader.bjg.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bbjg/test.m/","text":"ndr.test.reader.bjg.test \u00b6 ndr.test.reader.bjg.test - Test reading using Neuroscience Data Readers using BJG bin format See also: ndr.reader.bjg","title":"ndr.test.reader.bjg.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bbjg/test.m/#ndrtestreaderbjgtest","text":"ndr.test.reader.bjg.test - Test reading using Neuroscience Data Readers using BJG bin format See also: ndr.reader.bjg","title":"ndr.test.reader.bjg.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bced_smr/automatedTest.m/","text":"ndr.test.reader.ced_smr.automatedTest \u00b6 ndr.test.reader.ced_smr.automatedTest is a function. tests = ndr.test.reader.ced_smr.automatedTest","title":"ndr.test.reader.ced_smr.automatedTest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bced_smr/automatedTest.m/#ndrtestreaderced_smrautomatedtest","text":"ndr.test.reader.ced_smr.automatedTest is a function. tests = ndr.test.reader.ced_smr.automatedTest","title":"ndr.test.reader.ced_smr.automatedTest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bced_smr/readertest.m/","text":"ndr.test.reader.ced_smr.readertest \u00b6 READERTEST - test the functionality of the CED ndr.reader.read function","title":"ndr.test.reader.ced_smr.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bced_smr/readertest.m/#ndrtestreaderced_smrreadertest","text":"READERTEST - test the functionality of the CED ndr.reader.read function","title":"ndr.test.reader.ced_smr.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bced_smr/test.m/","text":"ndr.test.reader.ced_smr.test \u00b6 ndr.test.reader.ced_smr.test- test reading using NDR reader with CED SOMSMR format","title":"ndr.test.reader.ced_smr.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bced_smr/test.m/#ndrtestreaderced_smrtest","text":"ndr.test.reader.ced_smr.test- test reading using NDR reader with CED SOMSMR format","title":"ndr.test.reader.ced_smr.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bintan_rhd/readertest.m/","text":"ndr.test.reader.intan_rhd.readertest \u00b6 READERTEST - Test the functionality of the Intan ndr.reader.read function Setup as before","title":"ndr.test.reader.intan_rhd.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bintan_rhd/readertest.m/#ndrtestreaderintan_rhdreadertest","text":"READERTEST - Test the functionality of the Intan ndr.reader.read function Setup as before","title":"ndr.test.reader.intan_rhd.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bintan_rhd/test.m/","text":"ndr.test.reader.intan_rhd.test \u00b6 ndr.test.reader.intan_rhd.test - Test reading using Neuroscience Data Reader with Intan Technologies .RHD file format See also: ndr.reader.intan_rhd","title":"ndr.test.reader.intan_rhd.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bintan_rhd/test.m/#ndrtestreaderintan_rhdtest","text":"ndr.test.reader.intan_rhd.test - Test reading using Neuroscience Data Reader with Intan Technologies .RHD file format See also: ndr.reader.intan_rhd","title":"ndr.test.reader.intan_rhd.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bneo/automatedTest.m/","text":"ndr.test.reader.neo.automatedTest \u00b6 ndr.test.reader.neo.automatedTest is a function. tests = ndr.test.reader.neo.automatedTest","title":"ndr.test.reader.neo.automatedTest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bneo/automatedTest.m/#ndrtestreaderneoautomatedtest","text":"ndr.test.reader.neo.automatedTest is a function. tests = ndr.test.reader.neo.automatedTest","title":"ndr.test.reader.neo.automatedTest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bspikegadgets_rec/readertest.m/","text":"ndr.test.reader.spikegadgets_rec.readertest \u00b6 ndr.test.reader.spikegadgets_rec.readertest - test reading using NDR reader","title":"ndr.test.reader.spikegadgets_rec.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bspikegadgets_rec/readertest.m/#ndrtestreaderspikegadgets_recreadertest","text":"ndr.test.reader.spikegadgets_rec.readertest - test reading using NDR reader","title":"ndr.test.reader.spikegadgets_rec.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bspikegadgets_rec/test.m/","text":"ndr.test.reader.spikegadgets_rec.test \u00b6 ndr.test.reader.spikegadgets_rec.test- test reading using NDR reader with spikegadgets_rec format","title":"ndr.test.reader.spikegadgets_rec.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bspikegadgets_rec/test.m/#ndrtestreaderspikegadgets_rectest","text":"ndr.test.reader.spikegadgets_rec.test- test reading using NDR reader with spikegadgets_rec format","title":"ndr.test.reader.spikegadgets_rec.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Btdt_sev/readertest.m/","text":"ndr.test.reader.tdt_sev.readertest \u00b6 READERTEST - Test the functionality of the tdt_sev ndr.reader.read function Setup as before","title":"ndr.test.reader.tdt_sev.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Btdt_sev/readertest.m/#ndrtestreadertdt_sevreadertest","text":"READERTEST - Test the functionality of the tdt_sev ndr.reader.read function Setup as before","title":"ndr.test.reader.tdt_sev.readertest"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Btdt_sev/test.m/","text":"ndr.test.reader.tdt_sev.test \u00b6 ndr.test.reader.tdt_sev.test - Test reading using Neuroscience Data Reader with TDT SEV format See also: ndr.reader.tdt_sev","title":"ndr.test.reader.tdt_sev.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Btdt_sev/test.m/#ndrtestreadertdt_sevtest","text":"ndr.test.reader.tdt_sev.test - Test reading using Neuroscience Data Reader with TDT SEV format See also: ndr.reader.tdt_sev","title":"ndr.test.reader.tdt_sev.test"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/","text":"CLASS ndr.time.clocktype \u00b6 CLOCKTYPE - a class for specifying a clock type in the NDR framework Superclasses \u00b6 none Properties \u00b6 Property Description type the ndr_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time' Methods \u00b6 Method Description clocktype Creates a new ndr.time.clocktype object eq are two ndr.time.clocktype objects equal? ndr_clocktype2char produce the NDR_CLOCKTOP's type as a string ne are two ndr.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndr.time.clocktype Methods help \u00b6 clocktype - Creates a new ndr.time.clocktype object OBJ = ndr . time . clocktype ( TYPE ) Creates a new ndr . time . clocktype object . TYPE can be any of the following strings ( with description ) : TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time ( within 0 . 1 ms ) 'approx_utc' | Universal coordinated time ( within 5 seconds ) 'exp_global_time' | Experiment global time ( within 0 . 1 ms ) 'approx_exp_global_time' | Experiment global time ( within 5 s ) 'dev_global_time' | A device keeps its own global time ( within 0 . 1 ms ) | ( that is , it knows its own clock across recording epochs ) 'approx_dev_global_time' | A device keeps its own global time ( within 5 s ) | ( that is , it knows its own clock across recording epochs ) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device . Documentation for ndr . time . clocktype / clocktype doc ndr . time . clocktype eq - are two ndr.time.clocktype objects equal? B = EQ ( NDS_CLOCK_OBJ_A , NDR_CLOCKTYPE_OBJ_B ) Compares two NDR_CLOCKTYPE_objects and returns 1 if they refer to the same clock type . ndr_clocktype2char - produce the NDR_CLOCKTOP's type as a string STR = NDR_CLOCKTYPE2CHAR ( NDR_CLOCKTYPE_OBJ ) Return a string STR equal to the ndr . time . clocktype object 's type parameter. ne - are two ndr.time.clocktype objects not equal? B = EQ ( NDS_CLOCK_OBJ_A , NDR_CLOCKTYPE_OBJ_B ) Compares two NDR_CLOCKTYPE_objects and returns 0 if they refer to the same clock type . needsepoch - does this clocktype need an epoch for full description? B = NEEDSEPOCH ( NDR_CLOCKTYPE_OBJ ) Does this ndr . time . clocktype object need an epoch in order to specify time ? Returns 1 for 'dev_local_time' , 0 otherwise . setclocktype - Set the type of an ndr.time.clocktype NDR_CLOCKTYPE_OBJ = SETCLOCKTYPE ( NDR_CLOCKTYPE_OBJ , TYPE ) Sets the TYPE property of an ndr . time . clocktype object NDR_CLOCKTYPE_OBJ . Valid values for the TYPE string are as follows : TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time ( within 0 . 1 ms ) 'approx_utc' | Universal coordinated time ( within 5 seconds ) 'exp_global_time' | Experiment global time ( within 0 . 1 ms ) 'approx_exp_global_time' | Experiment global time ( within 5 s ) 'dev_global_time' | A device keeps its own global time ( within 0 . 1 ms ) | ( that is , it knows its own clock across recording epochs ) 'approx_dev_global_time' | A device keeps its own global time ( within 5 s ) | ( that is , it knows its own clock across recording epochs ) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device .","title":"ndr.time.clocktype"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#class-ndrtimeclocktype","text":"CLOCKTYPE - a class for specifying a clock type in the NDR framework","title":"CLASS ndr.time.clocktype"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#properties","text":"Property Description type the ndr_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time'","title":"Properties"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#methods","text":"Method Description clocktype Creates a new ndr.time.clocktype object eq are two ndr.time.clocktype objects equal? ndr_clocktype2char produce the NDR_CLOCKTOP's type as a string ne are two ndr.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndr.time.clocktype","title":"Methods"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#methods-help","text":"clocktype - Creates a new ndr.time.clocktype object OBJ = ndr . time . clocktype ( TYPE ) Creates a new ndr . time . clocktype object . TYPE can be any of the following strings ( with description ) : TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time ( within 0 . 1 ms ) 'approx_utc' | Universal coordinated time ( within 5 seconds ) 'exp_global_time' | Experiment global time ( within 0 . 1 ms ) 'approx_exp_global_time' | Experiment global time ( within 5 s ) 'dev_global_time' | A device keeps its own global time ( within 0 . 1 ms ) | ( that is , it knows its own clock across recording epochs ) 'approx_dev_global_time' | A device keeps its own global time ( within 5 s ) | ( that is , it knows its own clock across recording epochs ) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device . Documentation for ndr . time . clocktype / clocktype doc ndr . time . clocktype eq - are two ndr.time.clocktype objects equal? B = EQ ( NDS_CLOCK_OBJ_A , NDR_CLOCKTYPE_OBJ_B ) Compares two NDR_CLOCKTYPE_objects and returns 1 if they refer to the same clock type . ndr_clocktype2char - produce the NDR_CLOCKTOP's type as a string STR = NDR_CLOCKTYPE2CHAR ( NDR_CLOCKTYPE_OBJ ) Return a string STR equal to the ndr . time . clocktype object 's type parameter. ne - are two ndr.time.clocktype objects not equal? B = EQ ( NDS_CLOCK_OBJ_A , NDR_CLOCKTYPE_OBJ_B ) Compares two NDR_CLOCKTYPE_objects and returns 0 if they refer to the same clock type . needsepoch - does this clocktype need an epoch for full description? B = NEEDSEPOCH ( NDR_CLOCKTYPE_OBJ ) Does this ndr . time . clocktype object need an epoch in order to specify time ? Returns 1 for 'dev_local_time' , 0 otherwise . setclocktype - Set the type of an ndr.time.clocktype NDR_CLOCKTYPE_OBJ = SETCLOCKTYPE ( NDR_CLOCKTYPE_OBJ , TYPE ) Sets the TYPE property of an ndr . time . clocktype object NDR_CLOCKTYPE_OBJ . Valid values for the TYPE string are as follows : TYPE string | Description ------------------------------------------------------------------------------ 'utc' | Universal coordinated time ( within 0 . 1 ms ) 'approx_utc' | Universal coordinated time ( within 5 seconds ) 'exp_global_time' | Experiment global time ( within 0 . 1 ms ) 'approx_exp_global_time' | Experiment global time ( within 5 s ) 'dev_global_time' | A device keeps its own global time ( within 0 . 1 ms ) | ( that is , it knows its own clock across recording epochs ) 'approx_dev_global_time' | A device keeps its own global time ( within 5 s ) | ( that is , it knows its own clock across recording epochs ) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device .","title":"Methods help"},{"location":"reference/%2Bndr/%2Btime/timereference.m/","text":"CLASS ndr.time.timereference \u00b6 NDR . TIME . TIMEREFERENCE - a class for specifying time relative to an NDR_CLOCK Superclasses \u00b6 none Properties \u00b6 Property Description referent the ndr.system, ndr.probe.*,... that is referred to (must be a subclass of ndr.epoch.epochset) clocktype the ndr.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time Methods \u00b6 Method Description ndr_timereference_struct return a structure that describes an ndr.time.timereference object that lacks Matlab objects timereference creates a new time reference object Methods help \u00b6 ndr_timereference_struct - return a structure that describes an ndr.time.timereference object that lacks Matlab objects A = NDR_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ) Returns a structure with the following fields: Fieldname | Description -------------------------------------------------------------------------------- referent_epochsetname | The epochsetname() of the referent referent_classname | The classname of the referent clocktypestring | The value of the clocktype epoch | The epoch (either a string or a number) session_ID | The session ID of the session that contains the epoch time | The time timereference - creates a new time reference object OBJ = NDR . TIME . TIMEREFERENCE ( REFERENT , CLOCKTYPE , EPOCH , TIME ) Creates a new ndr . time . timereference object . The REFERENT , EPOCH , and TIME must specify a unique time . REFERENT is any subclass of ndi . epoch . epochset object that has a 'session' property ( e . g ., ndr . system , ndr . element , etc ... ) . TYPE is the time type , can be 'utc' , 'exp_global_time' , or 'dev_global_time' or 'dev_local_time' If TYPE is 'dev_local_time' , then the EPOCH identifier is necessary . Otherwise , it can be empty . If EPOCH is specified , then TIME is taken to be relative to the EPOCH number of the device associated with CLOCK , even if the device keeps universal or time . An alternative creator is available : OBJ = ndr . time . timereference ( NDR_SESSION_OBJ , NDR_TIMEREF_STRUCT ) where NDR_SESSION_OBJ is an ndr . session and NDR_TIMEREF_STRUCT is a structure returned by ndr . time . timereference / NDR_TIMEREFERENCE_STRUCT . The NDR_SESSION_OBJ fields will be searched to find the live REFERENT to create OBJ . Documentation for ndr . time . timereference / timereference doc ndr . time . timereference","title":"ndr.time.timereference"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#class-ndrtimetimereference","text":"NDR . TIME . TIMEREFERENCE - a class for specifying time relative to an NDR_CLOCK","title":"CLASS ndr.time.timereference"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#properties","text":"Property Description referent the ndr.system, ndr.probe.*,... that is referred to (must be a subclass of ndr.epoch.epochset) clocktype the ndr.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time","title":"Properties"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#methods","text":"Method Description ndr_timereference_struct return a structure that describes an ndr.time.timereference object that lacks Matlab objects timereference creates a new time reference object","title":"Methods"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#methods-help","text":"ndr_timereference_struct - return a structure that describes an ndr.time.timereference object that lacks Matlab objects A = NDR_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ) Returns a structure with the following fields: Fieldname | Description -------------------------------------------------------------------------------- referent_epochsetname | The epochsetname() of the referent referent_classname | The classname of the referent clocktypestring | The value of the clocktype epoch | The epoch (either a string or a number) session_ID | The session ID of the session that contains the epoch time | The time timereference - creates a new time reference object OBJ = NDR . TIME . TIMEREFERENCE ( REFERENT , CLOCKTYPE , EPOCH , TIME ) Creates a new ndr . time . timereference object . The REFERENT , EPOCH , and TIME must specify a unique time . REFERENT is any subclass of ndi . epoch . epochset object that has a 'session' property ( e . g ., ndr . system , ndr . element , etc ... ) . TYPE is the time type , can be 'utc' , 'exp_global_time' , or 'dev_global_time' or 'dev_local_time' If TYPE is 'dev_local_time' , then the EPOCH identifier is necessary . Otherwise , it can be empty . If EPOCH is specified , then TIME is taken to be relative to the EPOCH number of the device associated with CLOCK , even if the device keeps universal or time . An alternative creator is available : OBJ = ndr . time . timereference ( NDR_SESSION_OBJ , NDR_TIMEREF_STRUCT ) where NDR_SESSION_OBJ is an ndr . session and NDR_TIMEREF_STRUCT is a structure returned by ndr . time . timereference / NDR_TIMEREFERENCE_STRUCT . The NDR_SESSION_OBJ fields will be searched to find the live REFERENT to create OBJ . Documentation for ndr . time . timereference / timereference doc ndr . time . timereference","title":"Methods help"},{"location":"reference/%2Bndr/%2Btime/%2Bfun/samples2times.m/","text":"ndr.time.fun.samples2times \u00b6 SAMPLES2TIMES - convert sample index numbers / sample numbers to sample times T = SAMPLES2TIMES ( S , T0_T1 , SR ) Given the index numbers of samples in vector S , and a range of times in the recording T0_T1 = [ T0 T1 ], and a fixed sample rate SR , calculate the time of each sample S . S ( i ) is the sample index number of T ( i ).","title":"ndr.time.fun.samples2times"},{"location":"reference/%2Bndr/%2Btime/%2Bfun/samples2times.m/#ndrtimefunsamples2times","text":"SAMPLES2TIMES - convert sample index numbers / sample numbers to sample times T = SAMPLES2TIMES ( S , T0_T1 , SR ) Given the index numbers of samples in vector S , and a range of times in the recording T0_T1 = [ T0 T1 ], and a fixed sample rate SR , calculate the time of each sample S . S ( i ) is the sample index number of T ( i ).","title":"ndr.time.fun.samples2times"},{"location":"reference/%2Bndr/%2Btime/%2Bfun/times2samples.m/","text":"ndr.time.fun.times2samples \u00b6 TIMES2SAMPLES - convert sample times to sample index numbers / sample numbers S = TIMES2SAMPLES ( T , T0_T1 , SR ) Given the times of samples in vector T , and a range of times in the recording T0_T1 = [ T0 T1 ], and a fixed sample rate SR , calculate the index number of each sample S . S ( i ) is the sample index number of T ( i ).","title":"ndr.time.fun.times2samples"},{"location":"reference/%2Bndr/%2Btime/%2Bfun/times2samples.m/#ndrtimefuntimes2samples","text":"TIMES2SAMPLES - convert sample times to sample index numbers / sample numbers S = TIMES2SAMPLES ( T , T0_T1 , SR ) Given the times of samples in vector T , and a range of times in the recording T0_T1 = [ T0 T1 ], and a fixed sample rate SR , calculate the index number of each sample S . S ( i ) is the sample index number of T ( i ).","title":"ndr.time.fun.times2samples"},{"location":"tutorials/makingnewreader/","text":"","title":"4 Add a new file format"},{"location":"tutorials/readanalog/","text":"","title":"1 Reading analog data"},{"location":"tutorials/readdigital/","text":"","title":"2 Reading digital data"},{"location":"tutorials/readevents/","text":"","title":"3 Reading events"}]}