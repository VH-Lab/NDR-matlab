{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NDR \u00b6 About \u00b6 (Under construction.. this will be updated for NDR soon) NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI? As an analyst , I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries. As a researcher , I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ , not as a separate step that I do later. As a physiologist/imager , I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. As an analyst , I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations. As a scientist , I want to search for data or analyses from other researchers. As an amateur , I want to be able to access scientists' raw data to perform my own analyses. Availability \u00b6 A mature prototype of NDI is available in Matlab and a version for Python is well under construction. Installation \u00b6 Check out the Installation Guide . Pre-print \u00b6 Check out the NDI pre-print available on biorxiv . Help and Support \u00b6 Use the issue tracker to submit questions, bugs, and issues. Financial Support \u00b6 Supported by the NIH BRAIN Initiative informatics group , grant MH114678.","title":"Home"},{"location":"#ndr","text":"","title":"NDR"},{"location":"#about","text":"(Under construction.. this will be updated for NDR soon) NDI (Neuroscience Data Interface) is a cross-platform interface standard for reading neuroscience data and storing the results of analyses. Who inspires NDI? As an analyst , I want to quickly open my colleagues' data, regardless of its format and organization, so we can make discoveries. As a researcher , I want my data records and analysis steps to be annotated and both human and machine readable, so I can review my teammates' work and share these annotated results with the world. I want these annotations to occur in situ , not as a separate step that I do later. As a physiologist/imager , I want my analysis routines to have access to my data the instant it is recorded, so I can make choices about how to proceed during my experiment. As an analyst , I want to write one set of analysis routines that do not need to be revised to work with new data formats or new data organizations. As a scientist , I want to search for data or analyses from other researchers. As an amateur , I want to be able to access scientists' raw data to perform my own analyses.","title":"About"},{"location":"#availability","text":"A mature prototype of NDI is available in Matlab and a version for Python is well under construction.","title":"Availability"},{"location":"#installation","text":"Check out the Installation Guide .","title":"Installation"},{"location":"#pre-print","text":"Check out the NDI pre-print available on biorxiv .","title":"Pre-print"},{"location":"#help-and-support","text":"Use the issue tracker to submit questions, bugs, and issues.","title":"Help and Support"},{"location":"#financial-support","text":"Supported by the NIH BRAIN Initiative informatics group , grant MH114678.","title":"Financial Support"},{"location":"contributing/","text":"Contributing \u00b6 Anyone with a GitHub account can contribute. Press the Fork button in the upper-right corner of the NDR-matlab GitHub repository to make a copy of NDR in your own GitHub space. Add your own ndr.reader.base base object, as described in the tutorial. Be sure to write a test function. If any helper functions are needed, be sure you have permission to add them, and add them to the ndr.format package or to the lib folder. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDR development team for integration.","title":"Contributing"},{"location":"contributing/#contributing","text":"Anyone with a GitHub account can contribute. Press the Fork button in the upper-right corner of the NDR-matlab GitHub repository to make a copy of NDR in your own GitHub space. Add your own ndr.reader.base base object, as described in the tutorial. Be sure to write a test function. If any helper functions are needed, be sure you have permission to add them, and add them to the ndr.format package or to the lib folder. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDR development team for integration.","title":"Contributing"},{"location":"installation/","text":"Installation: \u00b6 Recommended method: \u00b6 NDR is installed as a part of the Neuroscience Data Interface ( NDI ). The easiest way is to install it with the NDI installer as described here. Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Run the following in Matlab: cd ~/Desktop ndi_install Manual method: \u00b6 Run the following on your terminal command line: git clone http://github.com/VH-Lab/NDR-matlab You'll need a Matlab startup.m file. Add the command ndi_Init to that file, after ensuring that the directory for NDR-matlab is on your Matlab path. (All of these steps are taken care of via the automatic installation above.)","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation:"},{"location":"installation/#recommended-method","text":"NDR is installed as a part of the Neuroscience Data Interface ( NDI ). The easiest way is to install it with the NDI installer as described here. Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Run the following in Matlab: cd ~/Desktop ndi_install","title":"Recommended method:"},{"location":"installation/#manual-method","text":"Run the following on your terminal command line: git clone http://github.com/VH-Lab/NDR-matlab You'll need a Matlab startup.m file. Add the command ndi_Init to that file, after ensuring that the directory for NDR-matlab is on your Matlab path. (All of these steps are taken care of via the automatic installation above.)","title":"Manual method:"},{"location":"reference/ndr_Init.m/","text":"ndr_Init \u00b6 NDR_INIT - initalize a global variable ndr_globals with default file paths","title":"ndr_Init"},{"location":"reference/ndr_Init.m/#ndr_init","text":"NDR_INIT - initalize a global variable ndr_globals with default file paths","title":"ndr_Init"},{"location":"reference/%2Bndr/globals.m/","text":"ndr.globals \u00b6 GLOBALS - define global variables for NDR NDR.GLOBALS Script that defines some global variables for the NDR package The following variables are defined: Name: | Description ndr_globals.path.path | The path of the NDR distribution on this machine. | (Initialized by ndr_Init.m) ndr_globals.path.preferences | A path to a directory of preferences files ndr_globals.path.filecachepath | A path where files may be cached (not deleted every time) ndr_globals.path.temppath | The path to a directory that may be used for | temporary files (Initialized by ndr_Init.m) ndi_globals.path.testpath | A path to a safe place to run test code ndi.debug | A structure with preferences for debugging","title":"ndr.globals"},{"location":"reference/%2Bndr/globals.m/#ndrglobals","text":"GLOBALS - define global variables for NDR NDR.GLOBALS Script that defines some global variables for the NDR package The following variables are defined: Name: | Description ndr_globals.path.path | The path of the NDR distribution on this machine. | (Initialized by ndr_Init.m) ndr_globals.path.preferences | A path to a directory of preferences files ndr_globals.path.filecachepath | A path where files may be cached (not deleted every time) ndr_globals.path.temppath | The path to a directory that may be used for | temporary files (Initialized by ndr_Init.m) ndi_globals.path.testpath | A path to a safe place to run test code ndi.debug | A structure with preferences for debugging","title":"ndr.globals"},{"location":"reference/%2Bndr/reader.m/","text":"CLASS ndr.reader \u00b6 NDR - create a new Neuroscience Data Reader object NDR_READER_OBJ = ndr.reader(NDR_READER_TYPE) Creates an Neuroscence Data Reader object of the indicated type. Some valid types include 'IntanRHD', 'CedSpike2', 'SpikeGadgets', 'Blackrock'. Superclasses \u00b6 none Properties \u00b6 Property Description ndr_reader_base the ndr reader base object, that actually reads the files Methods \u00b6 Method Description epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device for a given epoch read read data from an ndr.reader object readchannels_epochsamples read the data based on specified channels reader create a new Neuroscience Data Reader object readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL FOR REGULARLY-SAMPLED CHANNELS t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch Methods help \u00b6 epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). This function calls the method of the ndr_reader_base class. If EPOCH_SELECT is not provided, it is assumed to be 1. See also: ndr.time.clocktype getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELSEPOCH(NDR_READER_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Returns the channel list of acquired channels in this epoch. EPOCHSTREAMS should be a cell array of files or streams that comprise this epoch. EPOCH_SELECT indicates the epoch within the EPOCHSTREAMS files to select. The vast majority of systems only allow one EPOCH per file, so EPOCH_SELECT is usually 1. It defaults to 1 if it is not given. CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') read - read data from an ndr.reader object [DATA, TIME] = READ(NDR_READER_OBJ, EPOCHSTREAMS, CHANNELSTRING, ...) readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. reader - create a new Neuroscience Data Reader object NDR_READER_OBJ = ndr.reader(NDR_READER_TYPE) Creates an Neuroscence Data Reader object of the indicated type. Some valid types include 'IntanRHD', 'CedSpike2', 'SpikeGadgets', 'Blackrock'. readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, EPOCHSTREAMS, EPOCH_SELECT, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read, such as 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries will be a -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Step 1: check to see if the user is requesting a \"native\" type of event (event,marker,text) or a \"derived\" type of event (like dep, den, dimp, dimn, which are derived from the data of sampled digital channels) If the user does request a derived event type, then compute it readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is a cell array of strings, describing the type of each channel to read, such as 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurence of each event; DATA is a cell array of character arrays, 1 per event One cannot use the event types that are derived from digital data ('dep','dimp','den','dimn') with READEVENTS_EPOCHSAMPLES_NATIVE. Use READEVENTS_EPOCHSAMPLES instead. CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL FOR REGULARLY-SAMPLED CHANNELS SR = SAMPLERATE(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, EPOCHSTREAMS, EPOCH_SELECT) SR is an array of sample rates from the specified channels CHANNELTYPE is a cell array of strings, describing the type of each channel to read. This must be a regularly-sampled type, such as 'analog_input' or 'ai' - regularly sampled analog input 'analog_output' or 'ao' - regularly sampled analog output 'digital_input' or 'di' - regularly sampled digital input 'digital_output' or 'do' - regularly sampled digital output CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDR_READER_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the beginning (t0) and end (t1) times of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT. This function calls the method of the ndr_reader_base class. If EPOCH_SELECT is not provided, it is assumed to be 1. See also: ndr.time.clocktype, ndr.reader.base/epochclock","title":"ndr.reader"},{"location":"reference/%2Bndr/reader.m/#class-ndrreader","text":"NDR - create a new Neuroscience Data Reader object NDR_READER_OBJ = ndr.reader(NDR_READER_TYPE) Creates an Neuroscence Data Reader object of the indicated type. Some valid types include 'IntanRHD', 'CedSpike2', 'SpikeGadgets', 'Blackrock'.","title":"CLASS ndr.reader"},{"location":"reference/%2Bndr/reader.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndr/reader.m/#properties","text":"Property Description ndr_reader_base the ndr reader base object, that actually reads the files","title":"Properties"},{"location":"reference/%2Bndr/reader.m/#methods","text":"Method Description epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device for a given epoch read read data from an ndr.reader object readchannels_epochsamples read the data based on specified channels reader create a new Neuroscience Data Reader object readevents_epochsamples read events, markers, and digital events of specified channels for a specified epoch readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL FOR REGULARLY-SAMPLED CHANNELS t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch","title":"Methods"},{"location":"reference/%2Bndr/reader.m/#methods-help","text":"epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). This function calls the method of the ndr_reader_base class. If EPOCH_SELECT is not provided, it is assumed to be 1. See also: ndr.time.clocktype getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELSEPOCH(NDR_READER_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Returns the channel list of acquired channels in this epoch. EPOCHSTREAMS should be a cell array of files or streams that comprise this epoch. EPOCH_SELECT indicates the epoch within the EPOCHSTREAMS files to select. The vast majority of systems only allow one EPOCH per file, so EPOCH_SELECT is usually 1. It defaults to 1 if it is not given. CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') read - read data from an ndr.reader object [DATA, TIME] = READ(NDR_READER_OBJ, EPOCHSTREAMS, CHANNELSTRING, ...) readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. reader - create a new Neuroscience Data Reader object NDR_READER_OBJ = ndr.reader(NDR_READER_TYPE) Creates an Neuroscence Data Reader object of the indicated type. Some valid types include 'IntanRHD', 'CedSpike2', 'SpikeGadgets', 'Blackrock'. readevents_epochsamples - read events, markers, and digital events of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, EPOCHSTREAMS, EPOCH_SELECT, T0, T1) Returns TIMESTAMPS and DATA corresponding to event or marker channels. If the number of CHANNEL entries is 1, then TIMESTAMPS is a column vector of type double, and DATA is also a column of a type that depends on the type of event that is read. If the number of CHANNEL entries is more than 1, then TIMESTAMPS and DATA are both columns of cell arrays, with 1 column per channel. CHANNELTYPE is a cell array of strings, describing the type of each channel to read, such as 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurence of each event; DATA is a cell array of character arrays, 1 per event 'dep' - Create events from a digital channel with positive transitions. TIMESTAMPS mark the occurence of each event and DATA entries will be a 1 'dimp' - Create events from a digital channel by finding impulses that exhibit positive then negative transitions. TIMESTAMPS mark the occurrence of each event, and DATA indicates whether the event is a positive transition (1) or negative (-1) transition. 'den' - Create events from a digital channel with negative transitions. TIMESTAMPS mark the occurrence of each event and DATA entries will be a -1. 'dimn' - Create events from a digital channel by finding impulses that exhibit negative then positive transitions. TIMESTAMPS mark the occurence of each event, and DATA indicates whether the event is a negative transition (1) or a positive transition (-1). CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Step 1: check to see if the user is requesting a \"native\" type of event (event,marker,text) or a \"derived\" type of event (like dep, den, dimp, dimn, which are derived from the data of sampled digital channels) If the user does request a derived event type, then compute it readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is a cell array of strings, describing the type of each channel to read, such as 'event' - TIMESTAMPS mark the occurrence of each event; DATA is a logical 1 for each timestamp 'marker' - TIMESTAMPS mark the occurence of each event; each row of DATA is the data associated with the marker (type double) 'text' - TIMESTAMPS mark the occurence of each event; DATA is a cell array of character arrays, 1 per event One cannot use the event types that are derived from digital data ('dep','dimp','den','dimn') with READEVENTS_EPOCHSAMPLES_NATIVE. Use READEVENTS_EPOCHSAMPLES instead. CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL FOR REGULARLY-SAMPLED CHANNELS SR = SAMPLERATE(NDR_READER_OBJ, CHANNELTYPE, CHANNEL, EPOCHSTREAMS, EPOCH_SELECT) SR is an array of sample rates from the specified channels CHANNELTYPE is a cell array of strings, describing the type of each channel to read. This must be a regularly-sampled type, such as 'analog_input' or 'ai' - regularly sampled analog input 'analog_output' or 'ao' - regularly sampled analog output 'digital_input' or 'di' - regularly sampled digital input 'digital_output' or 'do' - regularly sampled digital output CHANNEL is a vector with the identity(ies) of the channel(s) to be read. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDR_READER_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the beginning (t0) and end (t1) times of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT. This function calls the method of the ndr_reader_base class. If EPOCH_SELECT is not provided, it is assumed to be 1. See also: ndr.time.clocktype, ndr.reader.base/epochclock","title":"Methods help"},{"location":"reference/%2Bndr/%2Bdata/assign.m/","text":"ndr.data.assign \u00b6 assign - make a list of assignments (matlab 5 or higher) ndr . data . assign ( 'VAR1' , VAL1 , 'VAR2' , VAL2 , ... ) makes the assignments VAR1 = VAL1 ; VAR2 = VAL2 ; ... in the caller 's workspace. This is most useful when passing in an option list to a function . Thus in the function which starts : function foo ( x , y , varargin ) z = 0 ; ndr . data . assign ( varargin {:}); the variable z can be given a non - default value by calling the function like so : foo ( x , y , 'z' , 4 ); If the input is a single structure , then the structure is converted to a set of NAME / VALUE pairs and interpreted as 'VAR1' , VAL1 , etc , where VAR1 is the first field name of the input , VAL1 is the value of the field name , etc .","title":"ndr.data.assign"},{"location":"reference/%2Bndr/%2Bdata/assign.m/#ndrdataassign","text":"assign - make a list of assignments (matlab 5 or higher) ndr . data . assign ( 'VAR1' , VAL1 , 'VAR2' , VAL2 , ... ) makes the assignments VAR1 = VAL1 ; VAR2 = VAL2 ; ... in the caller 's workspace. This is most useful when passing in an option list to a function . Thus in the function which starts : function foo ( x , y , varargin ) z = 0 ; ndr . data . assign ( varargin {:}); the variable z can be given a non - default value by calling the function like so : foo ( x , y , 'z' , 4 ); If the input is a single structure , then the structure is converted to a set of NAME / VALUE pairs and interpreted as 'VAR1' , VAL1 , etc , where VAR1 is the first field name of the input , VAL1 is the value of the field name , etc .","title":"ndr.data.assign"},{"location":"reference/%2Bndr/%2Bdata/colvec.m/","text":"ndr.data.colvec \u00b6 COLVEC - return a matrix reshaped as a column vector Y = ndr.data.colvec(X) Returns the contents of the matrix X as a column vector Y that is 1xM, where M is the product of all the sizes of the dimensions of X (M = PROD(SIZE(X))). ndr.data.colvec is equivalent to Y = X(:); This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: ndr.data.rowvec Example: A = rand(5,5) Y = ndr.data.colvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"ndr.data.colvec"},{"location":"reference/%2Bndr/%2Bdata/colvec.m/#ndrdatacolvec","text":"COLVEC - return a matrix reshaped as a column vector Y = ndr.data.colvec(X) Returns the contents of the matrix X as a column vector Y that is 1xM, where M is the product of all the sizes of the dimensions of X (M = PROD(SIZE(X))). ndr.data.colvec is equivalent to Y = X(:); This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: ndr.data.rowvec Example: A = rand(5,5) Y = ndr.data.colvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"ndr.data.colvec"},{"location":"reference/%2Bndr/%2Bdata/rowvec.m/","text":"ndr.data.rowvec \u00b6 ROWVEC - return a matrix reshaped as a row vector Y = ndr.data.rowvec(X) Returns the contents of the matrix X as a row vector Y that is Mx1, where M is the product of all the sizes of the dimensions of X (M = PROD(SIZE(X))). ndr.data.rowvec is equivalent to Y = X(:)'; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: ndr.data.colvec Example: A = rand(5,5) Y = ndr.data.rowvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"ndr.data.rowvec"},{"location":"reference/%2Bndr/%2Bdata/rowvec.m/#ndrdatarowvec","text":"ROWVEC - return a matrix reshaped as a row vector Y = ndr.data.rowvec(X) Returns the contents of the matrix X as a row vector Y that is Mx1, where M is the product of all the sizes of the dimensions of X (M = PROD(SIZE(X))). ndr.data.rowvec is equivalent to Y = X(:)'; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: ndr.data.colvec Example: A = rand(5,5) Y = ndr.data.rowvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"ndr.data.rowvec"},{"location":"reference/%2Bndr/%2Bdata/struct2namevaluepair.m/","text":"ndr.data.struct2namevaluepair \u00b6 STRUCT2NAMEVALUEPAIR - Convert a structure to a cell array of name/value pairs NV = ndr.data.struct2namevaluepair(THESTRUCT) Convert a structure to a cell array of name/value pairs. This is useful for passing name/value pairs to functions that accept them as extra arguments. Each field name of the structure is used as the 'name', and the value is used as the 'value'. Example: myStruct . param1 = 1 ; myStruct . param2 = 2 ; nv = ndr . data . struct2namevaluepair ( myStruct ) % nv = {'param1', 1, 'param2', 2} See also: VARARGIN, ndr.data.assign, STRUCT","title":"ndr.data.struct2namevaluepair"},{"location":"reference/%2Bndr/%2Bdata/struct2namevaluepair.m/#ndrdatastruct2namevaluepair","text":"STRUCT2NAMEVALUEPAIR - Convert a structure to a cell array of name/value pairs NV = ndr.data.struct2namevaluepair(THESTRUCT) Convert a structure to a cell array of name/value pairs. This is useful for passing name/value pairs to functions that accept them as extra arguments. Each field name of the structure is used as the 'name', and the value is used as the 'value'. Example: myStruct . param1 = 1 ; myStruct . param2 = 2 ; nv = ndr . data . struct2namevaluepair ( myStruct ) % nv = {'param1', 1, 'param2', 2} See also: VARARGIN, ndr.data.assign, STRUCT","title":"ndr.data.struct2namevaluepair"},{"location":"reference/%2Bndr/%2Bdocs/build.m/","text":"ndr.docs.build \u00b6 ndr.docs.build - build the NDR markdown documentation from Matlab source Builds the ND$ documentation locally in $NDR-matlab/docs and updates the mkdocs-yml file in the $NDR-matlab directory. Example : ndr.docs.build();","title":"ndr.docs.build"},{"location":"reference/%2Bndr/%2Bdocs/build.m/#ndrdocsbuild","text":"ndr.docs.build - build the NDR markdown documentation from Matlab source Builds the ND$ documentation locally in $NDR-matlab/docs and updates the mkdocs-yml file in the $NDR-matlab directory. Example : ndr.docs.build();","title":"ndr.docs.build"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/","text":"CLASS ndr.file.fileobj \u00b6 FILEOBJ - a Matlab binary file object; an interface to fopen, fread, fwrite, fseek, fclose, ftell This is an object interface to fopen, fread, fwrite, fseek, fclose, and ftell. Why do this? One could imagine one day separating the process of reading and writing a data stream from the file system. For example, one could write to GRIDFS by overriding these functions, and the user's code would never have to know. Superclasses \u00b6 handle Properties \u00b6 Property Description fullpathfilename fid permission machineformat 'big-endian' or 'little-endian' Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. delete delete a FILEOBJ_OBJ, closing file first if need be eq == (EQ) Test handle equality. fclose close a FILEOBJ feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileobj create a new binary file object fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDR . FILE . FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndr.file.fileobj/addlistener is inherited from superclass HANDLE Documentation for ndr . file . fileobj / addlistener doc handle . addlistener delete - delete a FILEOBJ_OBJ, closing file first if need be DELETE(FILEOBJ_OBJ) Deletes the handle FILEOBJ_OBJ. If the file (FILEOBJ_OBJ.fid) is open, it is closed first. See also: HANDLE/DELETE, FILEOBJ/FCLOSE eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/eq is inherited from superclass HANDLE Documentation for ndr . file . fileobj / eq doc handle . eq fclose - close a FILEOBJ FILEOBJ_OBJ = FCLOSE(FILEOBJ_OBJ) Close a file associated with a FILEOBJ. Attempt to close the file and then set FILEOBJ_OBJ.fid to -1. feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF(FILEOBJ_OBJ) Returns 1 if FILEOBJ_OBJ is at its end of file, 0 otherwise. See also: FSEEK, FILEOBJ/FSEEK, FTELL ferror - return the last file error message for FILEOBJ [MESSAGE, ERRORNUM] = FERROR(FILEOBJ_OBJ, COMMAND) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR. fgetl - get a line from a FILEOBJ TLINE = FGETL(FILEOBJ_OBJ) Returns the next line (not including NEWLINE character) just like FGETL. See also: FGETL fgets - get a line from a FILEOBJ TLINE = FGETS(FILEOBJ_OBJ, [NCHAR]) Returns the next line (including NEWLINE character) just like FGETS. See also: FGETS fileobj - create a new binary file object FILEOBJ_OBJ = FILEOBJ(...) Creates an empty FILEOBJ object. If FILENAME is provided, then the filename is stored. fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDR.FILE.FILEOBJ Help for ndr.file.fileobj/findobj is inherited from superclass HANDLE Documentation for ndr . file . fileobj / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP(H,PROPNAME) finds and returns the META.PROPERTY object associated with property name PROPNAME of scalar handle object H. PROPNAME can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndr.file.fileobj/findprop is inherited from superclass HANDLE Documentation for ndr . file . fileobj / findprop doc handle . findprop fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN(FILEOBJ_OBJ, [ , PERMISSION], [MACHINEFORMAT],[FILENAME]) Opens the file associated with a FILEOBJ_OBJ object. If FILENAME, PERMISSION, and MACHINEFORMAT are given, then those variables of FILEOBJ_OBJ are updated. If they are not given, then the existing values in the FILEOBJ_OBJ are used. Note that the order of the input arguments differs from FOPEN, so that the object can be called in place of an FID (e.g., fid=fopen(myvariable), where myvariable is either a file name or a FILEOBJ object). If the operation is successful, then FILEOBJ_OBJ.fid is greater than 3. Otherwise, FILEOBJ_OBJ.fid is -1. See also: FOPEN, FILEOBJ/FCLOSE, FCLOSE fprintf - print data to a FILEOBJ_OBJ [COUNT] = FPRINTF(FID,FORMAT,A, ...) Call FPRINTF (see FPRINTF for inputs) for the file associated with FILEOBJ_OBJ. fread - read data from a FILEOBJ COUNT = FWRITE(FILEOBJ_OBJ, COUNT, [PRECISION], [SKIP], [MACHINEFORMAT]) Attempts to read COUNT elements with resolution PRECISION. If PRECISION is not provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use. See FREAD for a full description of these input arguments. See also: FREAD frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL fscanf - scan data from a FILEOBJ_OBJ [A,COUNT] = FSCANF(FID,FORMAT,[SIZEA]) Call FSCANF (see FSCANF for inputs) for the file associated with FILEOBJ_OBJ. fseek - seek to a location within a FILEOBJ B = FSEEK(FILEOBJ_OBJ, OFFSET, REFERENCE) Seeks the file to the location OFFSET (in bytes) relative to REFERENCE. REFERENCE can be 'bof' or -1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and -1 on failure. See also: FSEEK, FILEOBJ/FTELL ftell - find current location within a FILEOBJ LOCATION = FTELL(FILEOBJ_OBJ) Returns the current location (in bytes) relative to the beginning of the file. If the query fails, -1 is returned. See also: FSEEK, FILEOBJ/FSEEK, FTELL fwrite - write data to a FILEOBJ COUNT = FWRITE(FILEOBJ_OBJ, DATA, [PRECISION], [SKIP], [MACHINEFORMAT]) Attempts to write DATA elements with resolution PRECISION. If PRECISION is not provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use. See FWRITE for a full description of these input arguments. See also: FWRITE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/ge is inherited from superclass HANDLE Documentation for ndr . file . fileobj / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/gt is inherited from superclass HANDLE Documentation for ndr . file . fileobj / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / DELETE Help for ndr.file.fileobj/isvalid is inherited from superclass HANDLE Documentation for ndr . file . fileobj / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/le is inherited from superclass HANDLE Documentation for ndr . file . fileobj / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDR . FILE . FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndr.file.fileobj/listener is inherited from superclass HANDLE Documentation for ndr . file . fileobj / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/lt is inherited from superclass HANDLE Documentation for ndr . file . fileobj / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT Help for ndr.file.fileobj/ne is inherited from superclass HANDLE Documentation for ndr . file . fileobj / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / ADDLISTENER , NDR . FILE . FILEOBJ / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndr.file.fileobj/notify is inherited from superclass HANDLE Documentation for ndr . file . fileobj / notify doc handle . notify setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES(FILEOBJ_OBJ, 'PROPERTY1',VALUE1, ...) Sets the properties of a FILEOBJ with name/value pairs. Properties are: fullpathfilename; % the full path file name of the file fid; % The Matlab file identifier permission; % The file permission machineformat % big-endian ('b'), little-endian ('l'), or native ('n')","title":"ndr.file.fileobj"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#class-ndrfilefileobj","text":"FILEOBJ - a Matlab binary file object; an interface to fopen, fread, fwrite, fseek, fclose, ftell This is an object interface to fopen, fread, fwrite, fseek, fclose, and ftell. Why do this? One could imagine one day separating the process of reading and writing a data stream from the file system. For example, one could write to GRIDFS by overriding these functions, and the user's code would never have to know.","title":"CLASS ndr.file.fileobj"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#properties","text":"Property Description fullpathfilename fid permission machineformat 'big-endian' or 'little-endian'","title":"Properties"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. delete delete a FILEOBJ_OBJ, closing file first if need be eq == (EQ) Test handle equality. fclose close a FILEOBJ feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileobj create a new binary file object fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ","title":"Methods"},{"location":"reference/%2Bndr/%2Bfile/fileobj.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , NDR . FILE . FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndr.file.fileobj/addlistener is inherited from superclass HANDLE Documentation for ndr . file . fileobj / addlistener doc handle . addlistener delete - delete a FILEOBJ_OBJ, closing file first if need be DELETE(FILEOBJ_OBJ) Deletes the handle FILEOBJ_OBJ. If the file (FILEOBJ_OBJ.fid) is open, it is closed first. See also: HANDLE/DELETE, FILEOBJ/FCLOSE eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object. H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/eq is inherited from superclass HANDLE Documentation for ndr . file . fileobj / eq doc handle . eq fclose - close a FILEOBJ FILEOBJ_OBJ = FCLOSE(FILEOBJ_OBJ) Close a file associated with a FILEOBJ. Attempt to close the file and then set FILEOBJ_OBJ.fid to -1. feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF(FILEOBJ_OBJ) Returns 1 if FILEOBJ_OBJ is at its end of file, 0 otherwise. See also: FSEEK, FILEOBJ/FSEEK, FTELL ferror - return the last file error message for FILEOBJ [MESSAGE, ERRORNUM] = FERROR(FILEOBJ_OBJ, COMMAND) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR. fgetl - get a line from a FILEOBJ TLINE = FGETL(FILEOBJ_OBJ) Returns the next line (not including NEWLINE character) just like FGETL. See also: FGETL fgets - get a line from a FILEOBJ TLINE = FGETS(FILEOBJ_OBJ, [NCHAR]) Returns the next line (including NEWLINE character) just like FGETS. See also: FGETS fileobj - create a new binary file object FILEOBJ_OBJ = FILEOBJ(...) Creates an empty FILEOBJ object. If FILENAME is provided, then the filename is stored. fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command, except that the first argument must be an array of handles to objects. HM = FINDOBJ(H, <conditions>) searches the handle object array H and returns an array of handle objects matching the specified conditions. Only the public members of the objects of H are considered when evaluating the conditions. See also FINDOBJ, NDR.FILE.FILEOBJ Help for ndr.file.fileobj/findobj is inherited from superclass HANDLE Documentation for ndr . file . fileobj / findobj doc handle . findobj findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP(H,PROPNAME) finds and returns the META.PROPERTY object associated with property name PROPNAME of scalar handle object H. PROPNAME can be a string scalar or character vector. It can be the name of a property defined by the class of H or a dynamic property added to scalar object H. If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for ndr.file.fileobj/findprop is inherited from superclass HANDLE Documentation for ndr . file . fileobj / findprop doc handle . findprop fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN(FILEOBJ_OBJ, [ , PERMISSION], [MACHINEFORMAT],[FILENAME]) Opens the file associated with a FILEOBJ_OBJ object. If FILENAME, PERMISSION, and MACHINEFORMAT are given, then those variables of FILEOBJ_OBJ are updated. If they are not given, then the existing values in the FILEOBJ_OBJ are used. Note that the order of the input arguments differs from FOPEN, so that the object can be called in place of an FID (e.g., fid=fopen(myvariable), where myvariable is either a file name or a FILEOBJ object). If the operation is successful, then FILEOBJ_OBJ.fid is greater than 3. Otherwise, FILEOBJ_OBJ.fid is -1. See also: FOPEN, FILEOBJ/FCLOSE, FCLOSE fprintf - print data to a FILEOBJ_OBJ [COUNT] = FPRINTF(FID,FORMAT,A, ...) Call FPRINTF (see FPRINTF for inputs) for the file associated with FILEOBJ_OBJ. fread - read data from a FILEOBJ COUNT = FWRITE(FILEOBJ_OBJ, COUNT, [PRECISION], [SKIP], [MACHINEFORMAT]) Attempts to read COUNT elements with resolution PRECISION. If PRECISION is not provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use. See FREAD for a full description of these input arguments. See also: FREAD frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL fscanf - scan data from a FILEOBJ_OBJ [A,COUNT] = FSCANF(FID,FORMAT,[SIZEA]) Call FSCANF (see FSCANF for inputs) for the file associated with FILEOBJ_OBJ. fseek - seek to a location within a FILEOBJ B = FSEEK(FILEOBJ_OBJ, OFFSET, REFERENCE) Seeks the file to the location OFFSET (in bytes) relative to REFERENCE. REFERENCE can be 'bof' or -1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and -1 on failure. See also: FSEEK, FILEOBJ/FTELL ftell - find current location within a FILEOBJ LOCATION = FTELL(FILEOBJ_OBJ) Returns the current location (in bytes) relative to the beginning of the file. If the query fails, -1 is returned. See also: FSEEK, FILEOBJ/FSEEK, FTELL fwrite - write data to a FILEOBJ COUNT = FWRITE(FILEOBJ_OBJ, DATA, [PRECISION], [SKIP], [MACHINEFORMAT]) Attempts to write DATA elements with resolution PRECISION. If PRECISION is not provided, then 'char' is assumed. If SKIP is provided, then SKIP is in number of bytes, unless PRECISION is in bits, in which case SKIP is in bits. MACHINEFORMAT is the machine format to use. See FWRITE for a full description of these input arguments. See also: FWRITE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise >= result. If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/ge is inherited from superclass HANDLE Documentation for ndr . file . fileobj / ge doc handle . ge gt - > (GT) Greater than relation for handles. H1 > H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise > result. If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/gt is inherited from superclass HANDLE Documentation for ndr . file . fileobj / gt doc handle . gt isvalid - ISVALID Test handle validity. TF = ISVALID(H) performs an element-wise check for validity on the handle elements of H. The result is a logical array of the same dimensions as H, where each element is the element-wise validity result. A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / DELETE Help for ndr.file.fileobj/isvalid is inherited from superclass HANDLE Documentation for ndr . file . fileobj / isvalid doc handle . isvalid le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object. All comparisons use a number associated with each handle object. Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result. The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared. H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LT , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/le is inherited from superclass HANDLE Documentation for ndr . file . fileobj / le doc handle . le listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER(hSource, Eventname, callbackFcn) creates a listener for the event named Eventname. The source of the event is the handle object hSource. If hSource is an array of source handles, the listener responds to the named event on any handle in the array. callbackFcn is a function handle that is invoked when the event is triggered. el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , NDR . FILE . FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for ndr.file.fileobj/listener is inherited from superclass HANDLE Documentation for ndr . file . fileobj / listener doc handle . listener lt - < (LT) Less than relation for handles. H1 < H2 performs element-wise comparisons between handle arrays H1 and H2. H1 and H2 must be of the same dimensions unless one is a scalar. The result is a logical array of the same dimensions, where each element is an element-wise < result. If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / NE Help for ndr.file.fileobj/lt is inherited from superclass HANDLE Documentation for ndr . file . fileobj / lt doc handle . lt ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise. H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / EQ , NDR . FILE . FILEOBJ / GE , NDR . FILE . FILEOBJ / GT , NDR . FILE . FILEOBJ / LE , NDR . FILE . FILEOBJ / LT Help for ndr.file.fileobj/ne is inherited from superclass HANDLE Documentation for ndr . file . fileobj / ne doc handle . ne notify - NOTIFY Notify listeners of event. NOTIFY(H, eventname) notifies listeners added to the event named eventname for handle object array H that the event is taking place. eventname can be a string scalar or character vector. H is the array of handles to the event source objects, and 'eventname' must be a character vector. NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also NDR . FILE . FILEOBJ , NDR . FILE . FILEOBJ / ADDLISTENER , NDR . FILE . FILEOBJ / LISTENER , EVENT . EVENTDATA , EVENTS Help for ndr.file.fileobj/notify is inherited from superclass HANDLE Documentation for ndr . file . fileobj / notify doc handle . notify setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES(FILEOBJ_OBJ, 'PROPERTY1',VALUE1, ...) Sets the properties of a FILEOBJ with name/value pairs. Properties are: fullpathfilename; % the full path file name of the file fid; % The Matlab file identifier permission; % The file permission machineformat % big-endian ('b'), little-endian ('l'), or native ('n')","title":"Methods help"},{"location":"reference/%2Bndr/%2Bfile/textfile2char.m/","text":"ndr.file.textfile2char \u00b6 TEXTFILE2CHAR - Read a text file into a character string STR = TEXTFILE2CHAR(FILENAME) This function reads the entire contents of the file FILENAME into the character string STR.","title":"ndr.file.textfile2char"},{"location":"reference/%2Bndr/%2Bfile/textfile2char.m/#ndrfiletextfile2char","text":"TEXTFILE2CHAR - Read a text file into a character string STR = TEXTFILE2CHAR(FILENAME) This function reads the entire contents of the file FILENAME into the character string STR.","title":"ndr.file.textfile2char"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_datafile.m/","text":"ndr.format.ced.read_SOMSMR_datafile \u00b6 ndr.format.ced.read_SOMSMR_datafile Reads samples from a CED SOM/SMR file [DATA,TOTAL_SAMPLES,TOTAL_TIME,BLOCKINFO,TIME] = ndr.format.ced.read_SOMSMR_datafile(FILENAME, HEADER, CHANNEL_NUMBER, T0, T1); Inputs: Reads data from the Cambridge Electronic Design .SOM or .SMR file FILENAME. The file HEADER information can be provided in HEADER. If HEADER is empty, then it will be read from the file. CHANNEL_NUMBER is the the channel number for which to return data (ranging from 1 to the number to return data; it corresponds to the channel number in the Spike2 .SMR file (that is, in the Sampling Configuration that was used on Spike2). T0 is the time to start reading (the beginning of the recording is 0) and T1 is the time to stop reading. If T0 is negative, we will start with time 0. If T1 is INF, we will use the end time of the whole file. Outputs: DATA - each column contains samples from an individual channel; if more than one channel has been requested, DATA will have more than one column. TOTAL_SAMPLES - The total number of (amplifier or digital) samples estimated to be in the file. TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file, in seconds. BLOCKINFO - the output of SONGETBLOCKHEADERS that describes the file blocks TIME - a vector corresponding to the time of each sample read Note: at this time, we can only read single channels at a time. If CHANNEL_NUMBER is an array, there will be an error. If the user need this functionality, please submit an ISSUE on GitHub (http://github.com/VH-Lab/NDR-matlab). See also: ndr.format.ced.read_SOMSMR_header, ndr.format.ced.read_SOMSMR_sampleinterval","title":"ndr.format.ced.read_SOMSMR_datafile"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_datafile.m/#ndrformatcedread_somsmr_datafile","text":"ndr.format.ced.read_SOMSMR_datafile Reads samples from a CED SOM/SMR file [DATA,TOTAL_SAMPLES,TOTAL_TIME,BLOCKINFO,TIME] = ndr.format.ced.read_SOMSMR_datafile(FILENAME, HEADER, CHANNEL_NUMBER, T0, T1); Inputs: Reads data from the Cambridge Electronic Design .SOM or .SMR file FILENAME. The file HEADER information can be provided in HEADER. If HEADER is empty, then it will be read from the file. CHANNEL_NUMBER is the the channel number for which to return data (ranging from 1 to the number to return data; it corresponds to the channel number in the Spike2 .SMR file (that is, in the Sampling Configuration that was used on Spike2). T0 is the time to start reading (the beginning of the recording is 0) and T1 is the time to stop reading. If T0 is negative, we will start with time 0. If T1 is INF, we will use the end time of the whole file. Outputs: DATA - each column contains samples from an individual channel; if more than one channel has been requested, DATA will have more than one column. TOTAL_SAMPLES - The total number of (amplifier or digital) samples estimated to be in the file. TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file, in seconds. BLOCKINFO - the output of SONGETBLOCKHEADERS that describes the file blocks TIME - a vector corresponding to the time of each sample read Note: at this time, we can only read single channels at a time. If CHANNEL_NUMBER is an array, there will be an error. If the user need this functionality, please submit an ISSUE on GitHub (http://github.com/VH-Lab/NDR-matlab). See also: ndr.format.ced.read_SOMSMR_header, ndr.format.ced.read_SOMSMR_sampleinterval","title":"ndr.format.ced.read_SOMSMR_datafile"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_header.m/","text":"ndr.format.ced.read_SOMSMR_header \u00b6 ndr.format.intan.read_SOMSMR_header - Read header information from a CED SOM or SMR file HEADER = ndr.format.ced.read_SOMSMR_header(FILENAME) Returns a structure HEADER with all of the information fields that are stored in the CED SOM/SMR file FILENAME. CED stands for Cambridge Electronic Design, which makes the Spike2 data acquisition system. This function reads header files for the SOM/SMR file formats. This function depends on sigTOOL by Malcolm Lidierth (http://sigtool.sourceforge.net). sigTOOL is also included in the https://github.com/VH-Lab/thirdparty bundle and can be installed with instructions at http://code.vhlab.org. HEADER contains two substructures: fileinfo | Information about the file and its version channelinfo | Information about the channels acquired in the file See also: ndr.format.ced.read_SOMSMR_datafile, ndr.format.ced.read_SOMSMR_sampleinterval, SONFILEHEADER (documents HEADER.fileinfo),","title":"ndr.format.ced.read_SOMSMR_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_header.m/#ndrformatcedread_somsmr_header","text":"ndr.format.intan.read_SOMSMR_header - Read header information from a CED SOM or SMR file HEADER = ndr.format.ced.read_SOMSMR_header(FILENAME) Returns a structure HEADER with all of the information fields that are stored in the CED SOM/SMR file FILENAME. CED stands for Cambridge Electronic Design, which makes the Spike2 data acquisition system. This function reads header files for the SOM/SMR file formats. This function depends on sigTOOL by Malcolm Lidierth (http://sigtool.sourceforge.net). sigTOOL is also included in the https://github.com/VH-Lab/thirdparty bundle and can be installed with instructions at http://code.vhlab.org. HEADER contains two substructures: fileinfo | Information about the file and its version channelinfo | Information about the channels acquired in the file See also: ndr.format.ced.read_SOMSMR_datafile, ndr.format.ced.read_SOMSMR_sampleinterval, SONFILEHEADER (documents HEADER.fileinfo),","title":"ndr.format.ced.read_SOMSMR_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_sampleinterval.m/","text":"ndr.format.ced.read_SOMSMR_sampleinterval \u00b6 ndr.format.ced.read_SOMSMR_sampleinterval - Reads sample interval from a CED SOM/SMR file [SAMPLEINTERVAL,TOTAL_SAMPLES,TOTAL_TIME,BLOCKINFO] = ndr.format.ced.read_SOMSMR_sampleinterval(FILENAME, ... HEADER, CHANNEL_NUMBER) Inputs: Reads the sampleinterval (in seconds) for a given channel from the Cambridge Electronic Design .SOM or .SMR file FILENAME. The file HEADER information can be provided in HEADER. If HEADER is empty, then it will be read from the file. CHANNEL_NUMBER is the the channel number for which to return data; it corresponds to the channel number in the Spike2 .SMR file (that is, in the Sampling Configuration that was used on Spike2). Outputs: SAMPLE_INTERVAL - each column contains samples from an individual channel; if more than one channel has been requested, DATA will have more than one column. TOTAL_SAMPLES - The total number of (amplifier or digital) samples estimated to be in the file. TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file, in seconds. See also: ndr.format.ced.read_SOMSMR_datafile, ndr.format.ced.read_SOMSMR_header","title":"ndr.format.ced.read_SOMSMR_sampleinterval"},{"location":"reference/%2Bndr/%2Bformat/%2Bced/read_SOMSMR_sampleinterval.m/#ndrformatcedread_somsmr_sampleinterval","text":"ndr.format.ced.read_SOMSMR_sampleinterval - Reads sample interval from a CED SOM/SMR file [SAMPLEINTERVAL,TOTAL_SAMPLES,TOTAL_TIME,BLOCKINFO] = ndr.format.ced.read_SOMSMR_sampleinterval(FILENAME, ... HEADER, CHANNEL_NUMBER) Inputs: Reads the sampleinterval (in seconds) for a given channel from the Cambridge Electronic Design .SOM or .SMR file FILENAME. The file HEADER information can be provided in HEADER. If HEADER is empty, then it will be read from the file. CHANNEL_NUMBER is the the channel number for which to return data; it corresponds to the channel number in the Spike2 .SMR file (that is, in the Sampling Configuration that was used on Spike2). Outputs: SAMPLE_INTERVAL - each column contains samples from an individual channel; if more than one channel has been requested, DATA will have more than one column. TOTAL_SAMPLES - The total number of (amplifier or digital) samples estimated to be in the file. TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file, in seconds. See also: ndr.format.ced.read_SOMSMR_datafile, ndr.format.ced.read_SOMSMR_header","title":"ndr.format.ced.read_SOMSMR_sampleinterval"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/Intan_RHD2000_blockinfo.m/","text":"ndr.format.intan.Intan_RHD2000_blockinfo \u00b6 INTAN_RHD2000_BLOCKINFO - Block information for an Intan RHD2000 file [BLOCK_INFO, BYTES_PER_BLOCK, BYTES_PRESENT, NUMDATABLOCKS] = ... INTAN_RHD2000_BLOCKINFO(FILENAME [, HEADER]) Computes the parameters of each data block of an Intan_RHD_2000 file. The Intan 2000 RHD file type is organized into a header, and then data blocks of samples of the various channel types that the Intan demo board can sample. This file, along with the HEADER, computes the structure of these data blocks that are needed to interpret each data block. FILENAME should be the name of an RHD2000 file (normally with extension '.rhd'). HEADER should be the header information structure that is returned by READ_INTAN_RHD2000_HEADER; if it is left blank, it will be read from the file. BLOCK_INFO is a structure describing the parameters of each block. BYTES_PER_BLOCK is the number of bytes per data block BYTES_PRESENT is the number of non-header bytes in the file. NUMDATABLOCKS is the number of data blocks in the file. See also: READ_INTAN_RHD2000_HEADER, READ_INTAN_RHD2000_DATAFILE, CAT_INTAN_RHD2000_FILES","title":"ndr.format.intan.Intan_RHD2000_blockinfo"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/Intan_RHD2000_blockinfo.m/#ndrformatintanintan_rhd2000_blockinfo","text":"INTAN_RHD2000_BLOCKINFO - Block information for an Intan RHD2000 file [BLOCK_INFO, BYTES_PER_BLOCK, BYTES_PRESENT, NUMDATABLOCKS] = ... INTAN_RHD2000_BLOCKINFO(FILENAME [, HEADER]) Computes the parameters of each data block of an Intan_RHD_2000 file. The Intan 2000 RHD file type is organized into a header, and then data blocks of samples of the various channel types that the Intan demo board can sample. This file, along with the HEADER, computes the structure of these data blocks that are needed to interpret each data block. FILENAME should be the name of an RHD2000 file (normally with extension '.rhd'). HEADER should be the header information structure that is returned by READ_INTAN_RHD2000_HEADER; if it is left blank, it will be read from the file. BLOCK_INFO is a structure describing the parameters of each block. BYTES_PER_BLOCK is the number of bytes per data block BYTES_PRESENT is the number of non-header bytes in the file. NUMDATABLOCKS is the number of data blocks in the file. See also: READ_INTAN_RHD2000_HEADER, READ_INTAN_RHD2000_DATAFILE, CAT_INTAN_RHD2000_FILES","title":"ndr.format.intan.Intan_RHD2000_blockinfo"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/cat_Intan_RHD2000_files.m/","text":"ndr.format.intan.cat_Intan_RHD2000_files \u00b6 CAT_INTAN_RHD2000_FILES - Concatenate multiple RHD files together STATUS = CAT_INTAN_RHD2000_FILES(FILENAME1, FILENAME2, ...) Concatenate multiple RHD files together. Produces a large file named ['cat' FILENAME1]. Note that the filename information in the header of ['cat' FILENAME1] will still be FILENAME1. STATUS should always return 0 if there was no error. See also: READ_INTAN_RHD2000_DATAFILE, READ_INTAN_RHD2000_HEADER","title":"ndr.format.intan.cat_Intan_RHD2000_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/cat_Intan_RHD2000_files.m/#ndrformatintancat_intan_rhd2000_files","text":"CAT_INTAN_RHD2000_FILES - Concatenate multiple RHD files together STATUS = CAT_INTAN_RHD2000_FILES(FILENAME1, FILENAME2, ...) Concatenate multiple RHD files together. Produces a large file named ['cat' FILENAME1]. Note that the filename information in the header of ['cat' FILENAME1] will still be FILENAME1. STATUS should always return 0 if there was no error. See also: READ_INTAN_RHD2000_DATAFILE, READ_INTAN_RHD2000_HEADER","title":"ndr.format.intan.cat_Intan_RHD2000_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/concat_rhd_files.m/","text":"ndr.format.intan.concat_rhd_files \u00b6 CONCAT_RHD_FILES - Concatenate RHD files and rename the original files CONCAT_RHD_FILES(DIRNAME) Concatenates all of the .rhd files in a directory into one larger file, and then renames the original .rhd files so the extension is .rhd_original. See also: CAT_INTAN_RHD2000_FILES","title":"ndr.format.intan.concat_rhd_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/concat_rhd_files.m/#ndrformatintanconcat_rhd_files","text":"CONCAT_RHD_FILES - Concatenate RHD files and rename the original files CONCAT_RHD_FILES(DIRNAME) Concatenates all of the .rhd files in a directory into one larger file, and then renames the original .rhd files so the extension is .rhd_original. See also: CAT_INTAN_RHD2000_FILES","title":"ndr.format.intan.concat_rhd_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/copy_Intan_RHD2000_blocks.m/","text":"ndr.format.intan.copy_Intan_RHD2000_blocks \u00b6 COPY_INTAN_RHD2000_BLOCKS - Concatenate multiple RHD blocks together STATUS = COPY_INTAN_RHD2000_BLOCKS(FILENAME_IN, B1, B2, FILENAME_OUT) Copies data blocks from B1 to B2 from the RHD 2000 file FILENAME_IN and writes it to the file FILENAME_OUT. The first block is numbered 1. This is useful for trimming files down to certain blocks. Check out INTAN_RHD2000_BLOCKINFO to understand the relationship between data blocks and samples (short version: data blocks are not samples, they are regular collections of samples). STATUS should always return 0 if there was no error. See also: READ_INTAN_RHD2000_DATAFILE, READ_INTAN_RHD2000_HEADER, INTAN_RHD2000_BLOCKINFO","title":"ndr.format.intan.copy_Intan_RHD2000_blocks"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/copy_Intan_RHD2000_blocks.m/#ndrformatintancopy_intan_rhd2000_blocks","text":"COPY_INTAN_RHD2000_BLOCKS - Concatenate multiple RHD blocks together STATUS = COPY_INTAN_RHD2000_BLOCKS(FILENAME_IN, B1, B2, FILENAME_OUT) Copies data blocks from B1 to B2 from the RHD 2000 file FILENAME_IN and writes it to the file FILENAME_OUT. The first block is numbered 1. This is useful for trimming files down to certain blocks. Check out INTAN_RHD2000_BLOCKINFO to understand the relationship between data blocks and samples (short version: data blocks are not samples, they are regular collections of samples). STATUS should always return 0 if there was no error. See also: READ_INTAN_RHD2000_DATAFILE, READ_INTAN_RHD2000_HEADER, INTAN_RHD2000_BLOCKINFO","title":"ndr.format.intan.copy_Intan_RHD2000_blocks"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/fread_QString.m/","text":"ndr.format.intan.fread_QString \u00b6 a = read_QString(fid) Read Qt style QString. The first 32-bit unsigned number indicates the length of the string (in bytes). If this number equals 0xFFFFFFFF, the string is null. From Intan Technologies","title":"ndr.format.intan.fread_QString"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/fread_QString.m/#ndrformatintanfread_qstring","text":"a = read_QString(fid) Read Qt style QString. The first 32-bit unsigned number indicates the length of the string (in bytes). If this number equals 0xFFFFFFFF, the string is null. From Intan Technologies","title":"ndr.format.intan.fread_QString"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_datafile.m/","text":"ndr.format.intan.read_Intan_RHD2000_datafile \u00b6 READ_INTAN_RHD2000_DATAFILE - Read samples from an Intan data file [DATA,TOTAL_SAMPLES,TOTAL_TIME,BLOCKINFO] = READ_INTAN_RHD2000_DATAFILE(FILENAME, HEADER, CHANNEL_TYPE, CHANNEL_NUMBERS, T0, T1); Inputs: Reads data from the Intan Technologies .rhd 2000 file FILENAME. The file HEADER information can be provided in HEADER. If HEADER is empty, then it will be read from the file. CHANNEL_TYPE is the type of channel to be read (use table below). CHANNEL_NUMBERS are the the channel numbers for which to return data (randing from 1 to the number of channels of that type sampled). CHANNEL_NUMBERS are from 1...N where N is the number of channels ENABLED in the recording. 1 is the first channel enabled, 2 is the 2nd channel enabled, etc. One can examine the header file to see its correspondance with Intan bank and channel indexes (e.g., the first channel, 1, may be 'amp-A-000'). T0 is the time to start reading (the beginning of the recording is 0) and T1 is the time to stop reading. If T0 is negative, we will start with time 0. If T1 is INF, we will use the end time of the whole file. CHANNEL_TYPE values: Value: | Meaning: 'time', 'timestamps', or 1 | read timestamps of samples 'amp', 'amplifier' or 2 | read amplifier channels 'aux', 'aux_in', or 3 | read auxiliary input channels 'supply', or 4 | read supply voltages 'temp', or 5 | read temperature sensor 'adc', or 6 | read analog to digital converter signals 'din', 'digital_in', or 7 | read digital input (a single channel of 16 bit values) 'dout', 'digital_out', or 8 | read digital output signal (a single channel) Outputs: DATA - each column contains samples from an individual channel; if more than one channel has been requested, DATA will have more than one column. TOTAL_SAMPLES - The total number of (amplifier or digital) samples estimated to be in the file. TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file, in seconds. Notes: (1) The Intan RHD2000 board has its own clock. Asking this function to read at time T0=0 will read the first sample in the file. This time might correspond to some other time on the Intan board. Reading the 'time' channel will indicate the time of the sample on the board's clock. (2) This function performs no filtering. Even if the user had checked for the RHD2000 software to use a 60Hz notch or a high-pass filter, this function returns the raw data. See also: READ_INTAN_RHD2000_HEADER 2014-12-08 SDV - wrote it and tested it","title":"ndr.format.intan.read_Intan_RHD2000_datafile"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_datafile.m/#ndrformatintanread_intan_rhd2000_datafile","text":"READ_INTAN_RHD2000_DATAFILE - Read samples from an Intan data file [DATA,TOTAL_SAMPLES,TOTAL_TIME,BLOCKINFO] = READ_INTAN_RHD2000_DATAFILE(FILENAME, HEADER, CHANNEL_TYPE, CHANNEL_NUMBERS, T0, T1); Inputs: Reads data from the Intan Technologies .rhd 2000 file FILENAME. The file HEADER information can be provided in HEADER. If HEADER is empty, then it will be read from the file. CHANNEL_TYPE is the type of channel to be read (use table below). CHANNEL_NUMBERS are the the channel numbers for which to return data (randing from 1 to the number of channels of that type sampled). CHANNEL_NUMBERS are from 1...N where N is the number of channels ENABLED in the recording. 1 is the first channel enabled, 2 is the 2nd channel enabled, etc. One can examine the header file to see its correspondance with Intan bank and channel indexes (e.g., the first channel, 1, may be 'amp-A-000'). T0 is the time to start reading (the beginning of the recording is 0) and T1 is the time to stop reading. If T0 is negative, we will start with time 0. If T1 is INF, we will use the end time of the whole file. CHANNEL_TYPE values: Value: | Meaning: 'time', 'timestamps', or 1 | read timestamps of samples 'amp', 'amplifier' or 2 | read amplifier channels 'aux', 'aux_in', or 3 | read auxiliary input channels 'supply', or 4 | read supply voltages 'temp', or 5 | read temperature sensor 'adc', or 6 | read analog to digital converter signals 'din', 'digital_in', or 7 | read digital input (a single channel of 16 bit values) 'dout', 'digital_out', or 8 | read digital output signal (a single channel) Outputs: DATA - each column contains samples from an individual channel; if more than one channel has been requested, DATA will have more than one column. TOTAL_SAMPLES - The total number of (amplifier or digital) samples estimated to be in the file. TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file, in seconds. Notes: (1) The Intan RHD2000 board has its own clock. Asking this function to read at time T0=0 will read the first sample in the file. This time might correspond to some other time on the Intan board. Reading the 'time' channel will indicate the time of the sample on the board's clock. (2) This function performs no filtering. Even if the user had checked for the RHD2000 software to use a 60Hz notch or a high-pass filter, this function returns the raw data. See also: READ_INTAN_RHD2000_HEADER 2014-12-08 SDV - wrote it and tested it","title":"ndr.format.intan.read_Intan_RHD2000_datafile"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_directory.m/","text":"ndr.format.intan.read_Intan_RHD2000_directory \u00b6 READ_INTAN_RHD2000_DIRECTORY - Read samples from an Intan data directory (1 file per channel format) [DATA,TOTAL_SAMPLES,TOTAL_TIME,BLOCKINFO] = READ_INTAN_RHD2000_DIRECTORY(DIRECTORYNAME, HEADER, CHANNEL_TYPE, CHANNEL_NUMBERS, T0, T1); Inputs: Reads data from the Intan Technologies .rhd 2000 directory DIRECTORYNAME. The file HEADER information can be provided in HEADER. If HEADER is empty, then it will be read from the file. CHANNEL_TYPE is the type of channel to be read (use table below). CHANNEL_NUMBERS are the the channel numbers for which to return data (randing from 1 to the number of channels of that type sampled). CHANNEL_NUMBERS are from 1...N where N is the number of channels ENABLED in the recording. 1 is the first channel enabled, 2 is the 2nd channel enabled, etc. One can examine the header file to see its correspondance with Intan bank and channel indexes (e.g., the first channel may be 'amp-A-000'). T0 is the time to start reading (the beginning of the recording is 0) and T1 is the time to stop reading. If T0 is negative, we will start with time 0. If T1 is INF, we will use the end time of the whole file. NOTE: It is assumed that the DIRECTORY is a directory/folder with files written in the Intan \"1 file per channel\" format. CHANNEL_TYPE values: Value: | Meaning: 'time', 'timestamps', or 1 | read timestamps of samples 'amp', 'amplifier' or 2 | read amplifier channels 'aux', 'aux_in', or 3 | read auxiliary input channels 'supply', or 4 | read supply voltages 'temp', or 5 | read temperature sensor 'adc', or 6 | read analog to digital converter signals 'din', 'digital_in', or 7 | read digital input (a single channel of 16 bit values) 'dout', 'digital_out', or 8 | read digital output signal (a single channel) Outputs: DATA - each column contains samples from an individual channel; if more than one channel has been requested, DATA will have more than one column. TOTAL_SAMPLES - The total number of (amplifier or digital) samples estimated to be in the file. TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file, in seconds. Notes: (1) The Intan RHD2000 board has its own clock. Asking this function to read at time T0=0 will read the first sample in the file. This time might correspond to some other time on the Intan board. Reading the 'time' channel will indicate the time of the sample on the board's clock. (2) This function performs no filtering. Even if the user had checked for the RHD2000 software to use a 60Hz notch or a high-pass filter, this function returns the raw data. See also: READ_INTAN_RHD2000_HEADER 2020-06-11 SDV - wrote it, checked time, amp, aux, supply, din could use more testing with different channel configurations and ADC and DOUT note: dout seems to write to disk even if it is not in the header file but this function will only examine channels that are listed in the header file","title":"ndr.format.intan.read_Intan_RHD2000_directory"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_directory.m/#ndrformatintanread_intan_rhd2000_directory","text":"READ_INTAN_RHD2000_DIRECTORY - Read samples from an Intan data directory (1 file per channel format) [DATA,TOTAL_SAMPLES,TOTAL_TIME,BLOCKINFO] = READ_INTAN_RHD2000_DIRECTORY(DIRECTORYNAME, HEADER, CHANNEL_TYPE, CHANNEL_NUMBERS, T0, T1); Inputs: Reads data from the Intan Technologies .rhd 2000 directory DIRECTORYNAME. The file HEADER information can be provided in HEADER. If HEADER is empty, then it will be read from the file. CHANNEL_TYPE is the type of channel to be read (use table below). CHANNEL_NUMBERS are the the channel numbers for which to return data (randing from 1 to the number of channels of that type sampled). CHANNEL_NUMBERS are from 1...N where N is the number of channels ENABLED in the recording. 1 is the first channel enabled, 2 is the 2nd channel enabled, etc. One can examine the header file to see its correspondance with Intan bank and channel indexes (e.g., the first channel may be 'amp-A-000'). T0 is the time to start reading (the beginning of the recording is 0) and T1 is the time to stop reading. If T0 is negative, we will start with time 0. If T1 is INF, we will use the end time of the whole file. NOTE: It is assumed that the DIRECTORY is a directory/folder with files written in the Intan \"1 file per channel\" format. CHANNEL_TYPE values: Value: | Meaning: 'time', 'timestamps', or 1 | read timestamps of samples 'amp', 'amplifier' or 2 | read amplifier channels 'aux', 'aux_in', or 3 | read auxiliary input channels 'supply', or 4 | read supply voltages 'temp', or 5 | read temperature sensor 'adc', or 6 | read analog to digital converter signals 'din', 'digital_in', or 7 | read digital input (a single channel of 16 bit values) 'dout', 'digital_out', or 8 | read digital output signal (a single channel) Outputs: DATA - each column contains samples from an individual channel; if more than one channel has been requested, DATA will have more than one column. TOTAL_SAMPLES - The total number of (amplifier or digital) samples estimated to be in the file. TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file, in seconds. Notes: (1) The Intan RHD2000 board has its own clock. Asking this function to read at time T0=0 will read the first sample in the file. This time might correspond to some other time on the Intan board. Reading the 'time' channel will indicate the time of the sample on the board's clock. (2) This function performs no filtering. Even if the user had checked for the RHD2000 software to use a 60Hz notch or a high-pass filter, this function returns the raw data. See also: READ_INTAN_RHD2000_HEADER 2020-06-11 SDV - wrote it, checked time, amp, aux, supply, din could use more testing with different channel configurations and ADC and DOUT note: dout seems to write to disk even if it is not in the header file but this function will only examine channels that are listed in the header file","title":"ndr.format.intan.read_Intan_RHD2000_directory"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_header.m/","text":"ndr.format.intan.read_Intan_RHD2000_header \u00b6 READ_INTAN_RHD2000_HEADER - Read header information from an Intan data file HEADER = READ_INTAN_RHD2000_HEADER(FILENAME) Returns a structure HEADER with all of the information fields that are stored in the Intan RHD2000 file FILENAME. HEADER contains several substructures: fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency spike_triggers | Information about spike triggers for each amplifier channel amplifier_channels | Information about amplifier channels aux_input_channels | Information about auxillary input channels supply_voltage_channels | Information about supply voltage channels board_adc_channels | Information about the board analog to digital converter channels board_dig_in_channels | Digital input channels board_dig_out_channels | Digital output channels num_temp_sensor_channels| Number of temperature sensor channels See also: READ_INTAN_RDH2000_DATAFILE","title":"ndr.format.intan.read_Intan_RHD2000_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bintan/read_Intan_RHD2000_header.m/#ndrformatintanread_intan_rhd2000_header","text":"READ_INTAN_RHD2000_HEADER - Read header information from an Intan data file HEADER = READ_INTAN_RHD2000_HEADER(FILENAME) Returns a structure HEADER with all of the information fields that are stored in the Intan RHD2000 file FILENAME. HEADER contains several substructures: fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency spike_triggers | Information about spike triggers for each amplifier channel amplifier_channels | Information about amplifier channels aux_input_channels | Information about auxillary input channels supply_voltage_channels | Information about supply voltage channels board_adc_channels | Information about the board analog to digital converter channels board_dig_in_channels | Digital input channels board_dig_out_channels | Digital output channels num_temp_sensor_channels| Number of temperature sensor channels See also: READ_INTAN_RDH2000_DATAFILE","title":"ndr.format.intan.read_Intan_RHD2000_header"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/copy_rec_files.m/","text":"ndr.format.spikegadgets.copy_rec_files \u00b6 COPY_SPIKEGADGETS_REC_FILES Shortens .rec files from sample to sample provided in arguments","title":"ndr.format.spikegadgets.copy_rec_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/copy_rec_files.m/#ndrformatspikegadgetscopy_rec_files","text":"COPY_SPIKEGADGETS_REC_FILES Shortens .rec files from sample to sample provided in arguments","title":"ndr.format.spikegadgets.copy_rec_files"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_analogChannels.m/","text":"ndr.format.spikegadgets.read_rec_analogChannels \u00b6 [recData, timestamps] = read_SpikeGadgets_analogChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the analog channels you want to extract, designated by the byte location (1-based), i.e., [3 5 7] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- an N by M matrix with N data points and M channels (M is equal to the number of channels in the input)","title":"ndr.format.spikegadgets.read_rec_analogChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_analogChannels.m/#ndrformatspikegadgetsread_rec_analogchannels","text":"[recData, timestamps] = read_SpikeGadgets_analogChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the analog channels you want to extract, designated by the byte location (1-based), i.e., [3 5 7] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- an N by M matrix with N data points and M channels (M is equal to the number of channels in the input)","title":"ndr.format.spikegadgets.read_rec_analogChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_config.m/","text":"ndr.format.spikegadgets.read_rec_config \u00b6 out = read_SpikeGadgets_config(filename) Reads the configuration section of a Trodes (.rec) file xml header is parsed and read out is a 1x1 struct with 12 fields configText - length(configText) is the number of characters in header filePath - <---> filePrefix - <---> realtimeMode - logical saveDisplayedChanOnly - logical systemTimeAtCreation - str with systemTimeAtCreation timestampAtCreation - str with timestampAtCreation numChannels - str of number of channels in nTrodes (sum of all trodes channels) samplingRate - str of sampling rate headerSize - str of sum of numBytes in devices / 2 nTrodes - struct that lists nTrodes with structs inside that describe each channel headerChannels - channels listed in AuxDisplayConfiguration","title":"ndr.format.spikegadgets.read_rec_config"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_config.m/#ndrformatspikegadgetsread_rec_config","text":"out = read_SpikeGadgets_config(filename) Reads the configuration section of a Trodes (.rec) file xml header is parsed and read out is a 1x1 struct with 12 fields configText - length(configText) is the number of characters in header filePath - <---> filePrefix - <---> realtimeMode - logical saveDisplayedChanOnly - logical systemTimeAtCreation - str with systemTimeAtCreation timestampAtCreation - str with timestampAtCreation numChannels - str of number of channels in nTrodes (sum of all trodes channels) samplingRate - str of sampling rate headerSize - str of sum of numBytes in devices / 2 nTrodes - struct that lists nTrodes with structs inside that describe each channel headerChannels - channels listed in AuxDisplayConfiguration","title":"ndr.format.spikegadgets.read_rec_config"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_digitalChannels.m/","text":"ndr.format.spikegadgets.read_rec_digitalChannels \u00b6 [recData, timestamps] = read_SpikeGadgets_digitalChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the digital channels you want to extract, designated as an N by 2 matrix [byte(1-based) bit(1-based)] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- a structure continaing the digital state of the channels","title":"ndr.format.spikegadgets.read_rec_digitalChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_digitalChannels.m/#ndrformatspikegadgetsread_rec_digitalchannels","text":"[recData, timestamps] = read_SpikeGadgets_digitalChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the digital channels you want to extract, designated as an N by 2 matrix [byte(1-based) bit(1-based)] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- a structure continaing the digital state of the channels","title":"ndr.format.spikegadgets.read_rec_digitalChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_trodeChannels.m/","text":"ndr.format.spikegadgets.read_rec_trodeChannels \u00b6 [recData, timestamps] = read_SpikeGadgets_trodeChannels(filename,NumChannels,channels,samplingRate,headerSize, s0, s1) ) Imports channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the channels you want to extract (extracting all channels at once may overload memory) numbers 1-120 which belong to each 4 of the 30 tetrodes samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). calculated from (MCUnumbytes + ECUnumbytes + 1) / 2 = 17 s0 - the first sample number to read s1 - the last sample number to read OUTPUTS timestamps--the system clock when each sample was taken recData-- an N by M matrix with N data points and M channels (M is equal to the number of channels in the input)","title":"ndr.format.spikegadgets.read_rec_trodeChannels"},{"location":"reference/%2Bndr/%2Bformat/%2Bspikegadgets/read_rec_trodeChannels.m/#ndrformatspikegadgetsread_rec_trodechannels","text":"[recData, timestamps] = read_SpikeGadgets_trodeChannels(filename,NumChannels,channels,samplingRate,headerSize, s0, s1) ) Imports channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the channels you want to extract (extracting all channels at once may overload memory) numbers 1-120 which belong to each 4 of the 30 tetrodes samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). calculated from (MCUnumbytes + ECUnumbytes + 1) / 2 = 17 s0 - the first sample number to read s1 - the last sample number to read OUTPUTS timestamps--the system clock when each sample was taken recData-- an N by M matrix with N data points and M channels (M is equal to the number of channels in the input)","title":"ndr.format.spikegadgets.read_rec_trodeChannels"},{"location":"reference/%2Bndr/%2Bfun/ndrpath.m/","text":"ndr.fun.ndrpath \u00b6 ndr.fun.ndrpath - return the path to NDR, the Neuroscience Data Reader library in Matlab P = ndr.fun.ndrpath() Returns the full path to the ndr package in Matlab.","title":"ndr.fun.ndrpath"},{"location":"reference/%2Bndr/%2Bfun/ndrpath.m/#ndrfunndrpath","text":"ndr.fun.ndrpath - return the path to NDR, the Neuroscience Data Reader library in Matlab P = ndr.fun.ndrpath() Returns the full path to the ndr package in Matlab.","title":"ndr.fun.ndrpath"},{"location":"reference/%2Bndr/%2Bfun/ndrresource.m/","text":"ndr.fun.ndrresource \u00b6 NDRRESOURCE - read an NDR resource file J = ndr.fun.ndrresource(RESOURCENAME) Reads the JSON resource file RESOURCENAME from the NDR resource directory. Returns a Matlab structure that is output by JSONDECODE. See also: ndr.fun.ndrpath, JSONDECODE","title":"ndr.fun.ndrresource"},{"location":"reference/%2Bndr/%2Bfun/ndrresource.m/#ndrfunndrresource","text":"NDRRESOURCE - read an NDR resource file J = ndr.fun.ndrresource(RESOURCENAME) Reads the JSON resource file RESOURCENAME from the NDR resource directory. Returns a Matlab structure that is output by JSONDECODE. See also: ndr.fun.ndrpath, JSONDECODE","title":"ndr.fun.ndrresource"},{"location":"reference/%2Bndr/%2Breader/base.m/","text":"CLASS ndr.reader.base \u00b6 READER - create a new Neuroscience Data Reader Base object READER_OBJ = ndr.reader.base() Creates an Neuroscence Data Reader object of the indicated type. Superclasses \u00b6 none Properties \u00b6 none Methods \u00b6 Method Description base create a new Neuroscience Data Reader Base object canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device for a given epoch mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch Methods help \u00b6 base - create a new Neuroscience Data Reader Base object READER_OBJ = ndr.reader.base() Creates an Neuroscence Data Reader object of the indicated type. canbereadtogether - can the channels in a channel struct be read in a single function call? [B,ERRORMSG] = CANBEREADTOGETHER(NDR_READER_BASE_OBJ, CHANNELSTRUCT) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call. If they cannot be read together, a description is provided in ERRORMSG. In the abstract class, this returns 1 if all of the samplerate values are the same and none are NaNs. CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type samplerate The sampling rate of this channel, or NaN if not applicable. ------------------------------------------------------------------------------ in the abstract class, this returns 1 if all the samplerates are the same and none are NaNs daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS(NDR_READER_BASE_OBJ, ... CHANNELPREFIX, CHANNELNUMBERS, EPOCHSTREAMS, EPOCH_SELECT) Inputs: For a set of CHANNELPREFIX (cell array of channel prefixes that describe channels for this device) and CHANNELNUMBER (array of channel numbers, 1 for each entry in CHANNELPREFIX), and for a given recording epoch (specified by EPOCHSTREAMS and EPOCH_SELECT), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Output: CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). For the generic ndr.reader.base, this returns a single clock type 'dev_local'time'; See also: ndr.time.clocktype getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELSEPOCH(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_BASE_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the beginning (t0) and end (t1) times of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT. The abstract class always returns {[NaN NaN]}. See also: ndr.time.clocktype, ndr.reader.base/epochclock","title":"ndr.reader.base"},{"location":"reference/%2Bndr/%2Breader/base.m/#class-ndrreaderbase","text":"READER - create a new Neuroscience Data Reader Base object READER_OBJ = ndr.reader.base() Creates an Neuroscence Data Reader object of the indicated type.","title":"CLASS ndr.reader.base"},{"location":"reference/%2Bndr/%2Breader/base.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/base.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/base.m/#methods","text":"Method Description base create a new Neuroscience Data Reader Base object canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device for a given epoch mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/base.m/#methods-help","text":"base - create a new Neuroscience Data Reader Base object READER_OBJ = ndr.reader.base() Creates an Neuroscence Data Reader object of the indicated type. canbereadtogether - can the channels in a channel struct be read in a single function call? [B,ERRORMSG] = CANBEREADTOGETHER(NDR_READER_BASE_OBJ, CHANNELSTRUCT) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call. If they cannot be read together, a description is provided in ERRORMSG. In the abstract class, this returns 1 if all of the samplerate values are the same and none are NaNs. CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type samplerate The sampling rate of this channel, or NaN if not applicable. ------------------------------------------------------------------------------ in the abstract class, this returns 1 if all the samplerates are the same and none are NaNs daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS(NDR_READER_BASE_OBJ, ... CHANNELPREFIX, CHANNELNUMBERS, EPOCHSTREAMS, EPOCH_SELECT) Inputs: For a set of CHANNELPREFIX (cell array of channel prefixes that describe channels for this device) and CHANNELNUMBER (array of channel numbers, 1 for each entry in CHANNELPREFIX), and for a given recording epoch (specified by EPOCHSTREAMS and EPOCH_SELECT), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Output: CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). For the generic ndr.reader.base, this returns a single clock type 'dev_local'time'; See also: ndr.time.clocktype getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELSEPOCH(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCH ,S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_BASE_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. samplerate - GET THE SAMPLE RATE FOR SPECIFIC CHANNEL SR = SAMPLERATE(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the beginning (t0) and end (t1) times of the epoch defined by EPOCHSTREAMS and EPOCH_SELECT. The abstract class always returns {[NaN NaN]}. See also: ndr.time.clocktype, ndr.reader.base/epochclock","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/","text":"CLASS ndr.reader.ced_smr \u00b6 CED_SMR - reader class for Cambridge Electronic Design (CED) SMR files This class reads data from CED Spike2 .SMR or .SON file formats. It depends on sigTOOL by Malcolm Lidierth (http://sigtool.sourceforge.net). sigTOOL is also included in the https://github.com/VH-Lab/vhlab-thirdparty-matlab bundle and can be installed with instructions at http://code.vhlab.org. Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether can the channels in a channel struct be read in a single function call? ced_smr Create a new NDR_NDR_READER_CEDSMR object cedsmrfile Identify the .SMR file out of a file list cedsmrheader2readerchanneltype Convert between Intan headers and the ndr.ndr.reader channel types daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch Methods help \u00b6 canbereadtogether - can the channels in a channel struct be read in a single function call? [B,ERRORMSG] = CANBEREADTOGETHER(NDR_READER_BASE_OBJ, CHANNELSTRUCT) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call. If they cannot be read together, a description is provided in ERRORMSG. In the abstract class, this returns 1 if all of the samplerate values are the same and none are NaNs. CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type samplerate The sampling rate of this channel, or NaN if not applicable. ------------------------------------------------------------------------------ in the abstract class, this returns 1 if all the samplerates are the same and none are NaNs Help for ndr.reader.ced_smr/canbereadtogether is inherited from superclass NDR.READER.BASE ced_smr - Create a new NDR_NDR_READER_CEDSMR object N = ndr.reader.ced_smr(NAME,THEFILENAVIGATOR) Creates a new object for reading Cambridge Electronic Design SMR files. cedsmrfile - Identify the .SMR file out of a file list FILENAME = CEDSMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). cedsmrheader2readerchanneltype - Convert between Intan headers and the ndr.ndr.reader channel types CHANNELTYPE = CEDSMRHEADER2READERCHANNELTYPE(CEDSMRCHANNELTYPE) Given an Intan header file type, returns the standard ndr.ndr.reader channel type daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS(NDR_READER_BASE_OBJ, ... CHANNELPREFIX, CHANNELNUMBERS, EPOCHSTREAMS, EPOCH_SELECT) Inputs: For a set of CHANNELPREFIX (cell array of channel prefixes that describe channels for this device) and CHANNELNUMBER (array of channel numbers, 1 for each entry in CHANNELPREFIX), and for a given recording epoch (specified by EPOCHSTREAMS and EPOCH_SELECT), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Output: CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). For the generic ndr.reader.base, this returns a single clock type 'dev_local'time'; See also: ndr.time.clocktype Help for ndr.reader.ced_smr/epochclock is inherited from superclass NDR.READER.BASE getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELS(THEDEV, EPOCHFILES, EPOCHSELECT) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.ced_smr.mfdaq_channeltypes is inherited from superclass NDR.READER.BASE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.ced_smr.mfdaq_prefix is inherited from superclass NDR.READER.BASE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX Help for ndr.reader.ced_smr.mfdaq_type is inherited from superclass NDR.READER.BASE readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data (each column contains data from an indvidual channel) readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_CEDSMR_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', 'text') CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the set of epoch files DATA is a multiple-column vector; the first column has the time of the event. The remaining columns indicate the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDR_NDR_READER_CEDSMR_OBJ, EPOCHFILES, EPOCHSELECT) Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. See also: ndi.time.clocktype, EPOCHCLOCK","title":"ndr.reader.ced_smr"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#class-ndrreaderced_smr","text":"CED_SMR - reader class for Cambridge Electronic Design (CED) SMR files This class reads data from CED Spike2 .SMR or .SON file formats. It depends on sigTOOL by Malcolm Lidierth (http://sigtool.sourceforge.net). sigTOOL is also included in the https://github.com/VH-Lab/vhlab-thirdparty-matlab bundle and can be installed with instructions at http://code.vhlab.org.","title":"CLASS ndr.reader.ced_smr"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#methods","text":"Method Description canbereadtogether can the channels in a channel struct be read in a single function call? ced_smr Create a new NDR_NDR_READER_CEDSMR object cedsmrfile Identify the .SMR file out of a file list cedsmrheader2readerchanneltype Convert between Intan headers and the ndr.ndr.reader channel types daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch getchannelsepoch List the channels that are available on this device mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/ced_smr.m/#methods-help","text":"canbereadtogether - can the channels in a channel struct be read in a single function call? [B,ERRORMSG] = CANBEREADTOGETHER(NDR_READER_BASE_OBJ, CHANNELSTRUCT) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call. If they cannot be read together, a description is provided in ERRORMSG. In the abstract class, this returns 1 if all of the samplerate values are the same and none are NaNs. CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type samplerate The sampling rate of this channel, or NaN if not applicable. ------------------------------------------------------------------------------ in the abstract class, this returns 1 if all the samplerates are the same and none are NaNs Help for ndr.reader.ced_smr/canbereadtogether is inherited from superclass NDR.READER.BASE ced_smr - Create a new NDR_NDR_READER_CEDSMR object N = ndr.reader.ced_smr(NAME,THEFILENAVIGATOR) Creates a new object for reading Cambridge Electronic Design SMR files. cedsmrfile - Identify the .SMR file out of a file list FILENAME = CEDSMRFILE(FILELIST) Given a cell array of strings FILELIST with full-path file names, this function identifies the first file with an extension '.smr' (case insensitive) and returns the result in FILENAME (full-path file name). cedsmrheader2readerchanneltype - Convert between Intan headers and the ndr.ndr.reader channel types CHANNELTYPE = CEDSMRHEADER2READERCHANNELTYPE(CEDSMRCHANNELTYPE) Given an Intan header file type, returns the standard ndr.ndr.reader channel type daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS(NDR_READER_BASE_OBJ, ... CHANNELPREFIX, CHANNELNUMBERS, EPOCHSTREAMS, EPOCH_SELECT) Inputs: For a set of CHANNELPREFIX (cell array of channel prefixes that describe channels for this device) and CHANNELNUMBER (array of channel numbers, 1 for each entry in CHANNELPREFIX), and for a given recording epoch (specified by EPOCHSTREAMS and EPOCH_SELECT), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Output: CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). For the generic ndr.reader.base, this returns a single clock type 'dev_local'time'; See also: ndr.time.clocktype Help for ndr.reader.ced_smr/epochclock is inherited from superclass NDR.READER.BASE getchannelsepoch - List the channels that are available on this device CHANNELS = GETCHANNELS(THEDEV, EPOCHFILES, EPOCHSELECT) Returns the channel list of acquired channels in this session CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.ced_smr.mfdaq_channeltypes is inherited from superclass NDR.READER.BASE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.ced_smr.mfdaq_prefix is inherited from superclass NDR.READER.BASE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX Help for ndr.reader.ced_smr.mfdaq_type is inherited from superclass NDR.READER.BASE readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES, S0, S1) CHANNELTYPE is the type of channel to read CHANNEL is a vector of the channel numbers to read, beginning from 1 EPOCHFILES is the cell array of full path filenames for this epoch DATA is the channel data (each column contains data from an indvidual channel) readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [TIMESTAMPS, DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_CEDSMR_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', 'text') CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the set of epoch files DATA is a multiple-column vector; the first column has the time of the event. The remaining columns indicate the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDR_NDR_READER_CEDSMR_OBJ, EPOCHFILES, EPOCHSELECT) Return the beginning (t0) and end (t1) times of the EPOCHFILES that define this epoch in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. See also: ndi.time.clocktype, EPOCHCLOCK","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/","text":"CLASS ndr.reader.intan_rhd \u00b6 NDR_READER_INTAN_RHD - Reader class for Intan Technologies .RHD file This class reads data from Intan Technologies .RHD file format. Intan Technologies: http://intantech.com Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the .RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan intan_rhd Create a new Neuroscience Data Reader object intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndr.ndr.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndr.ndr.reader.mfdaq format mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type mfdaqchanneltype2intanchanneltype Convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndr.ndr.reader.mfdaq channel types and Intan headers readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an Methods help \u00b6 canbereadtogether - can the channels in a channel struct be read in a single function call? [B,ERRORMSG] = CANBEREADTOGETHER(NDR_READER_BASE_OBJ, CHANNELSTRUCT) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call. If they cannot be read together, a description is provided in ERRORMSG. In the abstract class, this returns 1 if all of the samplerate values are the same and none are NaNs. CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type samplerate The sampling rate of this channel, or NaN if not applicable. ------------------------------------------------------------------------------ in the abstract class, this returns 1 if all the samplerates are the same and none are NaNs daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS(NDR_READER_BASE_OBJ, ... CHANNELPREFIX, CHANNELNUMBERS, EPOCHSTREAMS, EPOCH_SELECT) Inputs: For a set of CHANNELPREFIX (cell array of channel prefixes that describe channels for this device) and CHANNELNUMBER (array of channel numbers, 1 for each entry in CHANNELPREFIX), and for a given recording epoch (specified by EPOCHSTREAMS and EPOCH_SELECT), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Output: CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). For the generic ndr.reader.base, this returns a single clock type 'dev_local'time'; See also: ndr.time.clocktype Help for ndr.reader.intan_rhd/epochclock is inherited from superclass NDR.READER.BASE filenamefromepochfiles - Return the file name that corresponds to the .RHD file, or directory in case of directory [FILENAME, PARENTDIR, ISDIRECTORY] = FILENAMEFROMEPOCHFILES(NDR_NDRREADER_INTANREADER_OBJ, FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which one is an .RHD data file. If the 1-file-per-channel mode is used, then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1. getchannelsepoch - List the channels that are available on this Intan device for a given set of files CHANNELS = GETCHANNELSEPOCH(INTANREADER_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Returns the channel list of acquired channels in this epoch. CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data store in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') intan_rhd - Create a new Neuroscience Data Reader object INTAN_RHD_OBJ = INTAN_RHD() Creates a Neuroscience Data Reader object of the Intan Technologies .RHD file format. intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndr.ndr.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.ndr.reader.mfdaq channel type. intanname2mfdaqname - Converts a channel name from Intan native format to ndr.ndr.reader.mfdaq format [CHANNAME] = INTANNAME2MFDAQNAME(NDR_NDRREADER_INTANREADER_OBJ, TYPE, NAME) Given an Intan native channel name (e.g., 'A-000') in NAME and an ndr.ndr.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function produces an ndr.ndr.reader.mfdaq channel name (e.g., 'ai1'). mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.intan_rhd.mfdaq_channeltypes is inherited from superclass NDR.READER.BASE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.intan_rhd.mfdaq_prefix is inherited from superclass NDR.READER.BASE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX Help for ndr.reader.intan_rhd.mfdaq_type is inherited from superclass NDR.READER.BASE mfdaqchanneltype2intanchanneltype - Convert the channel type from generic format of multifuncdaqchannel to the specific Intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE(CHANNELTYPE) The intanchanneltype is a string of the specific channel type for Intan. mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an ndr.ndr.mfdaq channel type string, this function returns the associated fieldname. mfdaqchanneltype2intanheadertype - Convert between the ndr.ndr.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndr.ndr.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(INTANREADER_OBJ, CHANNELTYPE, CHANNEL, EPOCH, S0, S1) CHANNELTYPE is the type of channel to read (single text string, such as 'ai','analog_input','time') CHANNEL is a vector of the channel numbers to read, beginning from 1. EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_BASE_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndr.reader.intan_rhd/readevents_epochsamples_native is inherited from superclass NDR.READER.BASE samplerate - Get the sample rate for specific channel SR = SAMPLERATE(INTANREADER_OBJ, EPOCHSTREAMS, EPOCH_SELECT, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels. CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1(INTAN_RHD_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndr.time.clocktype objects returned by EPOCH_NUMBER. The abstract class always return {[NaN NaN]}. See also: ndr.time.clocktype, EPOCHCLOCK","title":"ndr.reader.intan_rhd"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#class-ndrreaderintan_rhd","text":"NDR_READER_INTAN_RHD - Reader class for Intan Technologies .RHD file This class reads data from Intan Technologies .RHD file format. Intan Technologies: http://intantech.com","title":"CLASS ndr.reader.intan_rhd"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#methods","text":"Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles Return the file name that corresponds to the .RHD file, or directory in case of directory getchannelsepoch List the channels that are available on this Intan intan_rhd Create a new Neuroscience Data Reader object intanheadertype2mfdaqchanneltype Convert between Intan headers and the ndr.ndr.reader.mfdaq channel types intanname2mfdaqname Converts a channel name from Intan native format to ndr.ndr.reader.mfdaq format mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type mfdaqchanneltype2intanchanneltype Convert the channel type from generic format of multifuncdaqchannel mfdaqchanneltype2intanfreqheader Return header name with frequency information for channel type mfdaqchanneltype2intanheadertype Convert between the ndr.ndr.reader.mfdaq channel types and Intan headers readchannels_epochsamples Read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate Get the sample rate for specific channel t0_t1 Return the beginning and end epoch times for an","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/intan_rhd.m/#methods-help","text":"canbereadtogether - can the channels in a channel struct be read in a single function call? [B,ERRORMSG] = CANBEREADTOGETHER(NDR_READER_BASE_OBJ, CHANNELSTRUCT) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call. If they cannot be read together, a description is provided in ERRORMSG. In the abstract class, this returns 1 if all of the samplerate values are the same and none are NaNs. CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type samplerate The sampling rate of this channel, or NaN if not applicable. ------------------------------------------------------------------------------ in the abstract class, this returns 1 if all the samplerates are the same and none are NaNs daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS(NDR_READER_BASE_OBJ, ... CHANNELPREFIX, CHANNELNUMBERS, EPOCHSTREAMS, EPOCH_SELECT) Inputs: For a set of CHANNELPREFIX (cell array of channel prefixes that describe channels for this device) and CHANNELNUMBER (array of channel numbers, 1 for each entry in CHANNELPREFIX), and for a given recording epoch (specified by EPOCHSTREAMS and EPOCH_SELECT), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Output: CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). For the generic ndr.reader.base, this returns a single clock type 'dev_local'time'; See also: ndr.time.clocktype Help for ndr.reader.intan_rhd/epochclock is inherited from superclass NDR.READER.BASE filenamefromepochfiles - Return the file name that corresponds to the .RHD file, or directory in case of directory [FILENAME, PARENTDIR, ISDIRECTORY] = FILENAMEFROMEPOCHFILES(NDR_NDRREADER_INTANREADER_OBJ, FILENAME_ARRAY) Examines the list of filenames in FILENAME_ARRAY (cell array of full path file strings) and determines which one is an .RHD data file. If the 1-file-per-channel mode is used, then PARENTDIR is the name of the directory that holds the data files and ISDIRECTORY is 1. getchannelsepoch - List the channels that are available on this Intan device for a given set of files CHANNELS = GETCHANNELSEPOCH(INTANREADER_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Returns the channel list of acquired channels in this epoch. CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data store in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') intan_rhd - Create a new Neuroscience Data Reader object INTAN_RHD_OBJ = INTAN_RHD() Creates a Neuroscience Data Reader object of the Intan Technologies .RHD file format. intanheadertype2mfdaqchanneltype - Convert between Intan headers and the ndr.ndr.reader.mfdaq channel types CHANNELTYPE = INTANHEADERTYPE2MFDAQCHANNELTYPE(INTANCHANNELTYPE) Given an Intan header file type, returns the standard ndi.ndr.reader.mfdaq channel type. intanname2mfdaqname - Converts a channel name from Intan native format to ndr.ndr.reader.mfdaq format [CHANNAME] = INTANNAME2MFDAQNAME(NDR_NDRREADER_INTANREADER_OBJ, TYPE, NAME) Given an Intan native channel name (e.g., 'A-000') in NAME and an ndr.ndr.reader.mfdaq channel type string (see NDI_DEVICE_MFDAQ), this function produces an ndr.ndr.reader.mfdaq channel name (e.g., 'ai1'). mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.intan_rhd.mfdaq_channeltypes is inherited from superclass NDR.READER.BASE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.intan_rhd.mfdaq_prefix is inherited from superclass NDR.READER.BASE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX Help for ndr.reader.intan_rhd.mfdaq_type is inherited from superclass NDR.READER.BASE mfdaqchanneltype2intanchanneltype - Convert the channel type from generic format of multifuncdaqchannel to the specific Intan channel type INTANCHANNELTYPE = MFDAQCHANNELTYPE2INTANCHANNELTYPE(CHANNELTYPE) The intanchanneltype is a string of the specific channel type for Intan. mfdaqchanneltype2intanfreqheader - Return header name with frequency information for channel type HEADERNAME = MFDAQCHANNELTYPE2INTANFREQHEADER(CHANNELTYPE) Given an ndr.ndr.mfdaq channel type string, this function returns the associated fieldname. mfdaqchanneltype2intanheadertype - Convert between the ndr.ndr.reader.mfdaq channel types and Intan headers INTANCHANHEADERTYPE = MFDAQCHANNELTYPE2INTANHEADERTYPE(CHANNELTYPE) Given a standard ndr.ndr.reader.mfdaq channel type, returns the name of the type as indicated in Intan header files. readchannels_epochsamples - Read the data based on specified channels DATA = READCHANNELS_EPOCHSAMPLES(INTANREADER_OBJ, CHANNELTYPE, CHANNEL, EPOCH, S0, S1) CHANNELTYPE is the type of channel to read (single text string, such as 'ai','analog_input','time') CHANNEL is a vector of the channel numbers to read, beginning from 1. EPOCH is the epoch number to read from. DATA will have one column per channel. readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_BASE_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndr.reader.intan_rhd/readevents_epochsamples_native is inherited from superclass NDR.READER.BASE samplerate - Get the sample rate for specific channel SR = SAMPLERATE(INTANREADER_OBJ, EPOCHSTREAMS, EPOCH_SELECT, CHANNELTYPE, CHANNEL) SR is an array of sample rates from the specified channels. CHANNELTYPE can be either a string or a cell array of strings the same length as the vector CHANNEL. If CHANNELTYPE is a single string, then it is assumed that that CHANNELTYPE applies to every entry of CHANNEL. t0_t1 - Return the beginning and end epoch times for an epoch T0T1 = T0_T1(INTAN_RHD_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndr.time.clocktype objects returned by EPOCH_NUMBER. The abstract class always return {[NaN NaN]}. See also: ndr.time.clocktype, EPOCHCLOCK","title":"Methods help"},{"location":"reference/%2Bndr/%2Breader/somecompany_someformat.m/","text":"ndr.reader.somecompany_someformat \u00b6 SOMECOMPANY_SOMEFORMAT - create a new NDR reader base object that reads a particular company or group's format NDR_OBJ = SOMECOMPANY_SOMEFORMAT() This is a template file for making ndr.reader.base objects that interpret and read data from a particular company or group SOMECOMPANY in SOMEFORMAT. Documentation for ndr . reader . somecompany_someformat doc ndr . reader . somecompany_someformat","title":"ndr.reader.somecompany_someformat"},{"location":"reference/%2Bndr/%2Breader/somecompany_someformat.m/#ndrreadersomecompany_someformat","text":"SOMECOMPANY_SOMEFORMAT - create a new NDR reader base object that reads a particular company or group's format NDR_OBJ = SOMECOMPANY_SOMEFORMAT() This is a template file for making ndr.reader.base objects that interpret and read data from a particular company or group SOMECOMPANY in SOMEFORMAT. Documentation for ndr . reader . somecompany_someformat doc ndr . reader . somecompany_someformat","title":"ndr.reader.somecompany_someformat"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/","text":"CLASS ndr.reader.spikegadgets_rec \u00b6 path --> epoch start&end Superclasses \u00b6 ndr.reader.base Properties \u00b6 none Methods \u00b6 Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles ndr.reader.spikegadgets_rec/filenamefromepochfiles is a function. getchannelsepoch List the channels that are available on this device for a given epoch getepochprobemap GETEPOCHPROBEMAP returns struct with probe information mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL spikegadgets_rec create a new Neuroscience Data Reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch Methods help \u00b6 canbereadtogether - can the channels in a channel struct be read in a single function call? [B,ERRORMSG] = CANBEREADTOGETHER(NDR_READER_BASE_OBJ, CHANNELSTRUCT) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call. If they cannot be read together, a description is provided in ERRORMSG. In the abstract class, this returns 1 if all of the samplerate values are the same and none are NaNs. CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type samplerate The sampling rate of this channel, or NaN if not applicable. ------------------------------------------------------------------------------ in the abstract class, this returns 1 if all the samplerates are the same and none are NaNs Help for ndr.reader.spikegadgets_rec/canbereadtogether is inherited from superclass NDR.READER.BASE daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS(NDR_READER_BASE_OBJ, ... CHANNELPREFIX, CHANNELNUMBERS, EPOCHFILES, EPOCH_SELECT) Inputs: For a set of CHANNELPREFIX (cell array of channel prefixes that describe channels for this device) and CHANNELNUMBER (array of channel numbers, 1 for each entry in CHANNELPREFIX), and for a given recording epoch (specified by EPOCHSTREAMS and EPOCH_SELECT), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Output: CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). For the generic ndr.reader.base, this returns a single clock type 'dev_local'time'; See also: ndr.time.clocktype Help for ndr.reader.spikegadgets_rec/epochclock is inherited from superclass NDR.READER.BASE filenamefromepochfiles - ndr.reader.spikegadgets_rec/filenamefromepochfiles is a function. filename = filenamefromepochfiles(ndr_reader_base_spikegadgets_obj, filename) getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELS(THEDEV, EPOCHFILES) EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information name, reference, n-trode, channels EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.spikegadgets_rec.mfdaq_channeltypes is inherited from superclass NDR.READER.BASE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.spikegadgets_rec.mfdaq_prefix is inherited from superclass NDR.READER.BASE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX Help for ndr.reader.spikegadgets_rec.mfdaq_type is inherited from superclass NDR.READER.BASE readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read 'digital_in', 'digital_out', 'analog_in', 'analog_out' or 'auxiliary' CHANNEL is a vector of the channel numbers to read beginning from 1 if 'etrodeftrode' is channeltype, if channeltype is 'analog_in' channel is an array with the string names of analog channels 'Ain1'through 8 EPOCH is set of files in the epoch DATA is the channel data (each column contains data from an indvidual channel) readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_BASE_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndr.reader.spikegadgets_rec/readevents_epochsamples_native is inherited from superclass NDR.READER.BASE samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. CHANNELTYPE and CHANNEL not used in this case since it is the same for all channels in this device spikegadgets_rec - create a new Neuroscience Data Reader object READER_OBJ = ndr.ndr.reader() Creates an Neuroscence Data Reader object of SpikeGadgets. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK","title":"ndr.reader.spikegadgets_rec"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#class-ndrreaderspikegadgets_rec","text":"path --> epoch start&end","title":"CLASS ndr.reader.spikegadgets_rec"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#superclasses","text":"ndr.reader.base","title":"Superclasses"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#methods","text":"Method Description canbereadtogether can the channels in a channel struct be read in a single function call? daqchannels2internalchannels convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions epochclock return the ndr.time.clocktype objects for an epoch filenamefromepochfiles ndr.reader.spikegadgets_rec/filenamefromepochfiles is a function. getchannelsepoch List the channels that are available on this device for a given epoch getepochprobemap GETEPOCHPROBEMAP returns struct with probe information mfdaq_channeltypes channel types for ndi.daq.system.mfdaq objects mfdaq_prefix Give the channel prefix for a channel type mfdaq_type Give the preferred long channel type for a channel type readchannels_epochsamples read the data based on specified channels readevents_epochsamples_native read events or markers of specified channels for a specified epoch samplerate GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL spikegadgets_rec create a new Neuroscience Data Reader object t0_t1 return the t0_t1 (beginning and end) epoch times for an epoch","title":"Methods"},{"location":"reference/%2Bndr/%2Breader/spikegadgets_rec.m/#methods-help","text":"canbereadtogether - can the channels in a channel struct be read in a single function call? [B,ERRORMSG] = CANBEREADTOGETHER(NDR_READER_BASE_OBJ, CHANNELSTRUCT) Returns 1 if the NDR_READER_BASE_OBJ can read all of the channels in CHANNELSTRUCT with a single function call. If they cannot be read together, a description is provided in ERRORMSG. In the abstract class, this returns 1 if all of the samplerate values are the same and none are NaNs. CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type samplerate The sampling rate of this channel, or NaN if not applicable. ------------------------------------------------------------------------------ in the abstract class, this returns 1 if all the samplerates are the same and none are NaNs Help for ndr.reader.spikegadgets_rec/canbereadtogether is inherited from superclass NDR.READER.BASE daqchannels2internalchannels - convert a set of DAQ channel prefixes and channel numbers to an internal structure to pass to internal reading functions CHANNELSTRUCT = DAQCHANNELS2INTERNALCHANNELS(NDR_READER_BASE_OBJ, ... CHANNELPREFIX, CHANNELNUMBERS, EPOCHFILES, EPOCH_SELECT) Inputs: For a set of CHANNELPREFIX (cell array of channel prefixes that describe channels for this device) and CHANNELNUMBER (array of channel numbers, 1 for each entry in CHANNELPREFIX), and for a given recording epoch (specified by EPOCHSTREAMS and EPOCH_SELECT), this function returns a structure CHANNELSTRUCT describing the channel information that should be passed to READCHANNELS_EPOCHSAMPLES or READEVENTS_EPOCHSAMPLES. EPOCHSTREAMS is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Output: CHANNELSTRUCT is a structure with the following fields: Parameter Description internal_type Internal channel type; the type of channel as it is known to the device. internal_number Internal channel number, as known to device internal_channelname Internal channel name, as known to the device ndr_type The NDR type of channel; should be one of the types returned by ndr.reader.base.mfdaq_type ------------------------------------------------------------------------------ abstract class returns empty epochclock - return the ndr.time.clocktype objects for an epoch EC = EPOCHCLOCK(NDR_READER_BASE_OBJ, EPOCHSTREAMS, EPOCH_SELECT) Return the clock types available for this epoch as a cell array of ndr.time.clocktype objects (or sub-class members). For the generic ndr.reader.base, this returns a single clock type 'dev_local'time'; See also: ndr.time.clocktype Help for ndr.reader.spikegadgets_rec/epochclock is inherited from superclass NDR.READER.BASE filenamefromepochfiles - ndr.reader.spikegadgets_rec/filenamefromepochfiles is a function. filename = filenamefromepochfiles(ndr_reader_base_spikegadgets_obj, filename) getchannelsepoch - List the channels that are available on this device for a given epoch CHANNELS = GETCHANNELS(THEDEV, EPOCHFILES) EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Returns the channel list of acquired channels in this epoch CHANNELS is a structure list of all channels with fields: 'name' | The name of the channel (e.g., 'ai1') 'type' | The type of data stored in the channel | (e.g., 'analogin', 'digitalin', 'image', 'timestamp') getepochprobemap - GETEPOCHPROBEMAP returns struct with probe information name, reference, n-trode, channels EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. mfdaq_channeltypes - channel types for ndi.daq.system.mfdaq objects CT = MFDAQ_CHANNELTYPES - channel types for ndi.daq.system.mfdaq objects Returns a cell array of strings of supported channels of the ndi.daq.system.mfdaq class. These are the following: Channel type: | Description: analog_in | Analog input channel aux_in | Auxiliary input analog_out | Analog output channel digital_in | Digital input channel digital_out | Digital output channel marker | See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.spikegadgets_rec.mfdaq_channeltypes is inherited from superclass NDR.READER.BASE mfdaq_prefix - Give the channel prefix for a channel type PREFIX = MFDAQ_PREFIX(CHANNELTYPE) Produces the channel name prefix for a given CHANNELTYPE. Channel type: | MFDAQ_PREFIX: 'analog_in', 'ai' | 'ai' 'analog_out', 'ao' | 'ao' 'digital_in', 'di' | 'di' 'digital_out', 'do' | 'do' 'time','timestamp','t' | 't' 'auxiliary','aux','ax', | 'ax' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mk' 'text' | 'text' 'event' or 'e' | 'e' 'metadata' or 'md' | 'md' 'digital_in_event', 'de', | 'dep' 'digital_in_event_pos','dep'| 'digital_in_event_neg','den'| 'den' 'digital_in_mark','dimp', | 'dimp' 'digital_in_mark_pos','dim' | 'digital_in_mark_neg','dimn'| 'dimn' See also: ndi.daq.system.mfdaq/MFDAQ_TYPE Help for ndr.reader.spikegadgets_rec.mfdaq_prefix is inherited from superclass NDR.READER.BASE mfdaq_type - Give the preferred long channel type for a channel type TYPE = MFDAQ_TYPE(CHANNELTYPE) Produces the preferred long channel type name for a given CHANNELTYPE. Channel type: | MFDAQ_TYPE: 'analog_in', 'ai' | 'analog_in' 'analog_out', 'ao' | 'analog_out' 'digital_in', 'di' | 'digital_in' 'digital_out', 'do' | 'digital_out' 'time','timestamp','t' | 'time' 'auxiliary','aux','ax', | 'auxiliary' 'auxiliary_in' | 'mark', 'marker', or 'mk' | 'mark' 'event' or 'e' | 'event' See also: ndi.daq.system.mfdaq/MFDAQ_PREFIX Help for ndr.reader.spikegadgets_rec.mfdaq_type is inherited from superclass NDR.READER.BASE readchannels_epochsamples - read the data based on specified channels DATA = READ_CHANNELS(MYDEV, CHANNELTYPE, CHANNEL, EPOCHFILES ,S0, S1) CHANNELTYPE is the type of channel to read 'digital_in', 'digital_out', 'analog_in', 'analog_out' or 'auxiliary' CHANNEL is a vector of the channel numbers to read beginning from 1 if 'etrodeftrode' is channeltype, if channeltype is 'analog_in' channel is an array with the string names of analog channels 'Ain1'through 8 EPOCH is set of files in the epoch DATA is the channel data (each column contains data from an indvidual channel) readevents_epochsamples_native - read events or markers of specified channels for a specified epoch [DATA] = READEVENTS_EPOCHSAMPLES_NATIVE(NDR_READER_BASE_OBJ, CHANNELTYPE, CHANNEL, EPOCHFILES, T0, T1) CHANNELTYPE is the type of channel to read ('event','marker', etc). It must be a string (not a cell array of strings). CHANNEL is a vector with the identity of the channel(s) to be read. EPOCH is the epoch number or epochID DATA is a two-column vector; the first column has the time of the event. The second column indicates the marker code. In the case of 'events', this is just 1. If more than one channel is requested, DATA is returned as a cell array, one entry per channel. TIMEREF is an ndi.time.timereference with the NDI_CLOCK of the device, referring to epoch N at time 0 as the reference. Help for ndr.reader.spikegadgets_rec/readevents_epochsamples_native is inherited from superclass NDR.READER.BASE samplerate - GET THE SAMPLE RATE FOR SPECIFIC EPOCH AND CHANNEL SR = SAMPLERATE(DEV, EPOCHFILES, CHANNELTYPE, CHANNEL) SR is the list of sample rate from specified channels EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. CHANNELTYPE and CHANNEL not used in this case since it is the same for all channels in this device spikegadgets_rec - create a new Neuroscience Data Reader object READER_OBJ = ndr.ndr.reader() Creates an Neuroscence Data Reader object of SpikeGadgets. t0_t1 - return the t0_t1 (beginning and end) epoch times for an epoch T0T1 = T0_T1(NDI_EPOCHSET_OBJ, EPOCHFILES) EPOCHFILES is a cell array of full path file names or remote access streams that comprise the epoch of data EPOCH_SELECT allows one to choose which epoch in the file one wants to access, if the file(s) has more than one epoch contained. For most devices, EPOCH_SELECT is always 1. Return the beginning (t0) and end (t1) times of the epoch EPOCH_NUMBER in the same units as the ndi.time.clocktype objects returned by EPOCHCLOCK. The abstract class always returns {[NaN NaN]}. See also: ndi.time.clocktype, EPOCHCLOCK","title":"Methods help"},{"location":"reference/%2Bndr/%2Bstring/channelstring2channels.m/","text":"ndr.string.channelstring2channels \u00b6 ndr.string.channelstring2channels - convert a channel string to an array of channel prefiex and numbers [CHANNELNAMEPREFIX, CHANNELNUMBER] = ... ndr.string.channelstring2channels(CHANNELSTRING) Given a CHANNELSTRING, returns a cell array of channel prefixes and an array of channel numbers that correspond to the CHANNELSTRING. A CHANNELSTRING is a means of specifying channels that have prefixes and numbers. It includes a sequence of letters, followed by numbers to specify the channels. One can indicate a sequential range of channels by using a dash ('-') and one can enumerate individual channels with a comma (','). Different channel prefixes can be specified by placing a plus ('+') between sets of channels. Examples: [cp, cn] = ndr.string.channelstring2channels('a1,3-5,2') % cp == {'a','a','a','a','a'}' % cn == [1 3 4 5 2]' [cp, cn] = ndr.string.channelstring2channels('ai1-3+b2-4') % cp == {'ai','ai','ai','b','b','b'}' % cn == [ 1 2 3 2 3 4]'","title":"ndr.string.channelstring2channels"},{"location":"reference/%2Bndr/%2Bstring/channelstring2channels.m/#ndrstringchannelstring2channels","text":"ndr.string.channelstring2channels - convert a channel string to an array of channel prefiex and numbers [CHANNELNAMEPREFIX, CHANNELNUMBER] = ... ndr.string.channelstring2channels(CHANNELSTRING) Given a CHANNELSTRING, returns a cell array of channel prefixes and an array of channel numbers that correspond to the CHANNELSTRING. A CHANNELSTRING is a means of specifying channels that have prefixes and numbers. It includes a sequence of letters, followed by numbers to specify the channels. One can indicate a sequential range of channels by using a dash ('-') and one can enumerate individual channels with a comma (','). Different channel prefixes can be specified by placing a plus ('+') between sets of channels. Examples: [cp, cn] = ndr.string.channelstring2channels('a1,3-5,2') % cp == {'a','a','a','a','a'}' % cn == [1 3 4 5 2]' [cp, cn] = ndr.string.channelstring2channels('ai1-3+b2-4') % cp == {'ai','ai','ai','b','b','b'}' % cn == [ 1 2 3 2 3 4]'","title":"ndr.string.channelstring2channels"},{"location":"reference/%2Bndr/%2Bstring/intseq2str.m/","text":"ndr.string.intseq2str \u00b6 INTSEQ2STR - Convert an array of integers to a compact string, maintaining sequence STR = ndr.string.intseq2str(A) Converts the sequence of integers in array A to a compact, human-readable sequence with '-' indicating inclusion of a series of numbers and commas separating discontinuous numbers. The function can also take extra parameters as name/value pairs: Parameter (default value) | Description sep (',') | The separator between the numbers seq ('-') | The character that indicates a sequential run of numbers Example: A = [1 2 3 7 10] str = ndr.string.intseq2str(A) % str == '1-3,7,10' See also: INT2STR, ndr.string.str2intseq","title":"ndr.string.intseq2str"},{"location":"reference/%2Bndr/%2Bstring/intseq2str.m/#ndrstringintseq2str","text":"INTSEQ2STR - Convert an array of integers to a compact string, maintaining sequence STR = ndr.string.intseq2str(A) Converts the sequence of integers in array A to a compact, human-readable sequence with '-' indicating inclusion of a series of numbers and commas separating discontinuous numbers. The function can also take extra parameters as name/value pairs: Parameter (default value) | Description sep (',') | The separator between the numbers seq ('-') | The character that indicates a sequential run of numbers Example: A = [1 2 3 7 10] str = ndr.string.intseq2str(A) % str == '1-3,7,10' See also: INT2STR, ndr.string.str2intseq","title":"ndr.string.intseq2str"},{"location":"reference/%2Bndr/%2Bstring/str2intseq.m/","text":"ndr.string.str2intseq \u00b6 STR2INTSEQ - Recover a sequence of integers from a string A = ndr.string.str2intseq(STR) Given a string that specifies a list of integers, with a dash ('-') indicating a run of sequential integers in order, and a comma (',') indicating integers that are not (necessarily) sequential. The function can also take extra parameters as name/value pairs: Parameter (default value) | Description sep (',') | The separator between the numbers seq ('-') | The character that indicates a sequential run of numbers Example: str = '1-3,7,10,12'; a = ndr.string.str2intseq(str); % a == [1 2 3 7 10 12]","title":"ndr.string.str2intseq"},{"location":"reference/%2Bndr/%2Bstring/str2intseq.m/#ndrstringstr2intseq","text":"STR2INTSEQ - Recover a sequence of integers from a string A = ndr.string.str2intseq(STR) Given a string that specifies a list of integers, with a dash ('-') indicating a run of sequential integers in order, and a comma (',') indicating integers that are not (necessarily) sequential. The function can also take extra parameters as name/value pairs: Parameter (default value) | Description sep (',') | The separator between the numbers seq ('-') | The character that indicates a sequential run of numbers Example: str = '1-3,7,10,12'; a = ndr.string.str2intseq(str); % a == [1 2 3 7 10 12]","title":"ndr.string.str2intseq"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bced/test.m/","text":"ndr.test.format.ced.test \u00b6 ndr.test.format.ced.test- test reading from CED format","title":"ndr.test.format.ced.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bced/test.m/#ndrtestformatcedtest","text":"ndr.test.format.ced.test- test reading from CED format","title":"ndr.test.format.ced.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bintan_rhd/test.m/","text":"ndr.test.format.intan_rhd.test \u00b6 ndr.test.format.intan_rhd.test - test reading from Intan RHD format","title":"ndr.test.format.intan_rhd.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bintan_rhd/test.m/#ndrtestformatintan_rhdtest","text":"ndr.test.format.intan_rhd.test - test reading from Intan RHD format","title":"ndr.test.format.intan_rhd.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bspikegadgets/test.m/","text":"ndr.test.format.spikegadgets.test \u00b6 ndr.test.format.spikegadgets.test - test reading from SpikeGadgets format","title":"ndr.test.format.spikegadgets.test"},{"location":"reference/%2Bndr/%2Btest/%2Bformat/%2Bspikegadgets/test.m/#ndrtestformatspikegadgetstest","text":"ndr.test.format.spikegadgets.test - test reading from SpikeGadgets format","title":"ndr.test.format.spikegadgets.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bced_smr/test.m/","text":"ndr.test.reader.ced_smr.test \u00b6 ndr.test.reader.ced_smr.test- test reading using NDR reader with CED SOMSMR format","title":"ndr.test.reader.ced_smr.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bced_smr/test.m/#ndrtestreaderced_smrtest","text":"ndr.test.reader.ced_smr.test- test reading using NDR reader with CED SOMSMR format","title":"ndr.test.reader.ced_smr.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bintan_rhd/test.m/","text":"ndr.test.reader.intan_rhd.test \u00b6 ndr.test.reader.intan_rhd.test - Test reading using Neuroscience Data Reader with Intan Technologies .RHD file format See also: ndr.reader.intan_rhd","title":"ndr.test.reader.intan_rhd.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bintan_rhd/test.m/#ndrtestreaderintan_rhdtest","text":"ndr.test.reader.intan_rhd.test - Test reading using Neuroscience Data Reader with Intan Technologies .RHD file format See also: ndr.reader.intan_rhd","title":"ndr.test.reader.intan_rhd.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bspikegadgets_rec/test.m/","text":"ndr.test.reader.spikegadgets_rec.test \u00b6 ndr.test.reader.spikegadgets_rec.test- test reading using NDR reader with spikegadgets_rec format","title":"ndr.test.reader.spikegadgets_rec.test"},{"location":"reference/%2Bndr/%2Btest/%2Breader/%2Bspikegadgets_rec/test.m/#ndrtestreaderspikegadgets_rectest","text":"ndr.test.reader.spikegadgets_rec.test- test reading using NDR reader with spikegadgets_rec format","title":"ndr.test.reader.spikegadgets_rec.test"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/","text":"CLASS ndr.time.clocktype \u00b6 CLOCKTYPE - a class for specifying a clock type in the NDR framework Superclasses \u00b6 none Properties \u00b6 Property Description type the ndr_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time' Methods \u00b6 Method Description clocktype Creates a new ndr.time.clocktype object eq are two ndr.time.clocktype objects equal? ndr_clocktype2char produce the NDR_CLOCKTOP's type as a string ne are two ndr.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndr.time.clocktype Methods help \u00b6 clocktype - Creates a new ndr.time.clocktype object OBJ = ndr.time.clocktype(TYPE) Creates a new ndr.time.clocktype object. TYPE can be any of the following strings (with description): TYPE string | Description 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device. eq - are two ndr.time.clocktype objects equal? B = EQ(NDS_CLOCK_OBJ_A, NDR_CLOCKTYPE_OBJ_B) Compares two NDR_CLOCKTYPE_objects and returns 1 if they refer to the same clock type. ndr_clocktype2char - produce the NDR_CLOCKTOP's type as a string STR = NDR_CLOCKTYPE2CHAR(NDR_CLOCKTYPE_OBJ) Return a string STR equal to the ndr.time.clocktype object's type parameter. ne - are two ndr.time.clocktype objects not equal? B = EQ(NDS_CLOCK_OBJ_A, NDR_CLOCKTYPE_OBJ_B) Compares two NDR_CLOCKTYPE_objects and returns 0 if they refer to the same clock type. needsepoch - does this clocktype need an epoch for full description? B = NEEDSEPOCH(NDR_CLOCKTYPE_OBJ) Does this ndr.time.clocktype object need an epoch in order to specify time? Returns 1 for 'dev_local_time', 0 otherwise. setclocktype - Set the type of an ndr.time.clocktype NDR_CLOCKTYPE_OBJ = SETCLOCKTYPE(NDR_CLOCKTYPE_OBJ, TYPE) Sets the TYPE property of an ndr.time.clocktype object NDR_CLOCKTYPE_OBJ. Valid values for the TYPE string are as follows: TYPE string | Description 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device.","title":"ndr.time.clocktype"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#class-ndrtimeclocktype","text":"CLOCKTYPE - a class for specifying a clock type in the NDR framework","title":"CLASS ndr.time.clocktype"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#properties","text":"Property Description type the ndr_clock type; in this class, acceptable values are 'UTC', 'exp_global_time', and 'no_time'","title":"Properties"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#methods","text":"Method Description clocktype Creates a new ndr.time.clocktype object eq are two ndr.time.clocktype objects equal? ndr_clocktype2char produce the NDR_CLOCKTOP's type as a string ne are two ndr.time.clocktype objects not equal? needsepoch does this clocktype need an epoch for full description? setclocktype Set the type of an ndr.time.clocktype","title":"Methods"},{"location":"reference/%2Bndr/%2Btime/clocktype.m/#methods-help","text":"clocktype - Creates a new ndr.time.clocktype object OBJ = ndr.time.clocktype(TYPE) Creates a new ndr.time.clocktype object. TYPE can be any of the following strings (with description): TYPE string | Description 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device. eq - are two ndr.time.clocktype objects equal? B = EQ(NDS_CLOCK_OBJ_A, NDR_CLOCKTYPE_OBJ_B) Compares two NDR_CLOCKTYPE_objects and returns 1 if they refer to the same clock type. ndr_clocktype2char - produce the NDR_CLOCKTOP's type as a string STR = NDR_CLOCKTYPE2CHAR(NDR_CLOCKTYPE_OBJ) Return a string STR equal to the ndr.time.clocktype object's type parameter. ne - are two ndr.time.clocktype objects not equal? B = EQ(NDS_CLOCK_OBJ_A, NDR_CLOCKTYPE_OBJ_B) Compares two NDR_CLOCKTYPE_objects and returns 0 if they refer to the same clock type. needsepoch - does this clocktype need an epoch for full description? B = NEEDSEPOCH(NDR_CLOCKTYPE_OBJ) Does this ndr.time.clocktype object need an epoch in order to specify time? Returns 1 for 'dev_local_time', 0 otherwise. setclocktype - Set the type of an ndr.time.clocktype NDR_CLOCKTYPE_OBJ = SETCLOCKTYPE(NDR_CLOCKTYPE_OBJ, TYPE) Sets the TYPE property of an ndr.time.clocktype object NDR_CLOCKTYPE_OBJ. Valid values for the TYPE string are as follows: TYPE string | Description 'utc' | Universal coordinated time (within 0.1ms) 'approx_utc' | Universal coordinated time (within 5 seconds) 'exp_global_time' | Experiment global time (within 0.1ms) 'approx_exp_global_time' | Experiment global time (within 5s) 'dev_global_time' | A device keeps its own global time (within 0.1ms) | (that is, it knows its own clock across recording epochs) 'approx_dev_global_time' | A device keeps its own global time (within 5 s) | (that is, it knows its own clock across recording epochs) 'dev_local_time' | A device keeps its own local time only within epochs 'no_time' | No timing information 'inherited' | The timing information is inherited from another device.","title":"Methods help"},{"location":"reference/%2Bndr/%2Btime/timereference.m/","text":"CLASS ndr.time.timereference \u00b6 NDR.TIME.TIMEREFERENCE - a class for specifying time relative to an NDR_CLOCK Superclasses \u00b6 none Properties \u00b6 Property Description referent the ndr.system, ndr.probe.*,... that is referred to (must be a subclass of ndr.epoch.epochset) clocktype the ndr.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time Methods \u00b6 Method Description ndr_timereference_struct return a structure that describes an ndr.time.timereference object that lacks Matlab objects timereference creates a new time reference object Methods help \u00b6 ndr_timereference_struct - return a structure that describes an ndr.time.timereference object that lacks Matlab objects A = NDR_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ) Returns a structure with the following fields: Fieldname | Description referent_epochsetname | The epochsetname() of the referent referent_classname | The classname of the referent clocktypestring | The value of the clocktype epoch | The epoch (either a string or a number) session_ID | The session ID of the session that contains the epoch time | The time timereference - creates a new time reference object OBJ = NDR.TIME.TIMEREFERENCE(REFERENT, CLOCKTYPE, EPOCH, TIME) Creates a new ndr.time.timereference object. The REFERENT, EPOCH, and TIME must specify a unique time. REFERENT is any subclass of ndi.epoch.epochset object that has a 'session' property (e.g., ndr.system, ndr.element, etc...). TYPE is the time type, can be 'utc', 'exp_global_time', or 'dev_global_time' or 'dev_local_time' If TYPE is 'dev_local_time', then the EPOCH identifier is necessary. Otherwise, it can be empty. If EPOCH is specified, then TIME is taken to be relative to the EPOCH number of the device associated with CLOCK, even if the device keeps universal or time. An alternative creator is available: OBJ = ndr.time.timereference(NDR_SESSION_OBJ, NDR_TIMEREF_STRUCT) where NDR_SESSION_OBJ is an ndr.session and NDR_TIMEREF_STRUCT is a structure returned by ndr.time.timereference/NDR_TIMEREFERENCE_STRUCT. The NDR_SESSION_OBJ fields will be searched to find the live REFERENT to create OBJ.","title":"ndr.time.timereference"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#class-ndrtimetimereference","text":"NDR.TIME.TIMEREFERENCE - a class for specifying time relative to an NDR_CLOCK","title":"CLASS ndr.time.timereference"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#properties","text":"Property Description referent the ndr.system, ndr.probe.*,... that is referred to (must be a subclass of ndr.epoch.epochset) clocktype the ndr.time.clocktype: can be 'utc', 'exp_global_time', 'dev_global_time', or 'dev_local_time' epoch the epoch that may be referred to (required if the time type is 'dev_local_time') time the time of the referent that is referred to session_ID the ID of the session that contains the time","title":"Properties"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#methods","text":"Method Description ndr_timereference_struct return a structure that describes an ndr.time.timereference object that lacks Matlab objects timereference creates a new time reference object","title":"Methods"},{"location":"reference/%2Bndr/%2Btime/timereference.m/#methods-help","text":"ndr_timereference_struct - return a structure that describes an ndr.time.timereference object that lacks Matlab objects A = NDR_TIMEREFERENCE_STRUCT(NDI_TIMEREF_OBJ) Returns a structure with the following fields: Fieldname | Description referent_epochsetname | The epochsetname() of the referent referent_classname | The classname of the referent clocktypestring | The value of the clocktype epoch | The epoch (either a string or a number) session_ID | The session ID of the session that contains the epoch time | The time timereference - creates a new time reference object OBJ = NDR.TIME.TIMEREFERENCE(REFERENT, CLOCKTYPE, EPOCH, TIME) Creates a new ndr.time.timereference object. The REFERENT, EPOCH, and TIME must specify a unique time. REFERENT is any subclass of ndi.epoch.epochset object that has a 'session' property (e.g., ndr.system, ndr.element, etc...). TYPE is the time type, can be 'utc', 'exp_global_time', or 'dev_global_time' or 'dev_local_time' If TYPE is 'dev_local_time', then the EPOCH identifier is necessary. Otherwise, it can be empty. If EPOCH is specified, then TIME is taken to be relative to the EPOCH number of the device associated with CLOCK, even if the device keeps universal or time. An alternative creator is available: OBJ = ndr.time.timereference(NDR_SESSION_OBJ, NDR_TIMEREF_STRUCT) where NDR_SESSION_OBJ is an ndr.session and NDR_TIMEREF_STRUCT is a structure returned by ndr.time.timereference/NDR_TIMEREFERENCE_STRUCT. The NDR_SESSION_OBJ fields will be searched to find the live REFERENT to create OBJ.","title":"Methods help"},{"location":"tutorials/makingnewreader/","text":"","title":"4 Add a new file format"},{"location":"tutorials/readanalog/","text":"","title":"1 Reading analog data"},{"location":"tutorials/readdigital/","text":"","title":"2 Reading digital data"},{"location":"tutorials/readevents/","text":"","title":"3 Reading events"}]}